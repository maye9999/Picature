(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("canvas"), require("gl"));
	else if(typeof define === 'function' && define.amd)
		define(["canvas", "gl"], factory);
	else if(typeof exports === 'object')
		exports["PhotoEditorSDK"] = factory(require("canvas"), require("gl"));
	else
		root["PhotoEditorSDK"] = factory(root["canvas"], root["gl"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_28__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 106);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(169);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(168);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(32);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(32);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _primitivesStack = __webpack_require__(140);
	
	var _primitivesStack2 = _interopRequireDefault(_primitivesStack);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Base class for filters. Extendable via {@link PhotoEditorSDK.Filter#extend}
	 * @class
	 * @memberof PhotoEditorSDK
	 */
	
	var Filter = function () {
	  function Filter() {
	    var intensity = arguments.length <= 0 || arguments[0] === undefined ? 1.0 : arguments[0];
	    (0, _classCallCheck3.default)(this, Filter);
	
	    this._intensity = intensity;
	    this._stack = new _primitivesStack2.default(intensity);
	  }
	
	  /**
	   * Renders the filter
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {PhotoEditorSDK.Engine.RenderTexture}
	   * @return {Promise}
	   */
	
	
	  Filter.prototype.render = function render(sdk, renderTexture) {
	    return this._stack.render(sdk, renderTexture);
	  };
	
	  /**
	   * Sets the intensity to the given value
	   * @param {Number} intensity
	   */
	
	
	  Filter.prototype.setIntensity = function setIntensity(intensity) {
	    this._intensity = intensity;
	    this._stack.setIntensity(intensity);
	  };
	
	  /**
	   * Sets the dirtiness for the given renderer
	   * @param {Boolean} dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   */
	
	
	  Filter.prototype.setDirtyForRenderer = function setDirtyForRenderer(dirty, renderer) {
	    this._stack.setDirtyForRenderer(dirty, renderer);
	  };
	
	  /**
	   * Cleans this instance up
	   */
	
	
	  Filter.prototype.dispose = function dispose() {
	    this._stack.dispose();
	  };
	
	  return Filter;
	}();
	
	/**
	 * A unique string that identifies this filter
	 * @type {String}
	 */
	/* jshint unused: false */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	Filter.identifier = null;
	
	/**
	 * If `isIdentity` is true, this filter does not do anything and can be seen as
	 * the default filter.
	 * @type {Boolean}
	 */
	Filter.isIdentity = false;
	
	/**
	 * This string is used by the UI
	 * @type {String}
	 */
	Filter.displayName = null;
	
	/**
	 * To create an {@link PhotoEditorSDK.Filter} class of your own, call this
	 * method and provide instance properties and functions.
	 * @function
	 */
	Filter.extend = __webpack_require__(72);
	
	// Exposed classes
	Filter.PrimitivesStack = _primitivesStack2.default;
	
	exports.default = Filter;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _brightness = __webpack_require__(141);
	
	Object.defineProperty(exports, 'Brightness', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_brightness).default;
	  }
	});
	
	var _contrast = __webpack_require__(142);
	
	Object.defineProperty(exports, 'Contrast', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_contrast).default;
	  }
	});
	
	var _desaturation = __webpack_require__(143);
	
	Object.defineProperty(exports, 'Desaturation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_desaturation).default;
	  }
	});
	
	var _glow = __webpack_require__(144);
	
	Object.defineProperty(exports, 'Glow', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_glow).default;
	  }
	});
	
	var _gobblin = __webpack_require__(145);
	
	Object.defineProperty(exports, 'Gobblin', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_gobblin).default;
	  }
	});
	
	var _grayscale = __webpack_require__(146);
	
	Object.defineProperty(exports, 'Grayscale', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_grayscale).default;
	  }
	});
	
	var _lookupTable = __webpack_require__(79);
	
	Object.defineProperty(exports, 'LookupTable', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_lookupTable).default;
	  }
	});
	
	var _saturation = __webpack_require__(147);
	
	Object.defineProperty(exports, 'Saturation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_saturation).default;
	  }
	});
	
	var _softColorOverlay = __webpack_require__(148);
	
	Object.defineProperty(exports, 'SoftColorOverlay', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_softColorOverlay).default;
	  }
	});
	
	var _toneCurve = __webpack_require__(149);
	
	Object.defineProperty(exports, 'ToneCurve', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_toneCurve).default;
	  }
	});
	
	var _x = __webpack_require__(150);
	
	Object.defineProperty(exports, 'X400', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_x).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Promise = exports.Log = exports.Constants = exports.Color = exports.Configurable = exports.Utils = exports.EventEmitter = exports.Engine = exports.cancelAnimationFrame = exports.requestAnimationFrame = undefined;
	
	var _animationFrame = __webpack_require__(167);
	
	Object.defineProperty(exports, 'requestAnimationFrame', {
	  enumerable: true,
	  get: function get() {
	    return _animationFrame.requestAnimationFrame;
	  }
	});
	Object.defineProperty(exports, 'cancelAnimationFrame', {
	  enumerable: true,
	  get: function get() {
	    return _animationFrame.cancelAnimationFrame;
	  }
	});
	
	var _math = __webpack_require__(62);
	
	Object.keys(_math).forEach(function (key) {
	  if (key === "default") return;
	  Object.defineProperty(exports, key, {
	    enumerable: true,
	    get: function get() {
	      return _math[key];
	    }
	  });
	});
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _constants = __webpack_require__(38);
	
	var Constants = _interopRequireWildcard(_constants);
	
	var _eventEmitter = __webpack_require__(21);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _utils = __webpack_require__(22);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _configurable = __webpack_require__(31);
	
	var _configurable2 = _interopRequireDefault(_configurable);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	var _log = __webpack_require__(24);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Engine = _engine2.default;
	exports.EventEmitter = _eventEmitter2.default;
	exports.Utils = _utils2.default;
	exports.Configurable = _configurable2.default;
	exports.Color = _color2.default;
	exports.Constants = Constants;
	exports.Log = _log2.default;
	exports.Promise = _promise2.default;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _log = __webpack_require__(24);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	var _matrix = __webpack_require__(73);
	
	var _matrix2 = _interopRequireDefault(_matrix);
	
	var _rectangle = __webpack_require__(74);
	
	var _rectangle2 = _interopRequireDefault(_rectangle);
	
	var _vector = __webpack_require__(23);
	
	var _vector2 = _interopRequireDefault(_vector);
	
	var _eventEmitter = __webpack_require__(21);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _utils = __webpack_require__(22);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.BATCH_SIZE = 2000; /*
	                            * This file is part of PhotoEditorSDK.
	                            *
	                            * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                            * All rights reserved.
	                            *
	                            * Redistribution and use in source and binary forms, without
	                            * modification, are permitted provided that the following license agreement
	                            * is approved and a legal/financial contract was signed by the user.
	                            * The license agreement can be found under following link:
	                            *
	                            * https://www.photoeditorsdk.com/LICENSE.txt
	                            */
	
	exports.VERTEX_SIZE = 5;
	exports.VERTEX_BYTE_SIZE = exports.VERTEX_SIZE * 4;
	
	exports.Color = _color2.default;
	exports.Matrix = _matrix2.default;
	exports.Vector2 = _vector2.default;
	exports.Rectangle = _rectangle2.default;
	exports.EventEmitter = _eventEmitter2.default;
	exports.Log = _log2.default;
	exports.Utils = _utils2.default;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _canvasRenderer = __webpack_require__(97);
	
	var _canvasRenderer2 = _interopRequireDefault(_canvasRenderer);
	
	var _webglRenderer = __webpack_require__(99);
	
	var _webglRenderer2 = _interopRequireDefault(_webglRenderer);
	
	var _canvasFilterManager = __webpack_require__(42);
	
	var _canvasFilterManager2 = _interopRequireDefault(_canvasFilterManager);
	
	var _webglFilterManager = __webpack_require__(43);
	
	var _webglFilterManager2 = _interopRequireDefault(_webglFilterManager);
	
	var _displayObject = __webpack_require__(41);
	
	var _displayObject2 = _interopRequireDefault(_displayObject);
	
	var _container = __webpack_require__(66);
	
	var _container2 = _interopRequireDefault(_container);
	
	var _baseTexture = __webpack_require__(46);
	
	var _baseTexture2 = _interopRequireDefault(_baseTexture);
	
	var _texture = __webpack_require__(69);
	
	var _texture2 = _interopRequireDefault(_texture);
	
	var _renderTexture = __webpack_require__(102);
	
	var _renderTexture2 = _interopRequireDefault(_renderTexture);
	
	var _webglRenderTarget = __webpack_require__(30);
	
	var _webglRenderTarget2 = _interopRequireDefault(_webglRenderTarget);
	
	var _canvasRenderTarget = __webpack_require__(29);
	
	var _canvasRenderTarget2 = _interopRequireDefault(_canvasRenderTarget);
	
	var _sprite = __webpack_require__(101);
	
	var _sprite2 = _interopRequireDefault(_sprite);
	
	var _shaders = __webpack_require__(100);
	
	var _shaders2 = _interopRequireDefault(_shaders);
	
	var _shader = __webpack_require__(44);
	
	var _shader2 = _interopRequireDefault(_shader);
	
	var _filter = __webpack_require__(96);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _pixelArrayImage = __webpack_require__(71);
	
	var _pixelArrayImage2 = _interopRequireDefault(_pixelArrayImage);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The heart of PhotoEditorSDK. Handles all the rendering in a scene-graph fashion
	 * @namespace PhotoEditorSDK.Engine
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Engine = {
	  WebGLRenderer: _webglRenderer2.default,
	  CanvasRenderer: _canvasRenderer2.default,
	  WebGLFilterManager: _webglFilterManager2.default,
	  CanvasFilterManager: _canvasFilterManager2.default,
	  DisplayObject: _displayObject2.default,
	  Container: _container2.default,
	  BaseTexture: _baseTexture2.default,
	  Texture: _texture2.default,
	  RenderTexture: _renderTexture2.default,
	  WebGLRenderTarget: _webglRenderTarget2.default,
	  CanvasRenderTarget: _canvasRenderTarget2.default,
	  Sprite: _sprite2.default,
	  Shaders: _shaders2.default,
	  Shader: _shader2.default,
	  Filter: _filter2.default,
	  PixelArrayImage: _pixelArrayImage2.default,
	
	  /**
	   * If WebGL is supported, this returns a WebGLRenderer and falls back to CanvasRenderer
	   * @param  {Number} width
	   * @param  {Number} height
	   * @param  {Object} [options = {} ]
	   * @return {(PhotoEditorSDK.Engine.WebGLRenderer|PhotoEditorSDK.Engine.CanvasRenderer)}
	   */
	  autoDetectRenderer: function autoDetectRenderer(width, height) {
	    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    if (_webglRenderer2.default.isSupported()) {
	      return new _webglRenderer2.default(width, height, options);
	    } else {
	      return new _canvasRenderer2.default(width, height, options);
	    }
	  }
	};
	
	exports.default = Engine;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, setImmediate) {var __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	var _typeof2 = __webpack_require__(32);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* eslint-disable */
	/*!
	 * Native Promise Only
	 * v0.8.0-a (c) Kyle Simpson
	 * MIT License: http://getify.mit-license.org
	 * @license
	 */
	/* istanbul ignore next */
	(function UMD(name, context, definition) {
	  // special form of UMD for polyfilling across evironments
	  context[name] = context[name] || definition();
	  if (typeof module != "undefined" && module.exports) {
	    module.exports = context[name];
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function $AMD$() {
	      return context[name];
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	})("Promise", typeof global != "undefined" ? global : undefined, function DEF() {
	  /*jshint validthis:true */
	  "use strict";
	
	  var builtInProp,
	      cycle,
	      scheduling_queue,
	      ToString = Object.prototype.toString,
	      timer = typeof setImmediate != "undefined" ? function timer(fn) {
	    return setImmediate(fn);
	  } : setTimeout;
	
	  // dammit, IE8.
	  try {
	    Object.defineProperty({}, "x", {});
	    builtInProp = function builtInProp(obj, name, val, config) {
	      return Object.defineProperty(obj, name, {
	        value: val,
	        writable: true,
	        configurable: config !== false
	      });
	    };
	  } catch (err) {
	    builtInProp = function builtInProp(obj, name, val) {
	      obj[name] = val;
	      return obj;
	    };
	  }
	
	  // Note: using a queue instead of array for efficiency
	  scheduling_queue = function Queue() {
	    var first, last, item;
	
	    function Item(fn, self) {
	      this.fn = fn;
	      this.self = self;
	      this.next = void 0;
	    }
	
	    return {
	      add: function add(fn, self) {
	        item = new Item(fn, self);
	        if (last) {
	          last.next = item;
	        } else {
	          first = item;
	        }
	        last = item;
	        item = void 0;
	      },
	      drain: function drain() {
	        var f = first;
	        first = last = cycle = void 0;
	
	        while (f) {
	          f.fn.call(f.self);
	          f = f.next;
	        }
	      }
	    };
	  }();
	
	  function schedule(fn, self) {
	    scheduling_queue.add(fn, self);
	    if (!cycle) {
	      cycle = timer(scheduling_queue.drain);
	    }
	  }
	
	  // promise duck typing
	  function isThenable(o) {
	    var _then,
	        o_type = typeof o === "undefined" ? "undefined" : (0, _typeof3.default)(o);
	
	    if (o != null && (o_type == "object" || o_type == "function")) {
	      _then = o.then;
	    }
	    return typeof _then == "function" ? _then : false;
	  }
	
	  function notify() {
	    for (var i = 0; i < this.chain.length; i++) {
	      notifyIsolated(this, this.state === 1 ? this.chain[i].success : this.chain[i].failure, this.chain[i]);
	    }
	    this.chain.length = 0;
	  }
	
	  // NOTE: This is a separate function to isolate
	  // the `try..catch` so that other code can be
	  // optimized better
	  function notifyIsolated(self, cb, chain) {
	    var ret, _then;
	    try {
	      if (cb === false) {
	        chain.reject(self.msg);
	      } else {
	        if (cb === true) {
	          ret = self.msg;
	        } else {
	          ret = cb.call(void 0, self.msg);
	        }
	
	        if (ret === chain.promise) {
	          chain.reject(TypeError("Promise-chain cycle"));
	        } else if (_then = isThenable(ret)) {
	          _then.call(ret, chain.resolve, chain.reject);
	        } else {
	          chain.resolve(ret);
	        }
	      }
	    } catch (err) {
	      chain.reject(err);
	    }
	  }
	
	  function resolve(msg) {
	    var _then,
	        self = this;
	
	    // already triggered?
	    if (self.triggered) {
	      return;
	    }
	
	    self.triggered = true;
	
	    // unwrap
	    if (self.def) {
	      self = self.def;
	    }
	
	    try {
	      if (_then = isThenable(msg)) {
	        schedule(function () {
	          var def_wrapper = new MakeDefWrapper(self);
	          try {
	            _then.call(msg, function $resolve$() {
	              resolve.apply(def_wrapper, arguments);
	            }, function $reject$() {
	              reject.apply(def_wrapper, arguments);
	            });
	          } catch (err) {
	            reject.call(def_wrapper, err);
	          }
	        });
	      } else {
	        self.msg = msg;
	        self.state = 1;
	        if (self.chain.length > 0) {
	          schedule(notify, self);
	        }
	      }
	    } catch (err) {
	      reject.call(new MakeDefWrapper(self), err);
	    }
	  }
	
	  function reject(msg) {
	    var self = this;
	
	    // already triggered?
	    if (self.triggered) {
	      return;
	    }
	
	    self.triggered = true;
	
	    // unwrap
	    if (self.def) {
	      self = self.def;
	    }
	
	    self.msg = msg;
	    self.state = 2;
	    if (self.chain.length > 0) {
	      schedule(notify, self);
	    }
	  }
	
	  function iteratePromises(Constructor, arr, resolver, rejecter) {
	    for (var idx = 0; idx < arr.length; idx++) {
	      (function IIFE(idx) {
	        Constructor.resolve(arr[idx]).then(function $resolver$(msg) {
	          resolver(idx, msg);
	        }, rejecter);
	      })(idx);
	    }
	  }
	
	  function MakeDefWrapper(self) {
	    this.def = self;
	    this.triggered = false;
	  }
	
	  function MakeDef(self) {
	    this.promise = self;
	    this.state = 0;
	    this.triggered = false;
	    this.chain = [];
	    this.msg = void 0;
	  }
	
	  function Promise(executor) {
	    if (typeof executor != "function") {
	      throw TypeError("Not a function");
	    }
	
	    if (this.__NPO__ !== 0) {
	      throw TypeError("Not a promise");
	    }
	
	    // instance shadowing the inherited "brand"
	    // to signal an already "initialized" promise
	    this.__NPO__ = 1;
	
	    var def = new MakeDef(this);
	
	    this["then"] = function then(success, failure) {
	      var o = {
	        success: typeof success == "function" ? success : true,
	        failure: typeof failure == "function" ? failure : false
	      };
	      // Note: `then(..)` itself can be borrowed to be used against
	      // a different promise constructor for making the chained promise,
	      // by substituting a different `this` binding.
	      o.promise = new this.constructor(function extractChain(resolve, reject) {
	        if (typeof resolve != "function" || typeof reject != "function") {
	          throw TypeError("Not a function");
	        }
	
	        o.resolve = resolve;
	        o.reject = reject;
	      });
	      def.chain.push(o);
	
	      if (def.state !== 0) {
	        schedule(notify, def);
	      }
	
	      return o.promise;
	    };
	    this["catch"] = function $catch$(failure) {
	      return this.then(void 0, failure);
	    };
	
	    try {
	      executor.call(void 0, function publicResolve(msg) {
	        resolve.call(def, msg);
	      }, function publicReject(msg) {
	        reject.call(def, msg);
	      });
	    } catch (err) {
	      reject.call(def, err);
	    }
	  }
	
	  var PromisePrototype = builtInProp({}, "constructor", Promise,
	  /*configurable=*/false);
	
	  // Note: Android 4 cannot use `Object.defineProperty(..)` here
	  Promise.prototype = PromisePrototype;
	
	  // built-in "brand" to signal an "uninitialized" promise
	  builtInProp(PromisePrototype, "__NPO__", 0,
	  /*configurable=*/false);
	
	  builtInProp(Promise, "resolve", function Promise$resolve(msg) {
	    var Constructor = this;
	
	    // spec mandated checks
	    // note: best "isPromise" check that's practical for now
	    if (msg && (typeof msg === "undefined" ? "undefined" : (0, _typeof3.default)(msg)) == "object" && msg.__NPO__ === 1) {
	      return msg;
	    }
	
	    return new Constructor(function executor(resolve, reject) {
	      if (typeof resolve != "function" || typeof reject != "function") {
	        throw TypeError("Not a function");
	      }
	
	      resolve(msg);
	    });
	  });
	
	  builtInProp(Promise, "reject", function Promise$reject(msg) {
	    return new this(function executor(resolve, reject) {
	      if (typeof resolve != "function" || typeof reject != "function") {
	        throw TypeError("Not a function");
	      }
	
	      reject(msg);
	    });
	  });
	
	  builtInProp(Promise, "all", function Promise$all(arr) {
	    var Constructor = this;
	
	    // spec mandated checks
	    if (ToString.call(arr) != "[object Array]") {
	      return Constructor.reject(TypeError("Not an array"));
	    }
	    if (arr.length === 0) {
	      return Constructor.resolve([]);
	    }
	
	    return new Constructor(function executor(resolve, reject) {
	      if (typeof resolve != "function" || typeof reject != "function") {
	        throw TypeError("Not a function");
	      }
	
	      var len = arr.length,
	          msgs = Array(len),
	          count = 0;
	
	      iteratePromises(Constructor, arr, function resolver(idx, msg) {
	        msgs[idx] = msg;
	        if (++count === len) {
	          resolve(msgs);
	        }
	      }, reject);
	    });
	  });
	
	  builtInProp(Promise, "race", function Promise$race(arr) {
	    var Constructor = this;
	
	    // spec mandated checks
	    if (ToString.call(arr) != "[object Array]") {
	      return Constructor.reject(TypeError("Not an array"));
	    }
	
	    return new Constructor(function executor(resolve, reject) {
	      if (typeof resolve != "function" || typeof reject != "function") {
	        throw TypeError("Not a function");
	      }
	
	      iteratePromises(Constructor, arr, function resolver(idx, msg) {
	        resolve(msg);
	      }, reject);
	    });
	  });
	
	  return Promise;
	});
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(61).setImmediate))

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _log = __webpack_require__(24);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _configurable = __webpack_require__(31);
	
	var _configurable2 = _interopRequireDefault(_configurable);
	
	var _performanceTest = __webpack_require__(75);
	
	var _performanceTest2 = _interopRequireDefault(_performanceTest);
	
	var _extend = __webpack_require__(72);
	
	var _extend2 = _interopRequireDefault(_extend);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Base class for Operations
	 * @class
	 * @alias Operation
	 * @extends PhotoEditorSDK.Configurable
	 * @memberof PhotoEditorSDK
	 */
	
	var Operation = function (_Configurable) {
	  (0, _inherits3.default)(Operation, _Configurable);
	
	  /**
	   * Creates an Operation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function Operation(sdk) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    (0, _classCallCheck3.default)(this, Operation);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Configurable.call(this, options, {
	      enabled: { type: 'boolean', default: true }
	    }));
	
	    _this._sdk = sdk;
	    _this._dirtiness = {};
	
	    _this._sprite = new _engine2.default.Sprite();
	    _this._container = new _engine2.default.Container();
	    _this._container.addChild(_this._sprite);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when options have been changed. Sets this operation to dirty.
	   * @private
	   */
	
	
	  Operation.prototype._onOptionsChange = function _onOptionsChange() {
	    this.setDirty(true);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Creates and returns a render texture
	   * @param  {PhotoEditorSDK} sdk
	   * @return {PhotoEditorSDK.Engine.RenderTexture}
	   * @protected
	   */
	
	
	  Operation.prototype._getRenderTexture = function _getRenderTexture(sdk) {
	    if (!this._renderTexture) {
	      this._renderTexture = sdk.createRenderTexture();
	    }
	    return this._renderTexture;
	  };
	
	  /**
	   * Applies this operation
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   * @abstract
	   */
	
	
	  Operation.prototype.render = function render(sdk) {
	    var _this2 = this;
	
	    if (!this.getEnabled()) {
	      return _promise2.default.resolve();
	    }
	
	    var renderer = sdk.getRenderer();
	    var promise = void 0;
	    var perf = void 0;
	    if (_log2.default.canLog('info')) {
	      perf = new _performanceTest2.default(this.constructor.name, 'Rendering');
	    }
	
	    // Handle caching
	    if (this.isDirtyForRenderer(renderer)) {
	      promise = this._render(sdk).then(function () {
	        _this2.setDirtyForRenderer(false, renderer);
	      });
	    } else {
	      _log2.default.info(this.constructor.name, 'Rendering from cache');
	      promise = this.renderCached(sdk);
	    }
	
	    return promise.then(function () {
	      if (perf) perf.stop();
	    });
	  };
	
	  /**
	   * Renders the cached version of this operation
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   */
	
	
	  Operation.prototype.renderCached = function renderCached(sdk) {
	    var outputSprite = sdk.getSprite();
	    outputSprite.setTexture(this._getRenderTexture(sdk));
	    return _promise2.default.resolve();
	  };
	
	  /**
	   * Renders this operation
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   * @private
	   */
	
	
	  Operation.prototype._render = function _render(sdk) {
	    var renderFn = void 0;
	    if (sdk.getRenderer() instanceof _engine2.default.WebGLRenderer) {
	      /* istanbul ignore next */
	      renderFn = this._renderWebGL.bind(this);
	    } else {
	      renderFn = this._renderCanvas.bind(this);
	    }
	
	    return renderFn(sdk);
	  };
	
	  /**
	   * Applies this operation using WebGL
	   * @param  {PhotoEditorSDK} sdk
	   * @return {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   * @protected
	   * @abstract
	   */
	
	
	  Operation.prototype._renderWebGL = function _renderWebGL(sdk) {
	    throw new Error('Operation#_renderWebGL is abstract and not implemented in inherited class.');
	  };
	
	  /**
	   * Applies this operation using Canvas2D
	   * @param  {PhotoEditorSDK} sdk
	   * @return {PhotoEditorSDK.Engine.CanvasRenderer} renderer
	   * @protected
	   * @abstract
	   */
	
	
	  Operation.prototype._renderCanvas = function _renderCanvas(sdk) {
	    throw new Error('Operation#_renderCanvas is abstract and not implemented in inherited class.');
	  };
	
	  /**
	   * Returns the dimensions that an image with the given `dimensions`
	   * would have after this operation has been applied
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Operation.prototype.getNewDimensions = function getNewDimensions(dimensions) {
	    return dimensions.clone();
	  };
	
	  /**
	   * Resets this operation
	   */
	
	
	  Operation.prototype.reset = function reset() {
	    this._dirty = true;
	    this._glslPrograms = {};
	  };
	
	  // -------------------------------------------------------------------------- DIRTINESS
	
	  /**
	   * Checks if this operation is dirty for the given renderer
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer}  renderer
	   * @return {Boolean}
	   */
	
	
	  Operation.prototype.isDirtyForRenderer = function isDirtyForRenderer(renderer) {
	    if (!(renderer.id in this._dirtiness)) {
	      this._dirtiness[renderer.id] = true;
	    }
	    return this._dirtiness[renderer.id];
	  };
	
	  /**
	   * Sets the dirtiness for the given renderer
	   * @param {Boolean} dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   */
	
	
	  Operation.prototype.setDirtyForRenderer = function setDirtyForRenderer(dirty, renderer) {
	    this._dirtiness[renderer.id] = dirty;
	  };
	
	  /**
	   * Sets the dirtiness for all renderers
	   * @param {Boolean} dirty
	   */
	
	
	  Operation.prototype.setDirty = function setDirty(dirty) {
	    for (var rendererId in this._dirtiness) {
	      this.setDirtyForRenderer(dirty, { id: rendererId });
	    }
	  };
	
	  /**
	   * Disposes the RenderTexture
	   */
	
	
	  Operation.prototype.disposeRenderTexture = function disposeRenderTexture() {
	    this._renderTexture = null;
	  };
	
	  /**
	   * Disposes this operation
	   */
	
	
	  Operation.prototype.dispose = function dispose() {};
	
	  return Operation;
	}(_configurable2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 */
	/* jshint unused:false */
	/* jshint -W083 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	Operation.identifier = null;
	
	/**
	 * To create an {@link PhotoEditorSDK.Operation} class of your own, call this
	 * method and provide instance properties and functions.
	 * @function
	 */
	
	Operation.extend = _extend2.default;
	
	exports.default = Operation;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _configurable = __webpack_require__(31);
	
	var _configurable2 = _interopRequireDefault(_configurable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Base class for filter primitives.
	 * @class
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var Primitive = function (_Configurable) {
	  (0, _inherits3.default)(Primitive, _Configurable);
	
	  function Primitive() {
	    (0, _classCallCheck3.default)(this, Primitive);
	    return (0, _possibleConstructorReturn3.default)(this, _Configurable.apply(this, arguments));
	  }
	
	  /**
	   * Gets called before this primitive's filter is being applied
	   */
	
	  Primitive.prototype.update = function update() {};
	
	  /**
	   * Renders the primitive
	   * @param  {Renderer} renderer
	   * @param  {WebGLTexture} inputTexture
	   * @param  {WebGLFramebuffer} outputFBO
	   * @param  {WebGLTexture} outputTexture
	   * @return {Promise}
	   */
	
	
	  Primitive.prototype.render = function render(renderer, inputTexture, outputFBO, outputTexture) {
	    if (renderer.identifier === 'webgl') {
	      this.renderWebGL(renderer, inputTexture, outputFBO, outputTexture);
	    } else {
	      this.renderCanvas(renderer);
	    }
	  };
	
	  /**
	   * Renders the primitive (WebGL)
	   * @param  {CanvasRenderer} renderer
	   * @param  {WebGLTexture} inputTexture
	   * @param  {WebGLFramebuffer} outputFBO
	   * @param  {WebGLTexture} outputTexture
	   */
	  /* istanbul ignore next */
	
	
	  Primitive.prototype.renderWebGL = function renderWebGL(renderer, inputTexture, outputFBO, outputTexture) {
	    /* istanbul ignore next */
	    throw new Error('Primitive#renderWebGL is abstract and not implemented in inherited class.');
	  };
	
	  /**
	   * Renders the primitive (Canvas2D)
	   * @param  {CanvasRenderer} renderer
	   */
	
	
	  Primitive.prototype.renderCanvas = function renderCanvas(renderer) {
	    /* istanbul ignore next */
	    throw new Error('Primitive#renderCanvas is abstract and not implemented in inherited class.');
	  };
	
	  /**
	   * Returns this primitive's filter
	   * @return {PhotoEditorSDK.Engine.Filter}
	   */
	
	
	  Primitive.prototype.getFilter = function getFilter() {
	    return this._filter;
	  };
	
	  /**
	   * Cleans up this instance
	   */
	
	
	  Primitive.prototype.dispose = function dispose() {
	    if (this._filter) {
	      this._filter.dispose();
	      this._filter = null;
	    }
	  };
	
	  return Primitive;
	}(_configurable2.default); /* jshint unused: false */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = Primitive;

/***/ },
/* 11 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(82);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * Represents a color
	 * @class
	 * @memberof PhotoEditorSDK
	 */
	
	var Color = function () {
	  /**
	   * Creates a color
	   * @param  {Number} r
	   * @param  {Number} g
	   * @param  {Number} b
	   * @param  {Number} [a = 1]
	   */
	
	  function Color(r, g, b) {
	    var a = arguments.length <= 3 || arguments[3] === undefined ? 1.0 : arguments[3];
	    (0, _classCallCheck3.default)(this, Color);
	
	    this.r = r;
	    this.g = g;
	    this.b = b;
	    this.a = a;
	  }
	
	  /**
	   * Returns an rgba() representation of this color
	   * @return {String}
	   */
	
	
	  Color.prototype.toRGBA = function toRGBA() {
	    var colors = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255), this.a];
	    return 'rgba(' + colors.join(',') + ')';
	  };
	
	  /**
	   * Returns a hex representation of this color
	   * @return {String}
	   */
	
	
	  Color.prototype.toHex = function toHex() {
	    var components = [this._componentToHex(Math.round(this.r * 255)), this._componentToHex(Math.round(this.g * 255)), this._componentToHex(Math.round(this.b * 255))];
	    return '#' + components.join('');
	  };
	
	  /**
	   * Returns an array with 4 values (0...1)
	   * @return {Number[]}
	   */
	
	
	  Color.prototype.toGLColor = function toGLColor() {
	    return [this.r, this.g, this.b, this.a];
	  };
	
	  /**
	   * Returns an array with 3 values (0...1)
	   * @return {Number[]}
	   */
	
	
	  Color.prototype.toRGBGLColor = function toRGBGLColor() {
	    return [this.r, this.g, this.b];
	  };
	
	  /**
	   * Converts the RGB value to HSV
	   * @return {Number[]}
	   */
	
	
	  Color.prototype.toHSV = function toHSV() {
	    var max = Math.max(this.r, this.g, this.b);
	    var min = Math.min(this.r, this.g, this.b);
	    var h = void 0;
	    var s = void 0;
	    var v = max;
	    var d = max - min;
	    s = max === 0 ? 0 : d / max;
	
	    if (max === min) {
	      h = 0; // achromatic
	    } else {
	        switch (max) {
	          case this.r:
	            h = (this.g - this.b) / d;
	            if (this.g < this.b) {
	              h += 6;
	            }
	            break;
	          case this.g:
	            h = (this.b - this.r) / d + 2;
	            break;
	          case this.b:
	            h = (this.r - this.g) / d + 4;
	            break;
	        }
	        h /= 6;
	      }
	
	    return [h, s, v];
	  };
	
	  /**
	   * Creates an RGBA color from the given HSV and alpha values
	   * @param {Number} h
	   * @param {Number} s
	   * @param {Number} v
	   * @param {Number} [a = 1]
	   */
	
	
	  Color.fromHSV = function fromHSV(h, s, v) {
	    var a = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];
	    var _ref = [];
	    var r = _ref[0];
	    var g = _ref[1];
	    var b = _ref[2];
	
	
	    var i = Math.floor(h * 6);
	    var f = h * 6 - i;
	    var p = v * (1 - s);
	    var q = v * (1 - f * s);
	    var t = v * (1 - (1 - f) * s);
	
	    switch (i % 6) {
	      case 0:
	        r = v;
	        g = t;
	        b = p;
	        break;
	      case 1:
	        r = q;
	        g = v;
	        b = p;
	        break;
	      case 2:
	        r = p;
	        g = v;
	        b = t;
	        break;
	      case 3:
	        r = p;
	        g = q;
	        b = v;
	        break;
	      case 4:
	        r = t;
	        g = p;
	        b = v;
	        break;
	      case 5:
	        r = v;
	        g = p;
	        b = q;
	        break;
	    }
	
	    var color = new Color();
	    color.r = r;
	    color.g = g;
	    color.b = b;
	    color.a = a;
	    return color;
	  };
	
	  /**
	   * Returns a clone of the current color
	   * @return {PhotoEditorSDK.Color}
	   */
	
	
	  Color.prototype.clone = function clone() {
	    return new Color(this.r, this.g, this.b, this.a);
	  };
	
	  /**
	   * Checks if this color equals the given one
	   * @param  {PhotoEditorSDK.Color} color
	   * @return {Boolean}
	   */
	
	
	  Color.prototype.equals = function equals(color) {
	    return this.r === color.r && this.g === color.g && this.b === color.b && this.a === color.a;
	  };
	
	  /**
	   * Returns the given number as hex
	   * @param  {Number} component
	   * @return {String}
	   * @private
	   */
	
	
	  Color.prototype._componentToHex = function _componentToHex(component) {
	    var hex = component.toString(16);
	    return hex.length === 1 ? '0' + hex : hex;
	  };
	
	  /**
	   * Returns the string representation of this color
	   * @returns {String}
	   */
	
	
	  Color.prototype.toString = function toString() {
	    return 'Color(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.a + ')';
	  };
	
	  /**
	   * @type {PhotoEditorSDK.Color}
	   */
	
	
	  (0, _createClass3.default)(Color, null, [{
	    key: 'TRANSPARENT',
	    get: function get() {
	      return new Color(0, 0, 0, 0);
	    }
	
	    /**
	     * @type {PhotoEditorSDK.Color}
	     */
	
	  }, {
	    key: 'WHITE',
	    get: function get() {
	      return new Color(1, 1, 1, 1);
	    }
	
	    /**
	     * @type {PhotoEditorSDK.Color}
	     */
	
	  }, {
	    key: 'BLACK',
	    get: function get() {
	      return new Color(0, 0, 0, 1);
	    }
	  }]);
	  return Color;
	}();
	
	exports.default = Color;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(33)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 14 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(25)
	  , IE8_DOM_DEFINE = __webpack_require__(86)
	  , toPrimitive    = __webpack_require__(58)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(13) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(183)
	  , defined = __webpack_require__(48);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_17__;

/***/ },
/* 18 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.3.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(15)
	  , createDesc = __webpack_require__(35);
	module.exports = __webpack_require__(13) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(56)('wks')
	  , uid        = __webpack_require__(36)
	  , Symbol     = __webpack_require__(11).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _log = __webpack_require__(24);
	
	var _log2 = _interopRequireDefault(_log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DEFAULT_MAX_LISTENERS = 12;
	
	/**
	 * Receives and emits events
	 * @class
	 * @memberof PhotoEditorSDK
	 * @ignore
	 */
	/**
	 * EventEmitter (ES6) from:
	 * https://gist.github.com/bloodyowl/41b1de3388c626796eca
	 */
	
	var EventEmitter = function () {
	  /**
	   * Creates an EventEmitter
	   */
	
	  function EventEmitter() {
	    (0, _classCallCheck3.default)(this, EventEmitter);
	
	    this._maxListeners = DEFAULT_MAX_LISTENERS;
	    this._events = {};
	    this._pipeDestinations = [];
	  }
	
	  /**
	   * Pipes all events to the given EventEmitter
	   * @param  {EventEmitter} destination
	   */
	
	
	  EventEmitter.prototype.pipeEvents = function pipeEvents(destination) {
	    this._pipeDestinations.push(destination);
	  };
	
	  /**
	   * Stops piping events to the given EventEmitter
	   * @param  {EventEmitter} destination
	   */
	
	
	  EventEmitter.prototype.unpipeEvents = function unpipeEvents(destination) {
	    var i = this._pipeDestinations.indexOf(destination);
	    if (i === -1) {
	      return;
	    }
	    this._pipeDestinations.splice(i, 1);
	  };
	
	  /**
	   * Adds the given listener to the given type of events
	   * @param  {String} type
	   * @param  {Function} listener
	   */
	
	
	  EventEmitter.prototype.on = function on(type, listener) {
	    if (typeof listener !== 'function') {
	      throw new TypeError();
	    }
	
	    var listeners = this._events[type] || (this._events[type] = []);
	    if (listeners.indexOf(listener) !== -1) {
	      return this;
	    }
	    listeners.push(listener);
	
	    if (listeners.length > this._maxListeners) {
	      _log2.default.warn('EventEmitter', 'Possible memory leak detected, added ' + listeners.length + ' `' + type + '` listeners (current limit is ' + this._maxListeners + ')');
	      console.trace();
	    }
	    return this;
	  };
	
	  /**
	   * Adds the given listener to the given type of events and removes it
	   * once it has been triggered
	   * @param  {String} type
	   * @param  {Function} listener
	   */
	
	
	  EventEmitter.prototype.once = function once(type, listener) {
	    var eventsInstance = this;
	    function onceCallback() {
	      eventsInstance.off(type, onceCallback);
	      listener.apply(null, arguments);
	    }
	    return this.on(type, onceCallback);
	  };
	
	  /**
	   * Removes the given listener from the given type of events
	   * @param  {String} type
	   * @param  {*} ...args
	   */
	
	
	  EventEmitter.prototype.off = function off(type) {
	    if (arguments.length - 1 === 0) {
	      this._events[type] = null;
	      return this;
	    }
	
	    var listener = arguments.length <= 1 ? undefined : arguments[1];
	    if (typeof listener !== 'function') {
	      throw new TypeError();
	    }
	
	    var listeners = this._events[type];
	    if (!listeners || !listeners.length) {
	      return this;
	    }
	
	    var indexOfListener = listeners.indexOf(listener);
	    if (indexOfListener === -1) {
	      return this;
	    }
	
	    listeners.splice(indexOfListener, 1);
	    return this;
	  };
	
	  /**
	   * Emits an event with the given type and arguments
	   * @param  {String} type
	   * @param  {*} ...args
	   */
	
	
	  EventEmitter.prototype.emit = function emit(type) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    this._pipeDestinations.forEach(function (dest) {
	      dest.emit.apply(dest, [type].concat(args));
	    });
	
	    var listeners = this._events[type];
	    if (!listeners || !listeners.length) {
	      return false;
	    }
	
	    listeners.forEach(function (fn) {
	      return fn.apply(null, args);
	    });
	
	    return true;
	  };
	
	  /**
	   * Sets the maximum amonut of listeners before a warning is printed
	   * @param {Number} newMaxListeners
	   */
	
	
	  EventEmitter.prototype.setMaxListeners = function setMaxListeners(newMaxListeners) {
	    if (parseInt(newMaxListeners, 10) !== newMaxListeners) {
	      throw new TypeError();
	    }
	
	    this._maxListeners = newMaxListeners;
	  };
	
	  return EventEmitter;
	}();
	
	exports.default = EventEmitter;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(32);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _base = __webpack_require__(39);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Provides utility functions for internal use
	 * @class
	 * @memberof PhotoEditorSDK
	 * @private
	 */
	
	var Utils = function () {
	  function Utils() {
	    (0, _classCallCheck3.default)(this, Utils);
	  }
	
	  /**
	   * Checks if the given object is an Array
	   * @param  {Object}  object
	   * @return {Boolean}
	   */
	
	  Utils.isArray = function isArray(object) {
	    return Object.prototype.toString.call(object) === '[object Array]';
	  };
	
	  /**
	   * Returns the given object's values as an array
	   * @param {Object} object
	   * @returns {Array<*>}
	   */
	
	
	  Utils.values = function values(object) {
	    var values = [];
	    for (var key in object) {
	      values.push(object[key]);
	    }
	    return values;
	  };
	
	  /**
	   * Checks if the given object is a DOM element
	   * @param  {Object}  o
	   * @return {Boolean}
	   */
	  /* istanbul ignore next */
	
	
	  Utils.isDOMElement = function isDOMElement(o) {
	    return (typeof HTMLElement === 'undefined' ? 'undefined' : (0, _typeof3.default)(HTMLElement)) === 'object' ? o instanceof HTMLElement : o && (typeof o === 'undefined' ? 'undefined' : (0, _typeof3.default)(o)) === 'object' && o !== null && o.nodeType === 1 && typeof o.nodeName === 'string';
	  };
	
	  /**
	   * Checks if th given event is a touch event
	   * @param  {Event}  e
	   * @return {Boolean}
	   */
	
	
	  Utils.isTouchEvent = function isTouchEvent(e) {
	    return e.type.indexOf('touch') !== -1;
	  };
	
	  /**
	   * Resizes the given vector to fit inside the given max size while maintaining
	   * the aspect ratio
	   * @param  {Vector2} vector
	   * @param  {Vector2} max
	   * @return {Vector2}
	   */
	
	
	  Utils.resizeVectorToFit = function resizeVectorToFit(vector, max) {
	    var scale = Math.min(max.x / vector.x, max.y / vector.y);
	    var newSize = vector.clone().multiply(scale);
	    return newSize;
	  };
	
	  /**
	   * Assigns own enumerable properties of source object(s) to the destination
	   * object for all destination properties that resolve to undefined. Once a
	   * property is set, additional values of the same property are ignored.
	   * @param  {Object} object
	   * @param  {Object} ...sources
	   * @return {Object}
	   */
	
	
	  Utils.defaults = function defaults(object) {
	    // Shallow clone
	    var newObject = {};
	    for (var key in object) {
	      newObject[key] = object[key];
	    }
	
	    // Clone sources
	
	    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      sources[_key - 1] = arguments[_key];
	    }
	
	    for (var i = 0; i < sources.length; i++) {
	      var source = sources[i];
	      for (var _key2 in source) {
	        if (typeof newObject[_key2] === 'undefined') {
	          newObject[_key2] = source[_key2];
	        }
	      }
	    }
	
	    return newObject;
	  };
	
	  /**
	   * Assigns own enumerable properties of source object(s) to the destination
	   * object. Subsequent sources overwrite property assignments of previous
	   * sources.
	   * @param {Object} object
	   * @param {Object} ...sources
	   * @return {Object}
	   */
	
	
	  Utils.extend = function extend(object) {
	    // Shallow clone
	    var newObject = {};
	    for (var key in object) {
	      newObject[key] = object[key];
	    }
	
	    // Extend sources
	
	    for (var _len2 = arguments.length, sources = Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
	      sources[_key3 - 1] = arguments[_key3];
	    }
	
	    for (var i = 0; i < sources.length; i++) {
	      var source = sources[i];
	      for (var _key4 in source) {
	        newObject[_key4] = source[_key4];
	      }
	    }
	
	    return newObject;
	  };
	
	  /**
	   * Creates a shallow clone of the given object
	   * @param {Object} object
	   * @returns {Object}
	   */
	
	
	  Utils.clone = function clone(object) {
	    return this.extend({}, object);
	  };
	
	  /**
	   * Creates a Blob URI from the given Data URI
	   * @param {String} data
	   */
	
	
	  Utils.createBlobURIFromDataURI = function createBlobURIFromDataURI(data) {
	    if (!window.Blob || !window.URL || !ArrayBuffer || !Uint8Array) {
	      return data;
	    }
	
	    var rawData = _base2.default.decode(data.split(',')[1]);
	    var mimeString = data.split(',')[0].split(':')[1].split(';')[0];
	
	    // write the bytes of the string to an ArrayBuffer
	    var arrayBuffer = new ArrayBuffer(rawData.length);
	    var intArray = new Uint8Array(arrayBuffer);
	    for (var i = 0; i < rawData.length; i++) {
	      intArray[i] = rawData[i];
	    }
	
	    // write the ArrayBuffer to a blob, and you're done
	    var blob = new window.Blob([arrayBuffer], {
	      type: mimeString
	    });
	    return window.URL.createObjectURL(blob);
	  };
	
	  /**
	   * Vendor proxy for requestAnimationFrame
	   * @param  {Function} cb
	   * @return {Number}
	   */
	
	
	  Utils.requestAnimationFrame = function requestAnimationFrame(cb) {
	    var fallback = function fallback(callback) {
	      setTimeout(callback, 1000 / 60);
	    };
	
	    if (typeof window === 'undefined') {
	      return fallback(cb);
	    }
	
	    return (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || fallback)(cb);
	  };
	
	  /**
	   * Generates a UUID
	   * @return {String}
	   */
	
	
	  Utils.getUUID = function getUUID() {
	    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	      var r = Math.random() * 16 | 0;
	      var v = c === 'x' ? r : r & 0x3 | 0x8;
	      return v.toString(16);
	    });
	  };
	
	  /**
	   * Flattens the given multidimensional array
	   * @return {Array}
	   */
	
	
	  Utils.flatten = function flatten(array) {
	    return array.reduce(function (flat, toFlatten) {
	      return flat.concat(Array.isArray(toFlatten) ? Utils.flatten(toFlatten) : toFlatten);
	    }, []);
	  };
	
	  /**
	   * Creates a canvas DOM element (browser) or a node-canvas canvas (node)
	   * @return {Canvas}
	   */
	
	
	  Utils.createCanvas = function createCanvas() {
	    if (typeof window === 'undefined') {
	      var NodeCanvas = __webpack_require__(17);
	      return new NodeCanvas();
	    } else {
	      return document.createElement('canvas');
	    }
	  };
	
	  /**
	   * Checks if the given dimensions are POT
	   * @param  {PhotoEditorSDK.Math.Vector2}  dimensions
	   * @return {Boolean}
	   */
	
	
	  Utils.isPowerOfTwo = function isPowerOfTwo(dimensions) {
	    return (dimensions.x & dimensions.x - 1) === 0 && (dimensions.y & dimensions.y - 1) === 0;
	  };
	
	  /**
	   * Returns the next lowest power of two of the given number
	   * @param  {Number} x
	   * @return {Number}
	   */
	
	
	  Utils.nextLowestPOT = function nextLowestPOT(x) {
	    for (var i = 1; i < 32; i <<= 1) {
	      x = x | x >> i;
	    }
	    return x - (x >> 1);
	  };
	
	  /**
	   * Returns the next highest power of two of the given number
	   * @param  {Number} x
	   * @return {Number}
	   */
	
	
	  Utils.nextHighestPOT = function nextHighestPOT(x) {
	    x--;
	    for (var i = 1; i < 32; i <<= 1) {
	      x = x | x >> i;
	    }
	    return x + 1;
	  };
	
	  /**
	   * Moves the array item at `oldIndex` to `newIndex`
	   * @param  {Array} arr
	   * @param  {Number} oldIndex
	   * @param  {Number} newIndex
	   */
	
	
	  Utils.moveArrayItem = function moveArrayItem(arr, oldIndex, newIndex) {
	    if (newIndex >= arr.length) {
	      var k = newIndex - arr.length;
	      while (k-- + 1) {
	        arr.push(undefined);
	      }
	    }
	    arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0]);
	  };
	
	  return Utils;
	}(); /* global HTMLElement */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = Utils;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * Represents a 2-dimensional vector while providing math functions to
	 * modify / clone the vector. Fully chainable.
	 * @class
	 * @memberof PhotoEditorSDK.Math
	 */
	
	var Vector2 = function () {
	  /**
	   * Creates a Vector2
	   * @param  {Number} x
	   * @param  {Number} y
	   */
	
	  function Vector2(x, y) {
	    (0, _classCallCheck3.default)(this, Vector2);
	
	    this.x = x;
	    this.y = y;
	    if (typeof this.x === 'undefined') {
	      this.x = 0;
	    }
	    if (typeof this.y === 'undefined') {
	      this.y = 0;
	    }
	  }
	
	  /**
	   * Sets the given values
	   * @param {Number} x
	   * @param {Number} y
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.set = function set(x, y) {
	    this.x = x;
	    this.y = y;
	    return this;
	  };
	
	  /**
	   * Creates a clone of this vector
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.clone = function clone() {
	    return new Vector2(this.x, this.y);
	  };
	
	  /**
	   * Copies the values of the given vector
	   * @param  {PhotoEditorSDK.Math.Vector2} other
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.copy = function copy(other) {
	    this.x = other.x;
	    this.y = other.y;
	    return this;
	  };
	
	  /**
	   * Clamps this vector with the given Vector2 / Number
	   * @param  {(Number|PhotoEditorSDK.Math.Vector2)} minimum
	   * @param  {(Number|PhotoEditorSDK.Math.Vector2)} maximum
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.clamp = function clamp(minimum, maximum) {
	    var minimumSet = minimum !== null && typeof minimum !== 'undefined';
	    var maximumSet = maximum !== null && typeof maximum !== 'undefined';
	
	    /* istanbul ignore else  */
	    if (!(minimum instanceof Vector2) && minimumSet) {
	      minimum = new Vector2(minimum, minimum);
	    }
	    /* istanbul ignore else  */
	    if (!(maximum instanceof Vector2) && maximumSet) {
	      maximum = new Vector2(maximum, maximum);
	    }
	
	    if (minimumSet) {
	      this.x = Math.max(minimum.x, this.x);
	      this.y = Math.max(minimum.y, this.y);
	    }
	
	    if (maximumSet) {
	      this.x = Math.min(maximum.x, this.x);
	      this.y = Math.min(maximum.y, this.y);
	    }
	    return this;
	  };
	
	  /**
	   * Divides this vector by the given Vector2 / Number
	   * @param  {(Number|PhotoEditorSDK.Math.Vector2)} divisor
	   * @param  {Number} [y]
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.divide = function divide(divisor, y) {
	    if (divisor instanceof Vector2) {
	      this.x /= divisor.x;
	      this.y /= divisor.y;
	    } else {
	      this.x /= divisor;
	      this.y /= typeof y === 'undefined' ? divisor : y;
	    }
	    return this;
	  };
	
	  /**
	   * Subtracts the given Vector2 / Number from this vector
	   * @param  {(Number|PhotoEditorSDK.Math.Vector2)} subtrahend
	   * @param  {Number} [y]
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.subtract = function subtract(subtrahend, y) {
	    if (subtrahend instanceof Vector2) {
	      this.x -= subtrahend.x;
	      this.y -= subtrahend.y;
	    } else {
	      this.x -= subtrahend;
	      this.y -= typeof y === 'undefined' ? subtrahend : y;
	    }
	    return this;
	  };
	
	  /**
	   * Multiplies the given Vector2 / Number with this vector
	   * @param  {(Number|PhotoEditorSDK.Math.Vector2)} subtrahend
	   * @param  {Number} [y]
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.multiply = function multiply(factor, y) {
	    if (factor instanceof Vector2) {
	      this.x *= factor.x;
	      this.y *= factor.y;
	    } else {
	      this.x *= factor;
	      this.y *= typeof y === 'undefined' ? factor : y;
	    }
	    return this;
	  };
	
	  /**
	   * Adds the given Vector2 / Numbers to this vector
	   * @param {(Number|PhotoEditorSDK.Math.Vector2)} addend
	   * @param {Number} [y]
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.add = function add(addend, y) {
	    if (addend instanceof Vector2) {
	      this.x += addend.x;
	      this.y += addend.y;
	    } else {
	      this.x += addend;
	      this.y += typeof y === 'undefined' ? addend : y;
	    }
	    return this;
	  };
	
	  /**
	   * Checks whether the x and y value are the same as the given ones
	   * @param  {(Number|PhotoEditorSDK.Math.Vector2)} vec
	   * @param  {Number} y
	   * @return {Boolean}
	   */
	
	
	  Vector2.prototype.equals = function equals(vec, y) {
	    if (vec instanceof Vector2) {
	      return vec.x === this.x && vec.y === this.y;
	    } else {
	      return vec === this.x && y === this.y;
	    }
	  };
	
	  /**
	   * Flips the x and y values of this vector
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.flip = function flip() {
	    var tempX = this.x;
	    this.x = this.y;
	    this.y = tempX;
	    return this;
	  };
	
	  /**
	   * Rounds the values of this vector
	   * @returns {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.round = function round() {
	    this.x = Math.round(this.x);
	    this.y = Math.round(this.y);
	    return this;
	  };
	
	  /**
	   * Rounds up the values of this vector
	   * @returns {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.ceil = function ceil() {
	    this.x = Math.ceil(this.x);
	    this.y = Math.ceil(this.y);
	    return this;
	  };
	
	  /**
	   * Rounds down the values of this vector
	   * @returns {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.floor = function floor() {
	    this.x = this.x | 0;
	    this.y = this.y | 0;
	    return this;
	  };
	
	  /**
	   * Makes both numbers of this vector positive
	   * @returns {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Vector2.prototype.abs = function abs() {
	    this.x = Math.abs(this.x);
	    this.y = Math.abs(this.y);
	    return this;
	  };
	
	  /**
	   * Returns the euclidean length of this vector
	   * @return {Number}
	   */
	
	
	  Vector2.prototype.len = function len() {
	    return Math.sqrt(this.x * this.x + this.y * this.y);
	  };
	
	  /**
	   * Returns a string representation of this vector
	   * @return {String}
	   */
	
	
	  Vector2.prototype.toString = function toString() {
	    return 'Vector2({ x: ' + this.x + ', y: ' + this.y + ' })';
	  };
	
	  return Vector2;
	}();
	
	exports.default = Vector2;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var maxLogLevel = 'warn';
	
	var LEVELS = [{ type: 'trace', background: '#EEEEEE', color: '#AAAAAA' }, { type: 'info', background: '#BDE5F8', color: '#00529B' }, { type: 'warn', background: '#FEEFB3', color: '#9F6000' }, { type: 'error', background: '#FFBABA', color: '#D8000C' }, { type: 'log', background: '#EEEEEE', color: '#1f4f6b' }];
	var LEVEL_TYPES = LEVELS.map(function (l) {
	  return l.type;
	});
	
	var Log = {};
	
	Log.setLevel = function (_level) {
	  maxLogLevel = _level;
	};
	Log.canLog = function (type) {
	  if (maxLogLevel === null) return false;
	  var currentLevelIndex = LEVEL_TYPES.indexOf(type);
	  var maxLevelIndex = LEVEL_TYPES.indexOf(maxLogLevel);
	  if (currentLevelIndex < maxLevelIndex) return false;
	  return true;
	};
	Log.hasColorfulOutput = function () {
	  return (!process || process && process.browser) && typeof navigator !== 'undefined' && navigator.userAgent.match(/Gecko|WebKit/i) && !navigator.userAgent.match(/Trident/);
	};
	
	Log.printError = function (e) {
	  var lines = e.stack.split('\n');
	  lines.forEach(function (line) {
	    Log.error('Error', line);
	  });
	};
	
	LEVELS.forEach(function (level) {
	  var type = level.type;
	  var background = level.background;
	  var color = level.color;
	
	  Log[type] = function (tag) {
	    if (!Log.canLog(type)) return;
	
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    var output = args.map(function (a) {
	      return typeof a === 'string' ? a : a.toString();
	    }).join(' ');
	    if (!Log.hasColorfulOutput()) {
	      return console.log('PhotoEditorSDK | ' + tag + ' | ' + output);
	    }
	    console.log('%c  %c PhotoEditorSDK %c  %c ' + tag + ' %c  ' + output + '  %c  ', 'background: #43ADEB; padding: 5px 0', 'background: #2B2B2B; color: white; padding: 5px 0', 'background: #43ADEB; padding: 5px 0', 'background: ' + background + '; color: ' + color + '; padding: 5px 0; font-weight: bold', 'background: #2B2B2B; color: white; padding: 5px 0', 'background: #43ADEB; padding: 5px 0');
	  };
	});
	
	exports.default = Log;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(27);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(11)
	  , core      = __webpack_require__(18)
	  , ctx       = __webpack_require__(84)
	  , hide      = __webpack_require__(19)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_28__;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A canvas render target that you can render to.
	 * Canvas equivalent of {@link PhotoEditorSDK.Engine.WebGLRenderTarget}
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var CanvasRenderTarget = function () {
	  /**
	   * Creates a CanvasRenderTarget
	   * @param  {Number} width
	   * @param  {Number} height
	   * @param  {Number} pixelRatio
	   * @param  {HTMLCanvasElement} canvas
	   * @param  {CanvasRenderingContext2D} context
	   */
	
	  function CanvasRenderTarget(width, height, pixelRatio, canvas, context) {
	    (0, _classCallCheck3.default)(this, CanvasRenderTarget);
	
	    this._width = width;
	    this._height = height;
	    this._pixelRatio = pixelRatio;
	
	    this._canvas = canvas || this._createCanvas();
	    this._context = context || this._canvas.getContext('2d');
	
	    this._canvas.width = this._width * this._pixelRatio;
	    this._canvas.height = this._height * this._pixelRatio;
	    this._filterStack = [{
	      renderTarget: this,
	      filter: []
	    }];
	  }
	
	  /**
	   * Creates a canvas
	   * @return {Canvas}
	   * @private
	   */
	
	
	  CanvasRenderTarget.prototype._createCanvas = function _createCanvas() {
	    return _globals.Utils.createCanvas();
	  };
	
	  /**
	   * Clears this CanvasRenderTarget
	   */
	
	
	  CanvasRenderTarget.prototype.clear = function clear() {
	    var ctx = this._context;
	    ctx.setTransform(1, 0, 0, 1, 0, 0);
	    ctx.clearRect(0, 0, this._width * this._pixelRatio, this._height * this._pixelRatio);
	  };
	
	  /**
	   * Resizes this canvas buffer to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  CanvasRenderTarget.prototype.resizeTo = function resizeTo(dimensions) {
	    if (this._width !== dimensions.x) {
	      this._width = dimensions.x;
	      this._canvas.width = this._width * this._pixelRatio;
	    }
	
	    if (this._height !== dimensions.y) {
	      this._height = dimensions.y;
	      this._canvas.height = this._height * this._pixelRatio;
	    }
	  };
	
	  /**
	   * Returns the canvas
	   * @return {HTMLCanvasElement}
	   */
	
	
	  CanvasRenderTarget.prototype.getCanvas = function getCanvas() {
	    return this._canvas;
	  };
	
	  /**
	   * Returns the rendering context
	   * @return {CanvasRenderingContext2D} [description]
	   */
	
	
	  CanvasRenderTarget.prototype.getContext = function getContext() {
	    return this._context;
	  };
	
	  /**
	   * Returns the filter stack
	   * @return {Object[]}
	   */
	
	
	  CanvasRenderTarget.prototype.getFilterStack = function getFilterStack() {
	    return this._filterStack;
	  };
	
	  /**
	   * Returns the width
	   * @return {Number}
	   */
	
	
	  CanvasRenderTarget.prototype.getWidth = function getWidth() {
	    return this._width;
	  };
	
	  /**
	   * Returns the height
	   * @return {Number}
	   */
	
	
	  CanvasRenderTarget.prototype.getHeight = function getHeight() {
	    return this._height;
	  };
	
	  /**
	   * Returns the pixel ratio
	   * @return {Number}
	   */
	
	
	  CanvasRenderTarget.prototype.getPixelRatio = function getPixelRatio() {
	    return this._pixelRatio;
	  };
	
	  /**
	   * Sets the pixel ratio
	   * @param {Number} pixelRatio
	   */
	
	
	  CanvasRenderTarget.prototype.setPixelRatio = function setPixelRatio(pixelRatio) {
	    this._pixelRatio = pixelRatio;
	  };
	
	  /**
	   * Returns the dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  CanvasRenderTarget.prototype.getDimensions = function getDimensions() {
	    return new _globals.Vector2(this._width, this._height);
	  };
	
	  /**
	   * Cleans up this canvas buffer
	   */
	
	
	  CanvasRenderTarget.prototype.dispose = function dispose() {
	    this._canvas = null;
	    this._context = null;
	  };
	
	  return CanvasRenderTarget;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = CanvasRenderTarget;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An object that you can render to. WebGL equivalent of {@link PhotoEditorSDK.Engine.CanvasRenderTarget}
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	
	var WebGLRenderTarget = function () {
	  /**
	   * Creates a WebGLRenderTarget
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer}  renderer
	   * @param  {Number}  width
	   * @param  {Number}  height
	   * @param  {Number}  pixelRatio
	   * @param  {Boolean} [isRoot = false]
	   */
	
	  function WebGLRenderTarget(renderer, width, height, pixelRatio) {
	    var isRoot = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];
	    (0, _classCallCheck3.default)(this, WebGLRenderTarget);
	
	    this._renderer = renderer;
	    this._gl = renderer.getContext();
	    this._width = width;
	    this._height = height;
	    this._frame = null;
	    this._pixelRatio = pixelRatio;
	    this._projectionMatrix = new _globals.Matrix();
	
	    // `null` means render to canvas directly
	    this._framebuffer = null;
	    this._isRoot = isRoot;
	    this._filterStack = [{
	      renderTarget: this,
	      filter: []
	    }];
	
	    if (!isRoot) {
	      this._initFrameBuffer();
	    }
	  }
	
	  /**
	   * Resizes this WebGLRenderTarget to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  WebGLRenderTarget.prototype.resizeTo = function resizeTo(dimensions) {
	    this._width = dimensions.x | 0; // rounded
	    this._height = dimensions.y | 0; // rounded
	
	    if (!this._isRoot) {
	      this._resizeTexture(dimensions);
	    }
	
	    this._calculateProjectionMatrix();
	  };
	
	  /**
	   * Resizes the FBO's texture to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   * @private
	   */
	
	
	  WebGLRenderTarget.prototype._resizeTexture = function _resizeTexture(dimensions) {
	    var gl = this._gl;
	    gl.bindTexture(gl.TEXTURE_2D, this._texture);
	
	    var realWidth = this._width * this._pixelRatio;
	    var realHeight = this._height * this._pixelRatio;
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, realWidth, realHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
	  };
	
	  /**
	   * Binds the framebuffer and resizes the viewport
	   */
	
	
	  WebGLRenderTarget.prototype.activate = function activate() {
	    var gl = this._gl;
	    gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
	
	    this._calculateProjectionMatrix();
	
	    gl.viewport(0, 0, this._width * this._pixelRatio, this._height * this._pixelRatio);
	    gl.disable(gl.STENCIL_TEST);
	  };
	
	  /**
	   * Clears the framebuffer
	   */
	
	
	  WebGLRenderTarget.prototype.clear = function clear() {
	    var color = arguments.length <= 0 || arguments[0] === undefined ? _globals.Color.TRANSPARENT : arguments[0];
	
	    var gl = this._gl;
	    gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
	
	    gl.clearColor.apply(gl, color.toGLColor());
	    gl.clear(gl.COLOR_BUFFER_BIT);
	  };
	
	  /**
	   * Calculates the projection matrix for this render target
	   * @private
	   */
	
	
	  WebGLRenderTarget.prototype._calculateProjectionMatrix = function _calculateProjectionMatrix() {
	    var projectionMatrix = this._projectionMatrix;
	    projectionMatrix.reset();
	
	    var frame = this._frame || new _globals.Rectangle(0, 0, this._width, this._height);
	
	    var x = frame.x;
	    var y = frame.y;
	
	    if (!this._isRoot) {
	      projectionMatrix.a = 1 / this._width * 2;
	      projectionMatrix.d = 1 / this._height * 2;
	
	      projectionMatrix.tx = -1 - x * projectionMatrix.a;
	      projectionMatrix.ty = -1 - y * projectionMatrix.d;
	    } else {
	      projectionMatrix.a = 1 / this._width * 2;
	      projectionMatrix.d = -1 / this._height * 2;
	
	      projectionMatrix.tx = -1 - x * projectionMatrix.a;
	      projectionMatrix.ty = 1 - y * projectionMatrix.d;
	    }
	  };
	
	  /**
	   * Initializes the WebGL FBO and Texture for this WebGLRenderTarget
	   * @private
	   */
	
	
	  WebGLRenderTarget.prototype._initFrameBuffer = function _initFrameBuffer() {
	    var gl = this._gl;
	
	    // Init the FBO
	    this._framebuffer = gl.createFramebuffer();
	
	    // Create the texture
	    this._texture = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, this._texture);
	
	    // Set scale and repeat parameters
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
	
	    // Bind texture to FBO
	    gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
	    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this._texture, 0);
	
	    this.resizeTo(new _globals.Vector2(this._width, this._height));
	  };
	
	  /**
	   * Returns the projection matrix
	   * @return {PhotoEditorSDK.Math.Matrix}
	   */
	
	
	  WebGLRenderTarget.prototype.getProjectionMatrix = function getProjectionMatrix() {
	    return this._projectionMatrix;
	  };
	
	  /**
	   * Returns the texture
	   * @return {PhotoEditorSDK.Engine.Texture}
	   */
	
	
	  WebGLRenderTarget.prototype.getTexture = function getTexture() {
	    return this._texture;
	  };
	
	  /**
	   * Returns the frame
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  WebGLRenderTarget.prototype.getFrame = function getFrame() {
	    return this._frame;
	  };
	
	  /**
	   * Sets the frame
	   * @param {PhotoEditorSDK.Math.Rectangle} frame
	   */
	
	
	  WebGLRenderTarget.prototype.setFrame = function setFrame(frame) {
	    this._frame = frame;
	  };
	
	  /**
	   * Returns the filter stack
	   * @return {Object[]}
	   */
	
	
	  WebGLRenderTarget.prototype.getFilterStack = function getFilterStack() {
	    return this._filterStack;
	  };
	
	  /**
	   * Disposes this WebGLRenderTarget
	   */
	
	
	  WebGLRenderTarget.prototype.dispose = function dispose() {
	    var gl = this._gl;
	    gl.deleteTexture(this._texture);
	    gl.deleteFramebuffer(this._framebuffer);
	  };
	
	  return WebGLRenderTarget;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = WebGLRenderTarget;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(172);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _log = __webpack_require__(24);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _eventEmitter = __webpack_require__(21);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _vector = __webpack_require__(23);
	
	var _vector2 = _interopRequireDefault(_vector);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	var _utils = __webpack_require__(22);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Adds `set{OptionName}` and `get{OptionName}` methods to an object. Method names
	 * are specified via the `availableOptions` object.
	 * @class
	 * @extends EventEmitter
	 * @memberof PhotoEditorSDK
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Configurable = function (_EventEmitter) {
	  (0, _inherits3.default)(Configurable, _EventEmitter);
	
	  function Configurable() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var additionalAvailableOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    (0, _classCallCheck3.default)(this, Configurable);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this.availableOptions = _this.availableOptions || {};
	    _this.availableOptions = _utils2.default.extend(_this.availableOptions, additionalAvailableOptions);
	
	    _this._onConfigurableUpdate = _this._onConfigurableUpdate.bind(_this);
	
	    _this._initOptions(options);
	    return _this;
	  }
	
	  /**
	   * Builds an error message from the given string
	   * @param  {String} message
	   * @return {Error}
	   * @private
	   */
	
	
	  Configurable.prototype._buildConfigError = function _buildConfigError(message) {
	    var errorMessage = '';
	    if (this.constructor.name) {
	      errorMessage = this.constructor.name + ': ';
	    }
	    errorMessage += message;
	    return new Error(errorMessage);
	  };
	
	  /**
	   * Gets called when options have been changed
	   * @protected
	   */
	
	
	  Configurable.prototype._onOptionsChange = function _onOptionsChange() {};
	
	  /**
	   * Checks whether all required options are specified
	   * @return {Promise}
	   */
	
	
	  Configurable.prototype.validateSettings = function validateSettings() {
	    var _this2 = this;
	
	    return new _promise2.default(function (resolve, reject) {
	      // Check for required options
	      for (var optionName in _this2.availableOptions) {
	        var optionConfig = _this2.availableOptions[optionName];
	        if (optionConfig.required && typeof _this2._options[optionName] === 'undefined') {
	          return reject(_this2._buildConfigError('Option `' + optionName + '` is required.'));
	        }
	      }
	
	      resolve();
	    });
	  };
	
	  /**
	   * Goes through the available options, sets _options defaults
	   * @param {Object} userOptions
	   * @protected
	   */
	
	
	  Configurable.prototype._initOptions = function _initOptions() {
	    var userOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    this._options = {};
	
	    // Set defaults, create getters and setters
	    var optionName, option, capitalized;
	    var self = this;
	    for (optionName in this.availableOptions) {
	      capitalized = optionName.charAt(0).toUpperCase() + optionName.slice(1);
	      option = this.availableOptions[optionName];
	
	      if (['string', 'number', 'boolean', 'object', 'vector2', 'color', 'configurable', 'array'].indexOf(option.type) === -1) {
	        throw this._buildConfigError('Unknown option type: `' + option.type + '`');
	      }
	
	      // Create setter and getter
	      var fn = function fn(optionName, option) {
	        self['set' + capitalized] = function (value, update, initial) {
	          self.setOption(optionName, value, update, initial);
	        };
	
	        // Default getter
	        self['get' + capitalized] = function () {
	          return self.getOption(optionName);
	        };
	      };
	      fn(optionName, option);
	
	      // Handle configurable initialization
	      if (option.type === 'configurable') {
	        this._options[optionName] = new Configurable(undefined, option.structure || {});
	        this._options[optionName].on('update', this._onConfigurableUpdate);
	      }
	
	      // Set default if available
	      if (typeof option.default !== 'undefined' && !(optionName in userOptions)) {
	        this['set' + capitalized](option.default, false, true);
	      }
	    }
	
	    // Overwrite options with the ones given by user
	    for (optionName in userOptions) {
	      // Check if option is available
	      if (typeof this.availableOptions[optionName] === 'undefined') {
	        throw new Error('Invalid option: ' + optionName);
	      }
	
	      // Call setter
	      capitalized = optionName.charAt(0).toUpperCase() + optionName.slice(1);
	      this['set' + capitalized](userOptions[optionName], false, true);
	    }
	  };
	
	  /**
	   * Sets the given options
	   * @param {Object} options
	   */
	
	
	  Configurable.prototype.set = function set(options) {
	    var emitUpdate = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    if (emitUpdate) {
	      this.emit('update', this, options);
	    }
	
	    for (var optionName in options) {
	      this.setOption(optionName, options[optionName], false);
	    }
	    this._onOptionsChange();
	  };
	
	  /**
	   * Returns the value for the given option
	   * @param {String} optionName
	   * @return {*}
	   */
	
	
	  Configurable.prototype.getOption = function getOption(optionName) {
	    return this._options[optionName];
	  };
	
	  /**
	   * Returns the default value for the given option
	   * @param  {String} optionName
	   * @return {*}
	   */
	
	
	  Configurable.prototype.getOptionDefault = function getOptionDefault(optionName) {
	    var option = this.availableOptions[optionName];
	    if (!option) {
	      return undefined;
	    }
	    return option.default;
	  };
	
	  /**
	   * Returns the options
	   * @return {Object}
	   */
	
	
	  Configurable.prototype.getOptions = function getOptions() {
	    return this._options;
	  };
	
	  /**
	   * Returns a hash with the default options
	   * @return {Object}
	   */
	
	
	  Configurable.prototype.getDefaultOptions = function getDefaultOptions() {
	    var options = {};
	    for (var optionName in this._options) {
	      var defaultValue = this.availableOptions[optionName].default;
	      if (typeof defaultValue === 'undefined') continue;
	
	      options[optionName] = defaultValue;
	    }
	    return options;
	  };
	
	  /**
	   * Check if the current options equal the given ones
	   * @param  {Object} options
	   * @return {Boolean}
	   */
	
	
	  Configurable.prototype.optionsEqual = function optionsEqual(options) {
	    for (var optionName in options) {
	      var value = options[optionName];
	      if (!this._optionEquals(optionName, value)) {
	        return false;
	      }
	    }
	    return true;
	  };
	
	  /**
	   * Checks if the given option has the given value
	   * @param  {String} optionName
	   * @param  {*} value
	   * @return {Boolean}
	   * @private
	   */
	
	
	  Configurable.prototype._optionEquals = function _optionEquals(optionName, value) {
	    var optionType = this.availableOptions[optionName].type;
	    var currentValue = this._options[optionName];
	    switch (optionType) {
	      case 'string':
	      case 'number':
	      case 'boolean':
	      case 'object':
	      case '*':
	        return currentValue === value;
	      case 'vector2':
	      case 'color':
	        return value.equals(currentValue);
	      case 'configurable':
	        return currentValue.optionsEqual(value);
	      case 'array':
	        return this._arrayOptionEquals(optionName, value);
	    }
	  };
	
	  /**
	   * Checks if the given option of type `array` matches the given value
	   * @param  {String} optionName
	   * @param  {Array} arr
	   * @return {Boolean}
	   * @private
	   */
	
	
	  Configurable.prototype._arrayOptionEquals = function _arrayOptionEquals(optionName, arr) {
	    var thisArr = this._options[optionName];
	    var equal = true;
	    for (var i = 0; i < thisArr.length; i++) {
	      var thisValue = thisArr[i];
	      var value = arr[i];
	      if (thisValue instanceof Configurable) {
	        if (typeof value === 'undefined' || !thisValue.optionsEqual(value)) {
	          equal = false;
	          break;
	        }
	      } else if (value !== thisValue) {
	        equal = false;
	        break;
	      }
	    }
	    return equal;
	  };
	
	  /**
	   * Returns a serialized version of this configurable
	   * @return {Object}
	   */
	
	
	  Configurable.prototype.serializeOptions = function serializeOptions() {
	    var options = {};
	    for (var optionName in this._options) {
	      options[optionName] = this._serializeOption(optionName);
	    }
	    return options;
	  };
	
	  /**
	   * Returns a serialized version of the given option
	   * @param {String} optionName
	   * @return {*} optionName
	   * @protected
	   */
	
	
	  Configurable.prototype._serializeOption = function _serializeOption(optionName) {
	    var optionType = this.availableOptions[optionName].type;
	    var value = this._options[optionName];
	    switch (optionType) {
	      case 'string':
	      case 'number':
	      case 'boolean':
	      case 'object':
	      case '*':
	        return value;
	      case 'vector2':
	      case 'color':
	        return value.clone();
	      case 'configurable':
	        return value.serializeOptions();
	      case 'array':
	        return value.slice(0);
	    }
	  };
	
	  /**
	   * Sets the value for the given option, validates it
	   * @param {String} optionName
	   * @param {*} value
	   * @param {Boolean} [update = true] - Should an `update` event be emitted?
	   * @param {Boolean} [initial = false] - Is this the first time this option is set?
	   */
	
	
	  Configurable.prototype.setOption = function setOption(optionName, value) {
	    var update = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	    var initial = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    if (update) {
	      this.emit('update', this, (0, _defineProperty3.default)({}, optionName, value));
	    }
	
	    var optionConfig = this.availableOptions[optionName];
	    if (!optionConfig) {
	      _log2.default.error(this.constructor.name, 'Unknown option `' + optionName + '`.');
	      return;
	    }
	
	    if (typeof optionConfig.setter !== 'undefined') {
	      value = optionConfig.setter.call(this, value, initial);
	    }
	
	    if (typeof optionConfig.validation !== 'undefined') {
	      optionConfig.validation(value);
	    }
	
	    switch (optionConfig.type) {
	      // String options
	      case 'string':
	        if (typeof value !== 'string') {
	          throw this._buildConfigError('Option `' + optionName + '` has to be a string.');
	        }
	
	        // String value restrictions
	        var available = optionConfig.available;
	        if (typeof available !== 'undefined' && available.indexOf(value) === -1) {
	          throw this._buildConfigError('Invalid value for `' + optionName + '` (valid values are: ' + optionConfig.available.join(', ') + ')');
	        }
	
	        this._options[optionName] = value;
	        break;
	
	      // Number options
	      case 'number':
	        if (typeof value !== 'number') {
	          throw this._buildConfigError('Option `' + optionName + '` has to be a number.');
	        }
	
	        this._options[optionName] = value;
	        break;
	
	      // Boolean options
	      case 'boolean':
	        if (typeof value !== 'boolean') {
	          throw this._buildConfigError('Option `' + optionName + '` has to be a boolean.');
	        }
	
	        this._options[optionName] = value;
	        break;
	
	      // Vector2 options
	      case 'vector2':
	        if (!(value instanceof _vector2.default)) {
	          throw this._buildConfigError('Option `' + optionName + '` has to be an instance of Vector2.');
	        }
	
	        this._options[optionName] = value.clone();
	
	        break;
	
	      // Color options
	      case 'color':
	        if (!(value instanceof _color2.default)) {
	          throw this._buildConfigError('Option `' + optionName + '` has to be an instance of Color.');
	        }
	
	        this._options[optionName] = value;
	        break;
	
	      // Object options
	      case 'object':
	      case '*':
	        this._options[optionName] = value;
	        break;
	
	      // Configurable options
	      case 'configurable':
	        this._options[optionName].set(value);
	        break;
	
	      // Array options
	      case 'array':
	        if (!(value instanceof Array)) {
	          throw this._buildConfigError('Option `' + optionName + '` has to be an Array.');
	        }
	        this._options[optionName] = value.slice(0);
	        break;
	
	      // Unknown option type
	      default:
	        throw this._buildConfigError('Unknown option type: `' + optionConfig.type + '`');
	    }
	
	    if (update) {
	      this._onOptionsChange();
	      this.emit('update', this, (0, _defineProperty3.default)({}, optionName, value));
	    }
	  };
	
	  /**
	   * Gets called when a `configurable` option has been updated
	   * @param  {*} ...args
	   * @private
	   */
	
	
	  Configurable.prototype._onConfigurableUpdate = function _onConfigurableUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    this.emit.apply(this, ['update'].concat(args));
	  };
	
	  return Configurable;
	}(_eventEmitter2.default);
	
	exports.default = Configurable;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(171);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(170);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(91)
	  , enumBugKeys = __webpack_require__(49);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 36 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 37 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * The available render types
	 * @enum {String}
	 * @alias RenderType
	 * @memberof PhotoEditorSDK
	 */
	var RenderType = exports.RenderType = {
	  IMAGE: 'image',
	  DATAURL: 'data-url',
	  BUFFER: 'buffer',
	  BLOB: 'blob',
	  MSBLOB: 'ms-blob'
	};
	
	/**
	 * The available image types
	 * @enum {String}
	 * @alias ImageFormat
	 * @memberof PhotoEditorSDK
	 */
	var ImageFormat = exports.ImageFormat = {
	  PNG: 'image/png',
	  JPEG: 'image/jpeg'
	};
	
	var Events = exports.Events = {
	  OPERATION_UPDATED: 'operation:update'
	};

/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*!
	 * Extracted from MinifyJpeg (Copyright (c) 2014 Hiroaki Matoba, MIT License):
	 * https://github.com/hMatoba/MinifyJpeg
	 */
	
	var KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	
	/**
	 * Provides Base64 encode and decode methods
	 * @type {Object}
	 * @ignore
	 */
	var Base64 = {
	  /**
	   * Encodes the given input into a Base64 string
	   * @param  {String} input
	   * @return {String}
	   */
	
	  encode: function encode(input) {
	    var output = '';
	    var chr1 = void 0,
	        chr2 = void 0,
	        chr3 = void 0;
	    var enc1 = void 0,
	        enc2 = void 0,
	        enc3 = void 0,
	        enc4 = void 0;
	    var i = 0;
	
	    do {
	      chr1 = input[i++];
	      chr2 = input[i++];
	      chr3 = input[i++];
	
	      enc1 = chr1 >> 2;
	      enc2 = (chr1 & 3) << 4 | chr2 >> 4;
	      enc3 = (chr2 & 15) << 2 | chr3 >> 6;
	      enc4 = chr3 & 63;
	
	      if (isNaN(chr2)) {
	        enc3 = enc4 = 64;
	      } else if (isNaN(chr3)) {
	        enc4 = 64;
	      }
	
	      output = output + KEY_STR.charAt(enc1) + KEY_STR.charAt(enc2) + KEY_STR.charAt(enc3) + KEY_STR.charAt(enc4);
	      chr1 = chr2 = chr3 = '';
	      enc1 = enc2 = enc3 = enc4 = '';
	    } while (i < input.length);
	
	    return output;
	  },
	
	
	  /**
	   * Decodes the given Base64 string
	   * @param  {String} input
	   * @return {String}
	   */
	  decode: function decode(input) {
	    var chr1 = void 0,
	        chr2 = void 0,
	        chr3 = void 0;
	    var enc1 = void 0,
	        enc2 = void 0,
	        enc3 = void 0,
	        enc4 = void 0;
	    var i = 0;
	    var buf = [];
	
	    // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
	    var base64test = /[^A-Za-z0-9\+\/\=]/g;
	    if (base64test.exec(input)) {
	      throw new Error('There were invalid base64 characters in the input text.\n' + 'Valid base64 characters are A-Z, a-z, 0-9, \'+\', \'/\',and \'=\'\n' + 'Expect errors in decoding.');
	    }
	    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
	
	    do {
	      enc1 = KEY_STR.indexOf(input.charAt(i++));
	      enc2 = KEY_STR.indexOf(input.charAt(i++));
	      enc3 = KEY_STR.indexOf(input.charAt(i++));
	      enc4 = KEY_STR.indexOf(input.charAt(i++));
	
	      chr1 = enc1 << 2 | enc2 >> 4;
	      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
	      chr3 = (enc3 & 3) << 6 | enc4;
	
	      buf.push(chr1);
	
	      if (enc3 !== 64) {
	        buf.push(chr2);
	      }
	      if (enc4 !== 64) {
	        buf.push(chr3);
	      }
	
	      chr1 = chr2 = chr3 = '';
	      enc1 = enc2 = enc3 = enc4 = '';
	    } while (i < input.length);
	
	    return buf;
	  }
	};
	
	exports.default = Base64;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _base = __webpack_require__(39);
	
	var _base2 = _interopRequireDefault(_base);
	
	var _arrayStream = __webpack_require__(107);
	
	var _arrayStream2 = _interopRequireDefault(_arrayStream);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EXIF_TAGS = {
	  0x0100: 'ImageWidth',
	  0x0101: 'ImageHeight',
	  0x8769: 'ExifIFDPointer',
	  0x8825: 'GPSInfoIFDPointer',
	  0xA005: 'InteroperabilityIFDPointer',
	  0x0102: 'BitsPerSample',
	  0x0103: 'Compression',
	  0x0106: 'PhotometricInterpretation',
	  0x0112: 'Orientation',
	  0x0115: 'SamplesPerPixel',
	  0x011C: 'PlanarConfiguration',
	  0x0212: 'YCbCrSubSampling',
	  0x0213: 'YCbCrPositioning',
	  0x011A: 'XResolution',
	  0x011B: 'YResolution',
	  0x0128: 'ResolutionUnit',
	  0x0111: 'StripOffsets',
	  0x0116: 'RowsPerStrip',
	  0x0117: 'StripByteCounts',
	  0x0201: 'JPEGInterchangeFormat',
	  0x0202: 'JPEGInterchangeFormatLength',
	  0x012D: 'TransferFunction',
	  0x013E: 'WhitePoint',
	  0x013F: 'PrimaryChromaticities',
	  0x0211: 'YCbCrCoefficients',
	  0x0214: 'ReferenceBlackWhite',
	  0x0132: 'DateTime',
	  0x010E: 'ImageDescription',
	  0x010F: 'Make',
	  0x0110: 'Model',
	  0x0131: 'Software',
	  0x013B: 'Artist',
	  0x8298: 'Copyright'
	}; /*!
	    * Based on https://github.com/exif-js/exif-js by Jacob Seidelin
	    * Licensed under MIT
	    */
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var DATA_JPEG_PREFIX = 'data:image/jpeg;base64,';
	var JPEG_REGEX = new RegExp('^' + DATA_JPEG_PREFIX, 'i');
	
	/**
	 * Reads EXIF tags from the given byte array and restores them
	 * @class
	 * @memberof PhotoEditorSDK
	 * @ignore
	 */
	
	var EXIF = function () {
	  /**
	   * Creates an EXIF object
	   * @param  {Array} buf
	   */
	
	  function EXIF(buf) {
	    (0, _classCallCheck3.default)(this, EXIF);
	
	    this._buf = buf;
	    this._stream = new _arrayStream2.default(this._buf);
	    this._stream.setHead(0);
	
	    this._segments = this._sliceIntoSegments(this._buf);
	    this._exifBuffer = this._getExifBuffer();
	    this._exifStream = new _arrayStream2.default(this._exifBuffer);
	    this._parseExif();
	  }
	
	  /**
	   * Restores the exif tags into the given data url
	   * @return {String} base64String
	   */
	
	
	  EXIF.prototype.restoreExifTags = function restoreExifTags(base64String) {
	    // First, make the given string a data array
	    var raw = base64String.replace(DATA_JPEG_PREFIX, '');
	    var data = _base2.default.decode(raw);
	
	    var segments = this._sliceIntoSegments(data);
	    var segmentStart = segments[1][0];
	    var dataBefore = data.slice(0, segmentStart);
	    var dataAfter = data.slice(segmentStart);
	
	    var newData = dataBefore.concat(this._exifBuffer);
	    newData = newData.concat(dataAfter);
	
	    // Make it a base64 string again
	    return DATA_JPEG_PREFIX + _base2.default.encode(newData);
	  };
	
	  /**
	   * Overwrites the orientation with the given 16 bit integer
	   * @param {Number} orientation
	   */
	
	
	  EXIF.prototype.setOrientation = function setOrientation(orientation) {
	    if (this._tagData.Orientation) {
	      var entryOffset = this._tagData.Orientation.entryOffset;
	      // Replace value in buffer
	
	      this._exifStream.setHead(entryOffset + 8);
	      this._exifStream.writeInt16(orientation);
	    }
	  };
	
	  /**
	   * Checks whether the given base64 data url is a jpeg image
	   * @param  {String}  base64String
	   * @return {Boolean}
	   */
	
	
	  EXIF.isJPEG = function isJPEG(base64String) {
	    return JPEG_REGEX.test(base64String);
	  };
	
	  /**
	   * Creates a new instance of Exif from the given base64-encoded
	   * string
	   * @param  {String} base64String
	   * @return {PhotoEditorSDK.Exif}
	   */
	
	
	  EXIF.fromBase64String = function fromBase64String(base64String) {
	    var raw = base64String.replace(DATA_JPEG_PREFIX, '');
	    var data = _base2.default.decode(raw);
	    return new EXIF(data);
	  };
	
	  /**
	   * Parses the exif tags
	   * @return {Object}
	   * @private
	   */
	
	
	  EXIF.prototype._parseExif = function _parseExif() {
	    this._exifStream.setHead(0);
	    // Skip marker
	    this._exifStream.readInt16();
	    // Skip length
	    this._exifStream.readInt16();
	
	    var header = this._exifStream.readString(4);
	    if (header !== 'Exif') {
	      return;
	    }
	
	    // Skip 2 bytes
	    this._exifStream.readInt16();
	
	    var tiffOffset = this._exifStream.getHead();
	
	    // Find endian type
	    var bigEndian = false;
	    var endian = this._exifStream.readInt16();
	    if (endian === 0x4949) {
	      bigEndian = false;
	    } else if (endian === 0x4d4d) {
	      bigEndian = true;
	    } else {
	      throw new Error('Invalid TIFF data: No endian type found');
	    }
	
	    if (this._exifStream.readInt16(!bigEndian) !== 0x002A) {
	      throw new Error('Invalid TIFF data: No 0x002A');
	    }
	
	    var firstIFDOffset = this._exifStream.readInt32(!bigEndian);
	    if (firstIFDOffset < 8) {
	      throw new Error('Invalid TIFF data: First IFD offset < 8');
	    }
	
	    var ifdOffset = tiffOffset + firstIFDOffset;
	    var tags = this._readTags(this._exifStream, tiffOffset, ifdOffset, bigEndian);
	    this._tags = tags.tags;
	    this._tagData = tags.tagData;
	  };
	
	  /**
	   * Reads the TIFF tags from the stream
	   * @param  {ArrayBuffer} stream
	   * @param  {Number} tiffStart The position where tiff data starts
	   * @param  {Number} ifdStart  The position where the IFD starts
	   * @param  {Boolean} bigEndian
	   * @return {Object}
	   * @private
	   */
	
	
	  EXIF.prototype._readTags = function _readTags(stream, tiffStart, ifdStart, bigEndian) {
	    stream.setHead(ifdStart);
	    var entriesCount = stream.readInt16(!bigEndian);
	    var tags = {};
	    var tagData = [];
	
	    for (var i = 0; i < entriesCount; i++) {
	      var entryOffset = ifdStart + i * 12 + 2;
	      stream.setHead(entryOffset);
	      var tag = stream.readInt16(!bigEndian);
	      var type = void 0;
	      var numValues = void 0;
	      var valueOffset = void 0;
	      if (EXIF_TAGS[tag]) {
	        tag = EXIF_TAGS[tag];
	        type = stream.readInt16(!bigEndian);
	        numValues = stream.readInt32(!bigEndian);
	        valueOffset = stream.readInt32(!bigEndian) + tiffStart;
	        var value = null;
	
	        switch (type) {
	          case 1: // byte, 8-bit unsigned int
	          case 7:
	            // undefined, 8-bit byte, value depending on field
	            if (numValues === 1) {
	              value = stream.readInt8(!bigEndian);
	            } else {
	              value = [];
	              for (var _i = 0; _i < numValues; _i++) {
	                value.push(stream.readInt8(!bigEndian));
	              }
	            }
	            break;
	          case 2:
	            // 8-bit ascii char
	            stream.setHead(numValues > 4 ? valueOffset : entryOffset + 8);
	            value = stream.readString(numValues);
	            break;
	          case 3:
	            // short
	            stream.setHead(numValues > 2 ? valueOffset : entryOffset + 8);
	            if (numValues === 1) {
	              value = stream.readInt16(!bigEndian);
	            } else {
	              value = [];
	              for (var _i2 = 0; _i2 < numValues; _i2++) {
	                value.push(stream.readInt16(!bigEndian));
	              }
	            }
	            break;
	          case 4: // long
	          case 9:
	            // slong
	            stream.setHead(numValues > 1 ? valueOffset : entryOffset + 8);
	            if (numValues === 1) {
	              value = stream.readInt32(!bigEndian);
	            } else {
	              value = [];
	              for (var _i3 = 0; _i3 < numValues; _i3++) {
	                value.push(stream.readInt32(!bigEndian));
	              }
	            }
	            break;
	          case 5: // rational (two long values, first numerator, second denominator)
	          case 10:
	            // rational (two slongs)
	            stream.setHead(valueOffset);
	            if (numValues === 1) {
	              var numerator = stream.readInt32(!bigEndian);
	              var denominator = stream.readInt32(!bigEndian);
	              value = numerator / denominator;
	            } else {
	              value = [];
	              for (var _i4 = 0; _i4 < numValues; _i4++) {
	                var _numerator = stream.readInt32(!bigEndian);
	                var _denominator = stream.readInt32(!bigEndian);
	                var val = _numerator / _denominator;
	                value.push(val);
	              }
	            }
	            break;
	        }
	
	        tags[tag] = value;
	        tagData[tag] = {
	          value: value,
	          numValues: numValues,
	          entryOffset: entryOffset,
	          valueOffset: valueOffset,
	          type: type
	        };
	      }
	    }
	
	    return { tags: tags, tagData: tagData };
	  };
	
	  /**
	   * Returns a new buffer containing the Exif segment
	   * @return {Array}
	   * @private
	   */
	
	
	  EXIF.prototype._getExifBuffer = function _getExifBuffer() {
	    var segments = this._segments;
	    for (var i = 0; i < segments.length; i++) {
	      var offset = segments[i][0];
	      var end = segments[i][1];
	      this._stream.setHead(offset);
	      var marker = this._stream.peekInt16();
	      if (marker === 0xffe1) {
	        return this._buf.slice(offset, end);
	      }
	    }
	    return false;
	  };
	
	  /**
	   * Slices the array into segments
	   * @param  {Array.<Number>} buf
	   * @return {Array}
	   * @private
	   */
	
	
	  EXIF.prototype._sliceIntoSegments = function _sliceIntoSegments(buf) {
	    var stream = new _arrayStream2.default(buf);
	    var segments = [];
	    while (stream.getHead() < buf.length) {
	      var marker = stream.readInt16();
	      if (marker === 0xffd8) {
	        continue;
	      } // SOI
	      if (marker === 0xffda) {
	        break;
	      } // SOS Marker
	
	      if (marker >= 0xff00 && marker <= 0xffff) {
	        // Marker (FF-XX-HL-LL)
	        var length = stream.readInt16();
	        var end = stream.getHead() + length - 2;
	        segments.push([stream.getHead() - 4, end]);
	        stream.setHead(end);
	      } else {
	        throw new Error('Invalid marker: 0x' + marker.toString(16));
	      }
	    }
	
	    this._stream.setHead(0);
	
	    return segments;
	  };
	
	  /**
	   * Returns the tags
	   * @return {Object}
	   */
	
	
	  EXIF.prototype.getTags = function getTags() {
	    return this._tags;
	  };
	
	  /**
	   * Returns the tag data (key, value, byte position etc.)
	   * @return {Object[]}
	   */
	
	
	  EXIF.prototype.getTagData = function getTagData() {
	    return this._tagData;
	  };
	
	  /**
	   * Disposes this EXIF object
	   */
	
	
	  EXIF.prototype.dispose = function dispose() {
	    this._buf = [];
	    this._exifBuffer = [];
	    this._segments = [];
	  };
	
	  return EXIF;
	}();
	
	exports.default = EXIF;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The base class for all objects that can be displayed
	 * on the screen
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var DisplayObject = function () {
	  /**
	   * Creates a DisplayObject
	   */
	
	  function DisplayObject() {
	    (0, _classCallCheck3.default)(this, DisplayObject);
	
	    this._position = new _globals.Vector2(0, 0);
	    this._scale = new _globals.Vector2(1, 1);
	    this._pivot = new _globals.Vector2(0, 0);
	    this._rotation = 0;
	    this._lastRotation = null;
	    this._alpha = 1;
	    this._visible = true;
	    this._worldTransform = new _globals.Matrix();
	    this._parent = null;
	    this._shaders = [];
	    this._boundsNeedUpdate = true;
	    this._bounds = new _globals.Rectangle(0, 0, 1, 1);
	    this._localBoundsNeedUpdate = true;
	    this._localBounds = new _globals.Rectangle(0, 0, 1, 1);
	    this._tint = 0xffffff;
	  }
	
	  /**
	   * Renders this DisplayObject using the given WebGLRenderer
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   * @abstract
	   */
	
	
	  DisplayObject.prototype.renderWebGL = function renderWebGL(renderer) {
	    _globals.Log.warn(this.constructor.name, '`renderWebGL` is abstract and not implemented in inherited class');
	  };
	
	  /**
	   * Renders this DisplayObject using the given CanvasRenderer
	   * @param  {PhotoEditorSDK.Engine.CanvasRenderer} renderer
	   * @abstract
	   */
	
	
	  DisplayObject.prototype.renderCanvas = function renderCanvas(renderer) {
	    _globals.Log.warn(this.constructor.name, '`renderCanvas` is abstract and not implemented in inherited class');
	  };
	
	  /**
	   * Updates the world transform for this DisplayObject
	   */
	
	
	  DisplayObject.prototype.updateTransform = function updateTransform() {
	    var parentTransform = this._parent ? this._parent.getWorldTransform() : _globals.Matrix.IDENTITY;
	    var worldTransform = this._worldTransform;
	
	    // Only build rotation matrix if rotation has changed since last update
	    var rotationChanged = this._rotation !== this._lastRotation;
	    if (rotationChanged) {
	      this._sinRotation = Math.sin(this._rotation);
	      this._cosRotation = Math.cos(this._rotation);
	      this._lastRotation = this._rotation;
	    }
	
	    worldTransform.a = this._cosRotation * this._scale.x;
	    worldTransform.b = this._sinRotation * this._scale.x;
	    worldTransform.c = -this._sinRotation * this._scale.y;
	    worldTransform.d = this._cosRotation * this._scale.y;
	    worldTransform.tx = this._position.x;
	    worldTransform.ty = this._position.y;
	
	    if (this._pivot.x || this._pivot.y) {
	      worldTransform.tx -= this._pivot.x * worldTransform.a + this._pivot.y * worldTransform.c;
	      worldTransform.ty -= this._pivot.x * worldTransform.b + this._pivot.y * worldTransform.d;
	    }
	
	    worldTransform.multiply(parentTransform);
	
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  // -------------------------------------------------------------------------- SHADERS
	
	  /**
	   * Pushes the given shader to the list of shaders
	   * @param {PhotoEditorSDK.Engine.Shader} shader
	   */
	
	
	  DisplayObject.prototype.addShader = function addShader(shader) {
	    this._shaders.push(shader);
	  };
	
	  /**
	   * Removes the given shader from the list of shaders
	   * @param  {PhotoEditorSDK.Engine.Shader} shader
	   * @return {Boolean}
	   */
	
	
	  DisplayObject.prototype.removeShader = function removeShader(shader) {
	    var index = this._shaders.indexOf(shader);
	    if (index !== -1) {
	      this._shaders.splice(index, 1);
	      return true;
	    }
	    return false;
	  };
	
	  /**
	   * Removes the shader at the given index from the list of shaders
	   * @param  {Number} index
	   * @return {Boolean}
	   */
	
	
	  DisplayObject.prototype.removeShaderAt = function removeShaderAt(index) {
	    if (!this._shaders[index]) {
	      return false;
	    }
	    this._shaders.splice(index, 1);
	    return true;
	  };
	
	  /**
	   * Returns the bounds for this DisplayObject
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  DisplayObject.prototype.getBounds = function getBounds() {
	    return this._bounds.clone();
	  };
	
	  // -------------------------------------------------------------------------- GETTERS / SETTERS
	
	  /**
	   * Returns the current position
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  DisplayObject.prototype.getPosition = function getPosition() {
	    return this._position;
	  };
	
	  /**
	   * Sets the position to the given one
	   * @param {PhotoEditorSDK.Math.Vector2|Number} x
	   * @param {Number} [y]
	   */
	
	
	  DisplayObject.prototype.setPosition = function setPosition(position, y) {
	    if (position instanceof _globals.Vector2) {
	      this._position.copy(position);
	    } else {
	      this._position.set(position, y);
	    }
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Returns the current scale
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  DisplayObject.prototype.getScale = function getScale() {
	    return this._scale;
	  };
	
	  /**
	   * Sets the scale to the given one
	   * @param {PhotoEditorSDK.Math.Vector2|Number} x
	   * @param {Number} [y]
	   */
	
	
	  DisplayObject.prototype.setScale = function setScale(scale, y) {
	    if (scale instanceof _globals.Vector2) {
	      this._scale.copy(scale);
	    } else {
	      this._scale.set(scale, y);
	    }
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Returns the current pivot (The point that this Displayobject rotates around)
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  DisplayObject.prototype.getPivot = function getPivot() {
	    return this._pivot;
	  };
	
	  /**
	   * Sets the pivot (The point that this DisplayObject rotates around)
	   * @param {PhotoEditorSDK.Math.Vector2|Number} pivot
	   * @param {Number} [y]
	   */
	
	
	  DisplayObject.prototype.setPivot = function setPivot(pivot, y) {
	    if (pivot instanceof _globals.Vector2) {
	      this._pivot.copy(pivot);
	    } else {
	      this._pivot.set(pivot, y);
	    }
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Returns the current rotation in radians
	   * @return {Number}
	   */
	
	
	  DisplayObject.prototype.getRotation = function getRotation() {
	    return this._rotation;
	  };
	
	  /**
	   * Sets this object's rotation (in radians)
	   * @param {Number} rotation
	   */
	
	
	  DisplayObject.prototype.setRotation = function setRotation(rotation) {
	    this._rotation = rotation;
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Returns the current alpha (0...1)
	   * @return {Number}
	   */
	
	
	  DisplayObject.prototype.getAlpha = function getAlpha() {
	    return this._alpha;
	  };
	
	  /**
	   * Sets the alpha (0...1)
	   * @param {Number} alpha
	   */
	
	
	  DisplayObject.prototype.setAlpha = function setAlpha(alpha) {
	    this._alpha = alpha;
	  };
	
	  /**
	   * Returns the computed alpha of this DisplayObject
	   * @return {Number}
	   */
	
	
	  DisplayObject.prototype.getWorldAlpha = function getWorldAlpha() {
	    if (this._parent) {
	      return this._parent.getAlpha() * this._alpha;
	    } else {
	      return this._alpha;
	    }
	  };
	
	  /**
	   * Returns the current world transformation matrix
	   * @return {PhotoEditorSDK.Math.Matrix}
	   */
	
	
	  DisplayObject.prototype.getWorldTransform = function getWorldTransform() {
	    return this._worldTransform;
	  };
	
	  /**
	   * Returns the parent object
	   * @return {PhotoEditorSDK.Engine.DisplayObject}
	   */
	
	
	  DisplayObject.prototype.getParent = function getParent() {
	    return this._parent;
	  };
	
	  /**
	   * Sets this object's parent object
	   * @param {PhotoEditorSDK.Engine.DisplayObject} parent
	   */
	
	
	  DisplayObject.prototype.setParent = function setParent(parent) {
	    this._parent = parent;
	  };
	
	  /**
	   * Returns the current tint color
	   * @return {Number}
	   */
	
	
	  DisplayObject.prototype.getTint = function getTint() {
	    return this._tint;
	  };
	
	  /**
	   * Sets the tint color
	   * @param {Number} tint
	   */
	
	
	  DisplayObject.prototype.setTint = function setTint(tint) {
	    this._tint = tint;
	  };
	
	  /**
	   * Checks whether this object is currently visible
	   * @return {Boolean} [description]
	   */
	
	
	  DisplayObject.prototype.isVisible = function isVisible() {
	    return this._visible;
	  };
	
	  /**
	   * Sets this object's visibility
	   * @param {Boolean} visible
	   */
	
	
	  DisplayObject.prototype.setVisible = function setVisible(visible) {
	    this._visible = visible;
	  };
	
	  return DisplayObject;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = DisplayObject;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	var _canvasRenderTarget = __webpack_require__(29);
	
	var _canvasRenderTarget2 = _interopRequireDefault(_canvasRenderTarget);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Manages the filters for a {@link PhotoEditorSDK.Engine.CanvasRenderer}
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var CanvasFilterManager = function () {
	  function CanvasFilterManager(renderer) {
	    (0, _classCallCheck3.default)(this, CanvasFilterManager);
	
	    this._renderer = renderer;
	    this._filterStack = [{
	      renderTarget: renderer.getCurrentRenderTarget(),
	      filters: []
	    }];
	
	    this._currentFrame = null;
	    this._textures = [];
	    this._textureFrame = new _globals.Rectangle(0, 0, renderer.getWidth(), renderer.getHeight());
	  }
	
	  /**
	   * Resizes this FilterManager and its textures to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  CanvasFilterManager.prototype.resizeTo = function resizeTo(dimensions) {
	    this._textureFrame.width = dimensions.x;
	    this._textureFrame.height = dimensions.y;
	
	    this._textures.forEach(function (texture) {
	      return texture.resizeTo(dimensions);
	    });
	  };
	
	  /**
	   * Pushes the given filters to the
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @param  {Array.<Filter>} filters
	   */
	
	
	  CanvasFilterManager.prototype.pushFilters = function pushFilters(displayObject, filters) {
	    var bounds = displayObject.getBounds();
	    this._currentFrame = bounds;
	
	    var renderTarget = this._getOrCreateRenderTarget();
	    this._renderer.setRenderTarget(renderTarget);
	    this._filterStack.push({ renderTarget: renderTarget, filters: filters });
	  };
	
	  /**
	   * Removes, applies and returns the last filters from the stack
	   * @return {Object}
	   */
	
	
	  CanvasFilterManager.prototype.popFilters = function popFilters() {
	    var _filterStack$pop = this._filterStack.pop();
	
	    var filters = _filterStack$pop.filters;
	    var renderTarget = _filterStack$pop.renderTarget;
	
	    var lastFilter = this._filterStack[this._filterStack.length - 1];
	
	    var inputRenderTarget = renderTarget;
	    var outputRenderTarget = lastFilter.renderTarget;
	
	    if (filters.length === 1) {
	      filters[0].apply(this._renderer, inputRenderTarget, outputRenderTarget);
	      this._textures.push(inputRenderTarget);
	    } else {
	      this._applyFilters(filters, inputRenderTarget, outputRenderTarget);
	    }
	    return filters;
	  };
	
	  /**
	   * Applies the given filters to the given inputRenderTarget and outputs
	   * the filtered content to the outputRenderTarget
	   * @param  {PhotoEditorSDK.Engine.Filter[]} filters
	   * @param  {PhotoEditorSDK.Engine.CanvasRenderTarget} inputRenderTarget
	   * @param  {PhotoEditorSDK.Engine.CanvasRenderTarget} outputRenderTarget
	   * @private
	   */
	
	
	  CanvasFilterManager.prototype._applyFilters = function _applyFilters(filters, inputRenderTarget, outputRenderTarget) {
	    var _this = this;
	
	    var flipRenderTarget = inputRenderTarget;
	    var flopRenderTarget = this._getOrCreateRenderTarget(true);
	
	    var lastFilter = filters[filters.length - 1];
	    filters.forEach(function (filter, i) {
	      var isLastFilter = filter === lastFilter;
	
	      if (!isLastFilter) {
	        // Render from flip to flop with filter
	        filter.apply(_this._renderer, flipRenderTarget, flopRenderTarget);
	
	        // Flip the render buffers
	        var temp = flipRenderTarget;
	        flipRenderTarget = flopRenderTarget;
	        flopRenderTarget = temp;
	      } else {
	        // Render to output
	        filter.apply(_this._renderer, flipRenderTarget, outputRenderTarget);
	      }
	    });
	
	    // Push the textures back into the texture pool to use them again later
	    this._textures.push(flipRenderTarget);
	    this._textures.push(flopRenderTarget);
	  };
	
	  /**
	   * Returns a render buffer from the pool or creates a new one
	   * @param  {Boolean} clear
	   * @return {PhotoEditorSDK.Engine.RenderTexture}
	   * @private
	   */
	
	
	  CanvasFilterManager.prototype._getOrCreateRenderTarget = function _getOrCreateRenderTarget(clear) {
	    var renderTarget = this._textures.pop();
	    if (!renderTarget) {
	      renderTarget = new _canvasRenderTarget2.default(this._textureFrame.width, this._textureFrame.height, this._renderer.getPixelRatio());
	    }
	
	    if (clear) {
	      renderTarget.clear();
	    }
	
	    return renderTarget;
	  };
	
	  /**
	   * Sets the filter stack to the given stack
	   * @param {Object[]} filterStack
	   */
	
	
	  CanvasFilterManager.prototype.setFilterStack = function setFilterStack(filterStack) {
	    this._filterStack = filterStack;
	  };
	
	  /**
	   * Disposes this CanvasFilterManager
	   */
	
	
	  CanvasFilterManager.prototype.dispose = function dispose() {};
	
	  return CanvasFilterManager;
	}();
	
	exports.default = CanvasFilterManager;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	var _webglRenderTarget = __webpack_require__(30);
	
	var _webglRenderTarget2 = _interopRequireDefault(_webglRenderTarget);
	
	var _quad = __webpack_require__(103);
	
	var _quad2 = _interopRequireDefault(_quad);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Manages the filters for a {@link PhotoEditorSDK.Engine.WebGLRenderer}
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	
	var WebGLFilterManager = function () {
	  function WebGLFilterManager(renderer) {
	    (0, _classCallCheck3.default)(this, WebGLFilterManager);
	
	    this._renderer = renderer;
	    this._filterStack = [{
	      renderTarget: renderer.getCurrentRenderTarget(),
	      filters: []
	    }];
	
	    this._currentFrame = null;
	    this._textures = [];
	    this._textureFrame = new _globals.Rectangle(0, 0, renderer.getWidth(), renderer.getHeight());
	
	    this._onContextChange = this._onContextChange.bind(this);
	    this._renderer.on('context', this._onContextChange);
	
	    // Initial context
	    this._onContextChange();
	  }
	
	  /**
	   * Resizes this FilterManager and its textures to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  WebGLFilterManager.prototype.resizeTo = function resizeTo(dimensions) {
	    this._textureFrame.width = dimensions.x;
	    this._textureFrame.height = dimensions.y;
	
	    this._textures.forEach(function (texture) {
	      return texture.resizeTo(dimensions);
	    });
	  };
	
	  /**
	   * Sets the filter stack to the given stack
	   * @param {Object[]} filterStack
	   */
	
	
	  WebGLFilterManager.prototype.setFilterStack = function setFilterStack(filterStack) {
	    this._filterStack = filterStack;
	  };
	
	  /**
	   * Returns a render target from the pool or creates a new one
	   * @param  {Boolean} clear
	   * @return {PhotoEditorSDK.Engine.WebGLRenderTarget}
	   * @private
	   */
	
	
	  WebGLFilterManager.prototype._getOrCreateRenderTarget = function _getOrCreateRenderTarget(clear) {
	    var renderTarget = this._textures.pop();
	    if (!renderTarget) {
	      renderTarget = new _webglRenderTarget2.default(this._renderer, this._textureFrame.width, this._textureFrame.height, this._renderer.getPixelRatio());
	    }
	    renderTarget.setFrame(this._currentFrame);
	
	    if (clear) {
	      renderTarget.clear();
	    }
	
	    return renderTarget;
	  };
	
	  /**
	   * Pushes the given filters to the
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @param  {PhotoEditorSDK.Engine.Filter[]} filters
	   */
	
	
	  WebGLFilterManager.prototype.pushFilters = function pushFilters(displayObject, filters) {
	    var bounds = displayObject.getBounds();
	    this._currentFrame = bounds;
	
	    var renderTarget = this._getOrCreateRenderTarget();
	    this._renderer.setRenderTarget(renderTarget);
	    renderTarget.clear();
	
	    this._filterStack.push({ renderTarget: renderTarget, filters: filters });
	  };
	
	  /**
	   * Removes, applies and returns the last filters from the stack
	   * @return {Object}
	   */
	
	
	  WebGLFilterManager.prototype.popFilters = function popFilters() {
	    var _filterStack$pop = this._filterStack.pop();
	
	    var filters = _filterStack$pop.filters;
	    var renderTarget = _filterStack$pop.renderTarget;
	
	    var lastFilter = this._filterStack[this._filterStack.length - 1];
	
	    var inputRenderTarget = renderTarget;
	    var outputRenderTarget = lastFilter.renderTarget;
	
	    // Update the Quad's buffers
	    this._quad.map(this._textureFrame, inputRenderTarget.getFrame());
	
	    var shader = filters[0].getShaderForRenderer(this._renderer);
	    var vertexBuffer = this._quad.getVertexBuffer();
	    var indexBuffer = this._quad.getIndexBuffer();
	
	    var gl = this._renderer.getContext();
	    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	
	    var attributeLocations = shader.getAttributeLocations();
	    gl.vertexAttribPointer(attributeLocations.a_position, 2, gl.FLOAT, false, 0, 0);
	    gl.vertexAttribPointer(attributeLocations.a_texCoord, 2, gl.FLOAT, false, 0, 2 * 4 * 4);
	    gl.vertexAttribPointer(attributeLocations.a_color, 4, gl.FLOAT, false, 0, 4 * 4 * 4);
	
	    if (filters.length === 1) {
	      filters[0].apply(this._renderer, inputRenderTarget, outputRenderTarget);
	      this._textures.push(inputRenderTarget);
	    } else {
	      this._applyFilters(filters, inputRenderTarget, outputRenderTarget);
	    }
	
	    return filters;
	  };
	
	  /**
	   * Applies the given filters to the given inputRenderTarget and outputs
	   * the filtered content to the outputRenderTarget
	   * @param  {PhotoEditorSDK.Engine.Filter[]} filters
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderTarget} inputRenderTarget
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderTarget} outputRenderTarget
	   */
	
	
	  WebGLFilterManager.prototype._applyFilters = function _applyFilters(filters, inputRenderTarget, outputRenderTarget) {
	    var _this = this;
	
	    var flipRenderTarget = inputRenderTarget;
	    var flopRenderTarget = this._getOrCreateRenderTarget(true);
	
	    var lastFilter = filters[filters.length - 1];
	    filters.forEach(function (filter, i) {
	      var isLastFilter = filter === lastFilter;
	
	      if (!isLastFilter) {
	        // Render from flip to flop with filter
	        filter.apply(_this._renderer, flipRenderTarget, flopRenderTarget);
	
	        // Flip the render targets
	        var temp = flipRenderTarget;
	        flipRenderTarget = flopRenderTarget;
	        flopRenderTarget = temp;
	      } else {
	        // Render to output
	        filter.apply(_this._renderer, flipRenderTarget, outputRenderTarget);
	      }
	    });
	
	    // Push the textures back into the texture pool to use them again later
	    this._textures.push(flipRenderTarget);
	    this._textures.push(flopRenderTarget);
	  };
	
	  /**
	   * Gets called when the WebGL context has been changed
	   * @private
	   */
	
	
	  WebGLFilterManager.prototype._onContextChange = function _onContextChange() {
	    this._textures.length = 0;
	    /* istanbul ignore next */
	    if (this._renderer.isOfType('webgl')) {
	      this._quad = new _quad2.default(this._renderer);
	    }
	  };
	
	  /**
	   * Disposes this WebGLFilterManager
	   */
	
	
	  WebGLFilterManager.prototype.dispose = function dispose() {
	    this._renderer.off('context', this._onContextChange);
	    if (this._quad) {
	      this._quad.dispose();
	    }
	  };
	
	  return WebGLFilterManager;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = WebGLFilterManager;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	var _globals2 = _interopRequireDefault(_globals);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Log = _globals2.default.Log;
	
	/**
	 * Represents a WebGL shader with a vertex shader, a fragment shader, uniforms and attributes
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Shader = function () {
	  /**
	   * Creates a Shader
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @param  {String} vertexSource
	   * @param  {String} fragmentSource
	   * @param  {Object} uniforms
	   * @param  {String[]} attributes
	   */
	
	  function Shader(renderer, vertexSource, fragmentSource, uniforms, attributes) {
	    (0, _classCallCheck3.default)(this, Shader);
	
	    this._renderer = renderer;
	    this._vertexSource = vertexSource;
	    this._fragmentSource = fragmentSource;
	    this._uniforms = uniforms || {};
	    this._uniformLocations = {};
	    this._attributes = attributes || [];
	    this._attributeLocations = {};
	
	    this._onContextChange = this._onContextChange.bind(this);
	    this._renderer.on('context', this._onContextChange);
	
	    this._init();
	  }
	
	  /**
	   * Compiles this shader and caches the uniform locations
	   * @private
	   */
	
	
	  Shader.prototype._init = function _init() {
	    this._compile();
	
	    var gl = this._renderer.getContext();
	    gl.useProgram(this._program);
	
	    this._cacheUniformLocations();
	    this._cacheAttributeLocations();
	  };
	
	  /**
	   * Gets called when the attached Renderer changes its context
	   * @private
	   */
	
	
	  Shader.prototype._onContextChange = function _onContextChange() {
	    this._init();
	  };
	
	  /**
	   * Binds the given buffers for this shader
	   * @param {WebGLBuffer} vertexBuffer
	   * @param {WebGLBuffer} indexBuffer
	   */
	
	
	  Shader.prototype.setupBuffers = function setupBuffers(vertexBuffer, indexBuffer) {
	    var gl = this._renderer.getContext();
	    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
	
	    gl.vertexAttribPointer(this._attributeLocations.a_position, 2, gl.FLOAT, false, _globals2.default.VERTEX_BYTE_SIZE, 0);
	    gl.vertexAttribPointer(this._attributeLocations.a_texCoord, 2, gl.FLOAT, false, _globals2.default.VERTEX_BYTE_SIZE, 2 * 4);
	    gl.vertexAttribPointer(this._attributeLocations.a_color, 4, gl.UNSIGNED_BYTE, true, _globals2.default.VERTEX_BYTE_SIZE, 4 * 4);
	  };
	
	  /**
	   * Synchronizes all uniforms with WebGL
	   */
	
	
	  Shader.prototype.syncUniforms = function syncUniforms() {
	    var _this = this;
	
	    Object.keys(this._uniforms).forEach(function (key) {
	      _this.syncUniform(key);
	    });
	  };
	
	  /**
	   * Synchronizes the uniform with the given name
	   * @param  {String} name
	   */
	
	
	  Shader.prototype.syncUniform = function syncUniform(name) {
	    var gl = this._renderer.getContext();
	    var uniform = this._uniforms[name];
	    var location = this._uniformLocations[name];
	
	    switch (uniform.type) {
	      case 'sampler2d':
	      case 'i':
	      case '1i':
	        gl.uniform1i(location, uniform.value);
	        break;
	      case 'f':
	      case '1f':
	        gl.uniform1f(location, uniform.value);
	        break;
	      case '2f':
	        gl.uniform2f(location, uniform.value[0], uniform.value[1]);
	        break;
	      case '3f':
	        gl.uniform3f(location, uniform.value[0], uniform.value[1], uniform.value[2]);
	        break;
	      case '4f':
	        gl.uniform4f(location, uniform.value[0], uniform.value[1], uniform.value[2], uniform.value[3]);
	        break;
	      case '2fv':
	        gl.uniform2fv(location, uniform.value);
	        break;
	      case 'mat3':
	      case 'mat3fv':
	        gl.uniformMatrix3fv(location, false, uniform.value);
	        break;
	      default:
	        Log.warn(this.constructor.name, 'Unknown uniform type: ' + uniform.type);
	    }
	  };
	
	  /**
	   * Caches the locations for all attributes
	   * @private
	   */
	
	
	  Shader.prototype._cacheAttributeLocations = function _cacheAttributeLocations() {
	    var _this2 = this;
	
	    var gl = this._renderer.getContext();
	    this._attributes.forEach(function (name) {
	      _this2._attributeLocations[name] = gl.getAttribLocation(_this2._program, name);
	    });
	  };
	
	  /**
	   * Caches the locations for all uniforms
	   * @private
	   */
	
	
	  Shader.prototype._cacheUniformLocations = function _cacheUniformLocations() {
	    var _this3 = this;
	
	    var gl = this._renderer.getContext();
	    var keys = Object.keys(this._uniforms);
	    keys.forEach(function (key) {
	      _this3._uniformLocations[key] = gl.getUniformLocation(_this3._program, key);
	    });
	  };
	
	  /**
	   * Compiles the vertex and fragment sources of this shader
	   * @private
	   */
	
	
	  Shader.prototype._compile = function _compile() {
	    var gl = this._renderer.getContext();
	
	    var vertexShader = this._compileShader(gl.VERTEX_SHADER, this._vertexSource);
	    var fragmentShader = this._compileShader(gl.FRAGMENT_SHADER, this._fragmentSource);
	
	    // Create the WebGL program and attach the shaders
	    var program = gl.createProgram();
	    gl.attachShader(program, vertexShader);
	    gl.attachShader(program, fragmentShader);
	
	    // Link the program
	    gl.linkProgram(program);
	
	    // Check linking status
	    // Check linking status
	    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
	    if (!linked) {
	      var errorMessage = gl.getProgramInfoLog(program);
	      if (gl.isContextLost()) errorMessage = 'WebGL context lost';
	      gl.deleteProgram(program);
	      Log.error(this.constructor.name, 'WebGL program linking error: ' + errorMessage);
	    }
	
	    this._program = program;
	  };
	
	  /**
	   * Creates and compiles a shader with the given type and source
	   * @param  {Number} shaderType
	   * @param  {String} shaderSource
	   * @return {WebGLShader}
	   * @private
	   */
	
	
	  Shader.prototype._compileShader = function _compileShader(shaderType, shaderSource) {
	    var gl = this._renderer.getContext();
	
	    // Create the shader and compile it
	    var shader = gl.createShader(shaderType);
	    gl.shaderSource(shader, shaderSource);
	    gl.compileShader(shader);
	
	    // Check compilation status
	    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
	    if (!compiled) {
	      var errorMessage = gl.getShaderInfoLog(shader);
	      if (gl.isContextLost()) errorMessage = 'WebGL context lost';
	      gl.deleteShader(shader);
	      Log.error(this.constructor.name, 'WebGL shader compilation error: ' + errorMessage);
	    }
	
	    return shader;
	  };
	
	  /**
	   * Sets the given uniform to the given value
	   * @param {String} name
	   * @param {*} value
	   * @param {Boolean} sync = false
	   */
	
	
	  Shader.prototype.setUniform = function setUniform(name, value) {
	    var sync = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	    this._uniforms[name].value = value;
	    if (sync) {
	      this.syncUniform(name);
	    }
	  };
	
	  /**
	   * Sets the given uniforms to their values
	   * @param {Object}  uniforms
	   * @param {Boolean} sync = false
	   */
	
	
	  Shader.prototype.setUniforms = function setUniforms(uniforms) {
	    var sync = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    for (var name in uniforms) {
	      this._uniforms[name].value = uniforms[name];
	      if (sync) {
	        this.syncUniform(name);
	      }
	    }
	  };
	
	  /**
	   * Returns the uniforms
	   * @return {Object}
	   */
	
	
	  Shader.prototype.getUniforms = function getUniforms() {
	    return this._uniforms;
	  };
	
	  /**
	   * Returns the attributes
	   * @return {String[]}
	   */
	
	
	  Shader.prototype.getAttributes = function getAttributes() {
	    return this._attributes;
	  };
	
	  /**
	   * Returns the attribute locations
	   * @return {Object}
	   */
	
	
	  Shader.prototype.getAttributeLocations = function getAttributeLocations() {
	    return this._attributeLocations;
	  };
	
	  /**
	   * Returns this shader's WebGL program
	   * @return {WebGLProgram}
	   */
	
	
	  Shader.prototype.getProgram = function getProgram() {
	    return this._program;
	  };
	
	  /**
	   * Cleans up this shader
	   */
	
	
	  Shader.prototype.dispose = function dispose() {
	    var gl = this._renderer.getContext();
	    gl.deleteProgram(this._program);
	
	    this._uniforms = null;
	    this._uniformLocations = null;
	    this._attributes = null;
	    this._attributeLocations = null;
	
	    this._renderer.off('context', this._onContextChange);
	  };
	
	  return Shader;
	}();
	
	exports.default = Shader;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _shader = __webpack_require__(44);
	
	var _shader2 = _interopRequireDefault(_shader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The default texture shader
	 * @class
	 * @extends PhotoEditorSDK.Engine.Shader
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var TextureShader = function (_Shader) {
	  (0, _inherits3.default)(TextureShader, _Shader);
	
	  /**
	   * Creates a TextureShader
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @param  {String} vertexSource
	   * @param  {String} fragmentSource
	   */
	
	  function TextureShader(renderer, vertexSource, fragmentSource) {
	    (0, _classCallCheck3.default)(this, TextureShader);
	
	    vertexSource = vertexSource || TextureShader.defaultVertexSource;
	    fragmentSource = fragmentSource || TextureShader.defaultFragmentSource;
	
	    return (0, _possibleConstructorReturn3.default)(this, _Shader.call(this, renderer, vertexSource, fragmentSource, TextureShader.defaultUniforms, TextureShader.defaultAttributes));
	  }
	
	  return TextureShader;
	}(_shader2.default);
	
	/**
	 * The default vertex shader source code
	 * @type {String}
	 */
	
	
	TextureShader.defaultVertexSource = __webpack_require__(208);
	
	/**
	 * The default fragment shader source code
	 * @type {String}
	 */
	TextureShader.defaultFragmentSource = __webpack_require__(207);
	
	var matrix = new _globals.Matrix();
	
	/**
	 * The default uniforms
	 * @type {Object}
	 */
	TextureShader.defaultUniforms = {
	  u_image: {
	    type: 'sampler2d',
	    value: 0
	  },
	  u_projMatrix: {
	    type: 'mat3',
	    value: matrix.toArray()
	  }
	};
	
	/**
	 * The default WebGL attributes
	 * @type {String[]}
	 */
	TextureShader.defaultAttributes = ['a_position', 'a_texCoord', 'a_color'];
	
	exports.default = TextureShader;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A BaseTexture holds and handles the raw source of a texture
	 * @class
	 * @extends EventEmitter
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var BaseTexture = function (_EventEmitter) {
	  (0, _inherits3.default)(BaseTexture, _EventEmitter);
	
	  /**
	   * Creates a BaseTexture
	   * @param  {*} source
	   */
	
	  function BaseTexture(source) {
	    (0, _classCallCheck3.default)(this, BaseTexture);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._onSourceLoaded = _this._onSourceLoaded.bind(_this);
	
	    _this._glTextures = {};
	    _this._source = source;
	
	    _this._glUnit = 0;
	    _this._mipMapping = false;
	    _this._magFilter = BaseTexture.NearestFilter;
	    _this._minFilter = BaseTexture.LinearFilter;
	    _this._pixelRatio = 1;
	    _this._loaded = false;
	    _this._frame = new _globals.Rectangle(0, 0, 100, 100);
	
	    if (source) {
	      _this._loadSource();
	    }
	    return _this;
	  }
	
	  /**
	   * Resizes this BaseTexture to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  BaseTexture.prototype.resizeTo = function resizeTo(dimensions) {
	    this._frame.width = dimensions.x;
	    this._frame.height = dimensions.y;
	  };
	
	  /**
	   * Loads the source
	   * @private
	   */
	
	
	  BaseTexture.prototype._loadSource = function _loadSource() {
	    var source = this._source;
	
	    var sourceLoaded = source.complete;
	    var sourceIsCanvas = source.constructor.name === 'Canvas' || source.tagName && source.tagName.toUpperCase() === 'CANVAS';
	    if (sourceLoaded || sourceIsCanvas) {
	      return this._onSourceLoaded();
	    }
	
	    source.addEventListener('load', this._onSourceLoaded);
	  };
	
	  /**
	   * Gets called when the source of this BaseTexture has been loaded
	   * @private
	   */
	
	
	  BaseTexture.prototype._onSourceLoaded = function _onSourceLoaded() {
	    this._loaded = true;
	    this._updateGLFilters();
	    this.emit('loaded');
	    this.update();
	  };
	
	  /**
	   * If mip-mapping is available, update GL filters accordingly
	   * @private
	   */
	
	
	  BaseTexture.prototype._updateGLFilters = function _updateGLFilters() {
	    var sourceDimensions = new _globals.Vector2(this._source.width, this._source.height);
	    if (_globals.Utils.isPowerOfTwo(sourceDimensions)) {
	      _globals.Log.info(this.constructor.name, 'Mip-mapping enabled');
	      this._minFilter = BaseTexture.BilinearFilter;
	      this._mipMapping = true;
	    }
	  };
	
	  /**
	   * Updates the cached dimensions of this BaseTexture's source
	   */
	
	
	  BaseTexture.prototype.update = function update() {
	    this._frame = new _globals.Rectangle(0, 0, this._source.width, this._source.height);
	    this.emit('update');
	  };
	
	  /**
	   * Returns the filter for the given direction from the given WebGL context
	   * @param  {WebGLRenderingContext} gl
	   * @param  {String} minOrMag
	   * @return {Number}
	   */
	
	
	  BaseTexture.prototype.getGLFilter = function getGLFilter(gl, minOrMag) {
	    var filter = function filter(value) {
	      switch (value) {
	        case BaseTexture.LinearFilter:
	          return gl.LINEAR;
	        case BaseTexture.NearestFilter:
	          return gl.NEAREST;
	        case BaseTexture.BilinearFilter:
	          return gl.LINEAR_MIPMAP_NEAREST;
	        case BaseTexture.TrilinearFilter:
	          return gl.LINEAR_MIPMAP_LINEAR;
	      }
	    };
	
	    switch (minOrMag) {
	      case 'min':
	        return filter(this._minFilter);
	      case 'mag':
	        return filter(this._magFilter);
	    }
	  };
	
	  /**
	   * Checks if this BaseTexture has been loaded
	   * @return {Boolean}
	   */
	
	
	  BaseTexture.prototype.isLoaded = function isLoaded() {
	    return this._loaded;
	  };
	
	  /**
	   * Sets the loaded state
	   * @param {Boolean} loaded
	   */
	
	
	  BaseTexture.prototype.setLoaded = function setLoaded(loaded) {
	    this._loaded = loaded;
	  };
	
	  /**
	   * Returns the source
	   * @return {*} s
	   */
	
	
	  BaseTexture.prototype.getSource = function getSource() {
	    return this._source;
	  };
	
	  /**
	   * Sets the source
	   * @param {*} source
	   */
	
	
	  BaseTexture.prototype.setSource = function setSource(source) {
	    this._source = source;
	  };
	
	  /**
	   * Returns the WebGL texture for the given renderer ID
	   * @param  {Number} id
	   * @return {WebGLTexture}
	   */
	
	
	  BaseTexture.prototype.getGLTextureForId = function getGLTextureForId(id) {
	    return this._glTextures[id];
	  };
	
	  /**
	   * Sets the WebGLTexture for the given renderer ID
	   * @param {WebGLTexture} texture
	   * @param {Number} id
	   */
	
	
	  BaseTexture.prototype.setGLTextureForId = function setGLTextureForId(texture, id) {
	    this._glTextures[id] = texture;
	  };
	
	  /**
	   * Returns the frame
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  BaseTexture.prototype.getFrame = function getFrame() {
	    return this._frame;
	  };
	
	  /**
	   * Sets the frame
	   * @param {PhotoEditorSDK.Math.Rectangle} frame
	   */
	
	
	  BaseTexture.prototype.setFrame = function setFrame(frame) {
	    this._frame = frame;
	  };
	
	  /**
	   * Returns the pixel ratio
	   * @return {Number}
	   */
	
	
	  BaseTexture.prototype.getPixelRatio = function getPixelRatio() {
	    return this._pixelRatio;
	  };
	
	  /**
	   * Sets the pixel ratio
	   * @param {Number} pixelRatio
	   */
	
	
	  BaseTexture.prototype.setPixelRatio = function setPixelRatio(pixelRatio) {
	    this._pixelRatio = pixelRatio;
	  };
	
	  /**
	   * Returns the WebGL texture unit
	   * @return {Number}
	   */
	
	
	  BaseTexture.prototype.getGLUnit = function getGLUnit() {
	    return this._glUnit;
	  };
	
	  /**
	   * Sets the WebGL texture unit
	   * @param {Number} glUnit
	   */
	
	
	  BaseTexture.prototype.setGLUnit = function setGLUnit(glUnit) {
	    this._glUnit = glUnit;
	  };
	
	  /**
	   * Sets the min filter to the given one
	   * @param {Number} minFilter
	   */
	
	
	  BaseTexture.prototype.setMinFilter = function setMinFilter(minFilter) {
	    this._minFilter = minFilter;
	  };
	
	  /**
	   * Returns this texture's min filter
	   * @return {Number}
	   */
	
	
	  BaseTexture.prototype.getMinFilter = function getMinFilter() {
	    return this._minFilter;
	  };
	
	  /**
	   * Sets the mag filter to the given one
	   * @param {Number} magFilter
	   */
	
	
	  BaseTexture.prototype.setMagFilter = function setMagFilter(magFilter) {
	    this._magFilter = magFilter;
	  };
	
	  /**
	   * Returns this texture's mag filter
	   * @return {Number}
	   */
	
	
	  BaseTexture.prototype.getMagFilter = function getMagFilter() {
	    return this._magFilter;
	  };
	
	  /**
	   * Disposes the WebGL textures for the given renderer ID
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   */
	  /* istanbul ignore next */
	
	
	  BaseTexture.prototype.disposeGLTextures = function disposeGLTextures(renderer) {
	    if (renderer.isOfType('webgl')) {
	      var gl = renderer.getContext();
	      gl.deleteTexture(this._glTextures[gl.id]);
	      delete this._glTextures[gl.id];
	    }
	  };
	
	  /**
	   * Checks if mip-mapping is enabled for this texture
	   * @return {Boolean}
	   */
	
	
	  BaseTexture.prototype.isMipMappingEnabled = function isMipMappingEnabled() {
	    return this._mipMapping;
	  };
	
	  /**
	   * Cleans up this object
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   */
	
	
	  BaseTexture.prototype.dispose = function dispose(renderer) {
	    this.disposeGLTextures(renderer);
	  };
	
	  return BaseTexture;
	}(_globals.EventEmitter); /*
	                           * This file is part of PhotoEditorSDK.
	                           *
	                           * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                           * All rights reserved.
	                           *
	                           * Redistribution and use in source and binary forms, without
	                           * modification, are permitted provided that the following license agreement
	                           * is approved and a legal/financial contract was signed by the user.
	                           * The license agreement can be found under following link:
	                           *
	                           * https://www.photoeditorsdk.com/LICENSE.txt
	                           */
	
	BaseTexture.NearestFilter = 0;
	BaseTexture.LinearFilter = 1;
	BaseTexture.BilinearFilter = 2;
	BaseTexture.TrilinearFilter = 3;
	
	exports.default = BaseTexture;

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Sprite = function (_Configurable) {
	  (0, _inherits3.default)(Sprite, _Configurable);
	
	  function Sprite(operation, options) {
	    (0, _classCallCheck3.default)(this, Sprite);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Configurable.call(this, options));
	
	    _this._operation = operation;
	    _this._dirtiness = {};
	    _this.id = _globals.Utils.getUUID();
	
	    _this._identitySprite = new _globals.Engine.Sprite();
	    _this._sprite = new _globals.Engine.Sprite();
	
	    if (_this._options.adjustments) {
	      _this._onOptionsChange = _this._onOptionsChange.bind(_this);
	      _this._options.adjustments.on('updated', _this._onOptionsChange);
	    }
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when options have been changed. Sets this operation to dirty.
	   * @private
	   */
	
	
	  Sprite.prototype._onOptionsChange = function _onOptionsChange() {
	    var dirtiness = this._dirtiness;
	    for (var id in dirtiness) {
	      dirtiness[id] = true;
	    }
	  };
	
	  /**
	   * Returns the DisplayObject of this Sprite
	   * @return {PhotoEditorSDK.Engine.Sprite}
	   */
	
	
	  Sprite.prototype.getDisplayObject = function getDisplayObject() {
	    return this._sprite;
	  };
	
	  /**
	   * Renders this sprite
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   */
	
	
	  Sprite.prototype.update = function update(sdk) {
	    this._sprite.setAnchor(this._options.anchor);
	    this._sprite.setPosition(this._options.position.clone());
	
	    if (this._options.scale) {
	      this._sprite.setScale(this._options.scale.clone());
	    }
	    this._sprite.updateTransform();
	
	    var frame = this._sprite.getTexture().getFrame();
	    var spriteDimensions = new _globals.Vector2(frame.width, frame.height);
	
	    this._sprite.setPivot(this._options.pivot.clone().multiply(spriteDimensions));
	    this._sprite.setRotation(this._options.rotation);
	
	    return _globals.Promise.resolve();
	  };
	
	  /**
	   * Applies a flip in the given direction
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {String} direction
	   */
	
	
	  Sprite.prototype.applyFlip = function applyFlip(sdk, direction) {
	    var finalDimensions = sdk.getFinalDimensions();
	    var position = this._options.position;
	    switch (direction) {
	      case 'horizontal':
	        position.x = finalDimensions.x - position.x;
	        this.set({
	          flipHorizontally: !this._options.flipHorizontally,
	          position: position
	        });
	        break;
	      case 'vertical':
	        position.y = finalDimensions.y - position.y;
	        this.set({
	          flipVertically: !this._options.flipVertically,
	          position: position
	        });
	        break;
	    }
	  };
	
	  /**
	   * Checks if this operation is dirty for the given renderer
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer}  renderer
	   * @return {Boolean}
	   */
	
	
	  Sprite.prototype.isDirtyForRenderer = function isDirtyForRenderer(renderer) {
	    if (!(renderer.id in this._dirtiness)) {
	      this._dirtiness[renderer.id] = true;
	    }
	    return this._dirtiness[renderer.id];
	  };
	
	  /**
	   * Sets the dirtiness for the given renderer
	   * @param {Boolean} dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   */
	
	
	  Sprite.prototype.setDirtyForRenderer = function setDirtyForRenderer(dirty, renderer) {
	    this._dirtiness[renderer.id] = dirty;
	  };
	
	  /**
	   * Sets the dirtiness for all renderers
	   * @param {Boolean} dirty
	   */
	
	
	  Sprite.prototype.setDirty = function setDirty(dirty) {
	    for (var rendererId in this._dirtiness) {
	      this._dirtiness[rendererId] = dirty;
	    }
	  };
	
	  /**
	   * Cleans up this Sprite
	   */
	
	
	  Sprite.prototype.dispose = function dispose() {
	    if (this._options.adjustments) {
	      this._options.adjustments.off('updated', this._onOptionsChange);
	    }
	  };
	
	  return Sprite;
	}(_globals.Configurable); /*
	                           * This file is part of PhotoEditorSDK.
	                           *
	                           * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                           * All rights reserved.
	                           *
	                           * Redistribution and use in source and binary forms, without
	                           * modification, are permitted provided that the following license agreement
	                           * is approved and a legal/financial contract was signed by the user.
	                           * The license agreement can be found under following link:
	                           *
	                           * https://www.photoeditorsdk.com/LICENSE.txt
	                           */
	
	exports.default = Sprite;

/***/ },
/* 48 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 49 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 50 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 51 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(25)
	  , dPs         = __webpack_require__(189)
	  , enumBugKeys = __webpack_require__(49)
	  , IE_PROTO    = __webpack_require__(55)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(85)('iframe')
	    , i      = enumBugKeys.length
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(182).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(15).f
	  , has = __webpack_require__(14)
	  , TAG = __webpack_require__(20)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(56)('keys')
	  , uid    = __webpack_require__(36);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(11)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 57 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(27);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(11)
	  , core           = __webpack_require__(18)
	  , LIBRARY        = __webpack_require__(51)
	  , wksExt         = __webpack_require__(60)
	  , defineProperty = __webpack_require__(15).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(20);

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(37).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(61).setImmediate, __webpack_require__(61).clearImmediate))

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Matrix = exports.Rectangle = exports.Vector2 = undefined;
	
	var _vector = __webpack_require__(23);
	
	var _vector2 = _interopRequireDefault(_vector);
	
	var _rectangle = __webpack_require__(74);
	
	var _rectangle2 = _interopRequireDefault(_rectangle);
	
	var _matrix = __webpack_require__(73);
	
	var _matrix2 = _interopRequireDefault(_matrix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Some classes that help us do the math
	 * @namespace PhotoEditorSDK.Math
	 */
	exports.Vector2 = _vector2.default;
	exports.Rectangle = _rectangle2.default;
	exports.Matrix = _matrix2.default; /*
	                                    * This file is part of PhotoEditorSDK.
	                                    *
	                                    * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                                    * All rights reserved.
	                                    *
	                                    * Redistribution and use in source and binary forms, without
	                                    * modification, are permitted provided that the following license agreement
	                                    * is approved and a legal/financial contract was signed by the user.
	                                    * The license agreement can be found under following link:
	                                    *
	                                    * https://www.photoeditorsdk.com/LICENSE.txt
	                                    */

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _eventEmitter = __webpack_require__(21);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Holds an array of {@link PhotoEditorSDK.Operation} instances and handles their dirtiness
	 * @class
	 * @memberof PhotoEditorSDK
	 */
	
	var OperationsStack = function (_EventEmitter) {
	  (0, _inherits3.default)(OperationsStack, _EventEmitter);
	
	  /**
	   * Creates an OperationsStack
	   * @param  {PhotoEditorSDK.Operation[]} [operations = []]
	   */
	
	  function OperationsStack() {
	    var operations = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	    (0, _classCallCheck3.default)(this, OperationsStack);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	
	    _this._stack = operations;
	    _this._stack.forEach(function (operation) {
	      operation.on('update', _this._onOperationUpdate);
	    });
	    return _this;
	  }
	
	  /**
	   * Clears this operations stack
	   */
	
	
	  OperationsStack.prototype.clear = function clear() {
	    var _this2 = this;
	
	    this.forEach(function (operation) {
	      return _this2.remove(operation);
	    });
	    this._stack = [];
	  };
	
	  /**
	   * Gets called when an operation is about to be updated
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  OperationsStack.prototype._onOperationUpdate = function _onOperationUpdate(operation, options) {
	    this.emit(_globals.Constants.Events.OPERATION_UPDATED, operation, options);
	  };
	
	  /**
	   * Passes Array#forEach
	   * @param  {Function} iterator
	   * @return {Array}
	   */
	
	
	  OperationsStack.prototype.forEach = function forEach(iterator) {
	    return this._stack.filter(function (op) {
	      return !!op;
	    }).forEach(iterator);
	  };
	
	  /**
	   * Renders all operations
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   */
	
	
	  OperationsStack.prototype.render = function render(sdk) {
	    var operations = this._stack.filter(function (op) {
	      return !!op;
	    });
	
	    // Find first operation from end of array that is not dirty
	    operations.reverse();
	    var firstUndirtyOperation = operations.filter(function (o) {
	      return !o.isDirtyForRenderer(sdk.getRenderer());
	    })[0];
	    var firstUndirtyIndex = operations.indexOf(firstUndirtyOperation);
	
	    operations.reverse();
	
	    // Skip operations that would be overwritten by succeeding operations
	    var startIndex = 0;
	    if (firstUndirtyIndex !== -1) {
	      startIndex = operations.length - firstUndirtyIndex - 1;
	    }
	
	    for (var index = 0; index < startIndex; index++) {
	      _globals.Log.info(this.constructor.name, 'Skipping ' + operations[index].constructor.name);
	    }
	
	    var promise = _promise2.default.resolve();
	
	    var _loop = function _loop(_index) {
	      var operation = operations[_index];
	      promise = promise.then(function () {
	        return operation.render(sdk);
	      });
	    };
	
	    for (var _index = startIndex; _index < operations.length; _index++) {
	      _loop(_index);
	    }
	
	    return promise;
	  };
	
	  /**
	   * Validates the settings of all operations
	   * @return {Promise}
	   */
	
	
	  OperationsStack.prototype.validateSettings = function validateSettings() {
	    return _promise2.default.all(this._stack.filter(function (op) {
	      return !!op;
	    }).map(function (op) {
	      return op.validateSettings();
	    }));
	  };
	
	  /**
	   * Sets all operations to dirty
	   */
	
	
	  OperationsStack.prototype.setAllToDirty = function setAllToDirty() {
	    this.forEach(function (op) {
	      return op.setDirty(true);
	    });
	  };
	
	  /**
	   * Finds the first dirty operation and sets all following operations to dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   */
	
	
	  OperationsStack.prototype.updateDirtinessForRenderer = function updateDirtinessForRenderer(renderer) {
	    var dirtyFound = false;
	    for (var i = 0; i < this._stack.length; i++) {
	      var _operation = this._stack[i];
	      if (!_operation) continue;
	      if (_operation.isDirtyForRenderer(renderer)) {
	        dirtyFound = true;
	      }
	
	      if (dirtyFound) {
	        _operation.setDirtyForRenderer(true, renderer);
	      }
	    }
	  };
	
	  /**
	   * Adds the given operation to this stack
	   * @return {PhotoEditorSDK.Operation}
	   */
	
	
	  OperationsStack.prototype.push = function push(operation) {
	    this._stack.push(operation);
	    operation.on('update', this._onOperationUpdate);
	  };
	
	  /**
	   * Returns a cloned instance of this stack
	   * @return {PhotoEditorSDK.OperationsStack}
	   */
	
	
	  OperationsStack.prototype.clone = function clone() {
	    return new OperationsStack(this._stack.slice(0));
	  };
	
	  /**
	   * Returns the operation at the given index
	   * @param  {Number} index
	   * @return {PhotoEditorSDK.Operation}
	   */
	
	
	  OperationsStack.prototype.get = function get(index) {
	    return this._stack[index];
	  };
	
	  /**
	   * Sets the operation at the given index to the given one
	   * @param  {Number} index
	   * @param  {PhotoEditorSDK.Operation} operation
	   */
	
	
	  OperationsStack.prototype.set = function set(index, operation) {
	    if (this._stack[index]) {
	      this._stack[index].off('update', this._onOperationUpdate);
	      this._stack[index].dispose();
	    }
	    this._stack[index] = operation;
	    operation.on('update', this._onOperationUpdate);
	  };
	
	  /**
	   * Removes the given operation
	   * @param  {PhotoEditorSDK.Operation} operation
	   */
	
	
	  OperationsStack.prototype.remove = function remove(operation) {
	    var index = this._stack.indexOf(operation);
	    if (index === -1) {
	      return;
	    }
	    if (this._stack[index]) {
	      this._stack[index].off('update', this._onOperationUpdate);
	      this._stack[index].dispose();
	    }
	    this._stack.splice(index, 1);
	  };
	
	  /**
	   * Removes the operation at the given index
	   * @param  {Number} index
	   */
	
	
	  OperationsStack.prototype.removeAt = function removeAt(index) {
	    if (this._stack[index]) {
	      this._stack[index].off('update', this._onOperationUpdate);
	      this._stack[index].dispose();
	    }
	    this._stack[index] = undefined;
	  };
	
	  /**
	   * Returns the stack
	   * @return {PhotoEditorSDK.Operation[]}
	   */
	
	
	  OperationsStack.prototype.getStack = function getStack() {
	    return this._stack;
	  };
	
	  return OperationsStack;
	}(_eventEmitter2.default); /*
	                            * This file is part of PhotoEditorSDK.
	                            *
	                            * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                            * All rights reserved.
	                            *
	                            * Redistribution and use in source and binary forms, without
	                            * modification, are permitted provided that the following license agreement
	                            * is approved and a legal/financial contract was signed by the user.
	                            * The license agreement can be found under following link:
	                            *
	                            * https://www.photoeditorsdk.com/LICENSE.txt
	                            */
	
	exports.default = OperationsStack;

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _filterOperation = __webpack_require__(116);
	
	Object.defineProperty(exports, 'FilterOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_filterOperation).default;
	  }
	});
	
	var _cropOperation = __webpack_require__(115);
	
	Object.defineProperty(exports, 'CropOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_cropOperation).default;
	  }
	});
	
	var _orientationOperation = __webpack_require__(159);
	
	Object.defineProperty(exports, 'OrientationOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_orientationOperation).default;
	  }
	});
	
	var _adjustmentsOperation = __webpack_require__(111);
	
	Object.defineProperty(exports, 'AdjustmentsOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_adjustmentsOperation).default;
	  }
	});
	
	var _linearFocusOperation = __webpack_require__(158);
	
	Object.defineProperty(exports, 'LinearFocusOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_linearFocusOperation).default;
	  }
	});
	
	var _radialFocusOperation = __webpack_require__(160);
	
	Object.defineProperty(exports, 'RadialFocusOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_radialFocusOperation).default;
	  }
	});
	
	var _borderOperation = __webpack_require__(112);
	
	Object.defineProperty(exports, 'BorderOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_borderOperation).default;
	  }
	});
	
	var _spriteOperation = __webpack_require__(161);
	
	Object.defineProperty(exports, 'SpriteOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_spriteOperation).default;
	  }
	});
	
	var _watermarkOperation = __webpack_require__(166);
	
	Object.defineProperty(exports, 'WatermarkOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_watermarkOperation).default;
	  }
	});
	
	var _brushOperation = __webpack_require__(113);
	
	Object.defineProperty(exports, 'BrushOperation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_brushOperation).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 65 */
/***/ function(module, exports) {

	module.exports = {
		"name": "photoeditorsdk",
		"version": "3.2.0",
		"description": "The most comprehensive photo editor SDK for HTML5",
		"repository": "http://github.com/imgly/imgly-sdk-html5",
		"author": "Photo Editor SDK <contact@photoeditorsdk.com>",
		"license": "SEE LICENSE IN LICENSE.md",
		"scripts": {
			"release": "node scripts/release",
			"render-filter-previews": "babel-node scripts/render-filter-previews",
			"release:dry": "ENV=production UPLOAD=false node_modules/.bin/gulp release",
			"test": "node_modules/.bin/mocha",
			"test-webgl": "node_modules/.bin/mocha test-webgl",
			"coveralls": "npm run coverage && cat ./coverage/lcov.info | node_modules/.bin/coveralls && rm -rf ./coverage",
			"coverage": "NODE_ENV=test node_modules/.bin/istanbul cover node_modules/.bin/_mocha -x **/ui/**"
		},
		"devDependencies": {
			"canvas": "^1.3.12",
			"gl": "^3.0.3",
			"babel-core": "^6.6.4",
			"babel-loader": "^6.2.4",
			"babel-plugin-external-helpers-2": "^6.3.13",
			"babel-plugin-transform-es2015-classes": "^6.6.4",
			"babel-plugin-transform-runtime": "^6.6.0",
			"babel-preset-es2015": "^6.6.0",
			"babel-preset-react": "^6.5.0",
			"babel-register": "^6.6.0",
			"babel-runtime": "^6.6.1",
			"chai": "^3.4.0",
			"chai-as-promised": "^5.1.0",
			"classnames": "^2.1.3",
			"compass-mixins": "git://github.com/xzyfer/compass-mixins.git#patch-1",
			"coveralls": "^2.11.2",
			"del": "^2.0.0",
			"gulp": "^3.8.10",
			"gulp-9e-sass-lint": "0.0.8",
			"gulp-changed": "^1.3.0",
			"gulp-github-release": "^1.1.2",
			"gulp-jsdoc3": "^0.2.0",
			"gulp-notify": "^1.3.1",
			"gulp-rename": "~1.2.0",
			"gulp-sass": "^2.0.4",
			"gulp-sequence": "^0.4.1",
			"gulp-sourcemaps": "^1.5.2",
			"gulp-standard": "^6.0.5",
			"gulp-uglify": "^1.4.2",
			"gulp-util": "~2.2.16",
			"gulp-watch": "^4.3.5",
			"gulp-webserver": "^0.9.1",
			"gulp-yuicompressor": "0.0.3",
			"gulp-zip": "^3.2.0",
			"istanbul": "^1.0.0-alpha.2",
			"jaguarjs-jsdoc": "git://github.com/imgly/jaguarjs-jsdoc.git#master",
			"jsdoc": "git://github.com/jsdoc3/jsdoc.git#master",
			"json-loader": "^0.5.2",
			"mocha": "^2.3.3",
			"mocha-lcov-reporter": "0.0.1",
			"performance-now": "^0.2.0",
			"prompt": "^1.0.0",
			"raw-loader": "^0.5.1",
			"react": "^0.14.7",
			"react-dom": "^0.14.7",
			"require-dir": "^0.3.0",
			"run-sequence": "~0.3.6",
			"should": "^4.3.0",
			"sinon": "^1.17.3",
			"sinon-chai": "^2.8.0",
			"transform-loader": "^0.2.2",
			"vinyl-source-stream": "0.1.1",
			"webpack": "^2.1.0-beta.6",
			"webpack-notifier": "^1.2.1",
			"webpack-stream": "^3.2.0"
		},
		"standard": {
			"globals": [
				"describe",
				"context",
				"before",
				"beforeEach",
				"after",
				"afterEach",
				"it",
				"expect"
			]
		}
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _displayObject = __webpack_require__(41);
	
	var _displayObject2 = _interopRequireDefault(_displayObject);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A container for DisplayObject instances
	 * @class
	 * @extends PhotoEditorSDK.Engine.DisplayObject
	 * @memberof PhotoEditorSDK.Engine
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Container = function (_DisplayObject) {
	  (0, _inherits3.default)(Container, _DisplayObject);
	
	  /**
	   * Creates a Container
	   * @override
	   */
	
	  function Container() {
	    (0, _classCallCheck3.default)(this, Container);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _DisplayObject.call.apply(_DisplayObject, [this].concat(args)));
	
	    _this._children = [];
	    _this._filters = [];
	    return _this;
	  }
	
	  /**
	   * Adds the given filter to the filter stack
	   * @param {PhotoEditorSDK.Engine.Filter} filter
	   */
	
	
	  Container.prototype.addFilter = function addFilter(filter) {
	    this._filters.push(filter);
	  };
	
	  /**
	   * Removes the given filter from the filter stack
	   * @param  {PhotoEditorSDK.Engine.Filter} filter
	   * @return {Boolean} - Whether the filter has been removed
	   */
	
	
	  Container.prototype.removeFilter = function removeFilter(filter) {
	    var index = this._filters.indexOf(filter);
	    if (index !== -1) {
	      this._filters.splice(index, 1);
	      return true;
	    }
	    return false;
	  };
	
	  /**
	   * Sets the filters
	   * @param {Array.<PhotoEditorSDK.Engine.Filter>} filters
	   */
	
	
	  Container.prototype.setFilters = function setFilters(filters) {
	    this._filters = filters;
	  };
	
	  /**
	   * Adds the given DisplayObject to the list of children
	   * @param {PhotoEditorSDK.Engine.DisplayObject} child
	   */
	
	
	  Container.prototype.addChild = function addChild(child) {
	    // Remove from previous parent
	    var originalParent = child.getParent();
	    if (originalParent !== null) {
	      originalParent.removeChild(child);
	    }
	    child.setParent(this);
	
	    this._children.push(child);
	  };
	
	  /**
	   * Prepends the given DisplayObject to the list of children
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} child
	   */
	
	
	  Container.prototype.prependChild = function prependChild(child) {
	    // Remove from previous parent
	    var originalParent = child.getParent();
	    if (originalParent !== null) {
	      originalParent.removeChild(child);
	    }
	    child.setParent(this);
	
	    this._children.unshift(child);
	  };
	
	  /**
	   * Checks whether this container has the given child
	   * @param  {PhotoEditorSDK.Engine.DisplayObject}  child
	   * @return {Boolean}
	   */
	
	
	  Container.prototype.hasChild = function hasChild(child) {
	    var index = this._children.indexOf(child);
	    return index !== -1;
	  };
	
	  /**
	   * Removes the given object from the list of children
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} child
	   */
	
	
	  Container.prototype.removeChild = function removeChild(child) {
	    var index = this._children.indexOf(child);
	    if (index !== -1) {
	      this._children.splice(index, 1);
	      child.setParent(null);
	    } else {
	      _globals.Log.info(this.constructor.name, 'Tried to remove a child that does not exist');
	    }
	  };
	
	  /**
	   * Removes all children
	   */
	
	
	  Container.prototype.clearChildren = function clearChildren() {
	    this._children = [];
	  };
	
	  /**
	   * Renders this DisplayObject using the given WebGLRenderer
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   * @override
	   */
	
	
	  Container.prototype.renderWebGL = function renderWebGL(renderer) {
	    if (!this._visible) {
	      return;
	    }
	
	    var filterManager = renderer.getFilterManager();
	    if (this._filters && this._filters.length) {
	      filterManager.pushFilters(this, this._filters);
	    }
	
	    renderer.getCurrentObjectRenderer().start();
	
	    this._renderWebGL(renderer);
	
	    this._children.forEach(function (child) {
	      child.renderWebGL(renderer);
	    });
	
	    renderer.getCurrentObjectRenderer().flush();
	
	    if (this._filters && this._filters.length) {
	      filterManager.popFilters();
	    }
	    renderer.getCurrentObjectRenderer().start();
	  };
	
	  /**
	   * Renders the contents of this container
	   * @param {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   * @protected
	   */
	
	
	  Container.prototype._renderWebGL = function _renderWebGL(renderer) {};
	
	  /**
	   * Renders this DisplayObject using the given CanvasRenderer
	   * @param  {PhotoEditorSDK.Engine.CanvasRenderer} renderer
	   * @override
	   */
	
	
	  Container.prototype.renderCanvas = function renderCanvas(renderer) {
	    if (!this._visible) {
	      return;
	    }
	
	    var filterManager = renderer.getFilterManager();
	    if (this._filters && this._filters.length) {
	      filterManager.pushFilters(this, this._filters);
	    }
	
	    this._renderCanvas(renderer);
	    this._children.forEach(function (child) {
	      child.renderCanvas(renderer);
	    });
	
	    if (this._filters && this._filters.length) {
	      filterManager.popFilters();
	    }
	  };
	
	  /**
	   * Renders the contents of this container
	   * @param {PhotoEditorSDK.Engine.CanvasRenderer} renderer
	   * @protected
	   */
	
	
	  Container.prototype._renderCanvas = function _renderCanvas(renderer) {};
	
	  /**
	   * Updates the world transform for this DisplayObject
	   */
	
	
	  Container.prototype.updateTransform = function updateTransform() {
	    _DisplayObject.prototype.updateTransform.call(this);
	    this._children.forEach(function (child) {
	      child.updateTransform();
	    });
	  };
	
	  /**
	   * Returns the non-global bounds of this DisplayObject
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Container.prototype.getLocalBounds = function getLocalBounds() {
	    if (this._localBoundsNeedUpdate) {
	      // @TODO Calculate bounds by looking at children
	      this._localBoundsNeedUpdate = false;
	    }
	    return this._localBounds.clone();
	  };
	
	  /**
	   * Returns the bounds for this DisplayObject
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Container.prototype.getBounds = function getBounds() {
	    if (this._boundsNeedUpdate) {
	      // @TODO Calculate bounds by looking at children
	      this._boundsNeedUpdate = false;
	    }
	    return this._bounds.clone();
	  };
	
	  /**
	   * Returns this Container's children
	   * @return {PhotoEditorSDK.Engine.DisplayObject[]}
	   */
	
	
	  Container.prototype.getChildren = function getChildren() {
	    return this._children;
	  };
	
	  /**
	   * Returns this Container's filters
	   * @return {PhotoEditorSDK.Engine.Filter[]}
	   */
	
	
	  Container.prototype.getFilters = function getFilters() {
	    return this._filters;
	  };
	
	  /**
	   * Disposes this Container
	   */
	
	
	  Container.prototype.dispose = function dispose() {};
	
	  return Container;
	}(_displayObject2.default);
	
	exports.default = Container;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _utils = __webpack_require__(105);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The base class for all renderers
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BaseRenderer = function (_EventEmitter) {
	  (0, _inherits3.default)(BaseRenderer, _EventEmitter);
	
	  /**
	   * Create a BaseRenderer instance
	   * @param  {Number} width
	   * @param  {Number} height
	   * @param  {Object} options = {}
	   * @param  {Number} [options.pixelRatio = 1]
	   * @param  {PhotoEditorSDK.Color} [options.clearColor = PhotoEditorSDK.Color.TRANSPARENT]
	   * @param  {Boolean} [options.debug = false]
	   */
	
	  function BaseRenderer(width, height) {
	    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	    (0, _classCallCheck3.default)(this, BaseRenderer);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._options = _utils2.default.defaults(options, {
	      pixelRatio: 1,
	      transparent: false,
	      clearColor: _globals.Color.BLACK,
	      debug: false
	    });
	
	    _this.setMaxListeners(25);
	    _this._width = width || 800;
	    _this._height = height || 600;
	    _this._dimensions = new _globals.Vector2(_this._width, _this._height);
	    _this._maxTextureSize = null;
	    _this._pixelRatio = _this._options.pixelRatio;
	    _this._clearColor = _this._options.transparent ? _globals.Color.TRANSPARENT : _this._options.clearColor || _globals.Color.BLACK;
	    return _this;
	  }
	
	  /**
	   * Sets the canvas to the given one
	   * @param {HTMLCanvasElement} canvas
	   */
	
	
	  BaseRenderer.prototype.setCanvas = function setCanvas(canvas) {
	    this._canvas = canvas;
	
	    this._createContext();
	    this._onBeforeContext();
	    this._setupContext();
	
	    this.resizeTo(new _globals.Vector2(this._width, this._height));
	  };
	
	  /**
	   * Returns the current canvas
	   * @return {HTMLCanvasElement}
	   */
	
	
	  BaseRenderer.prototype.getCanvas = function getCanvas() {
	    return this._canvas;
	  };
	
	  /**
	   * Gets called before the context has been set up
	   * @protected
	   */
	
	
	  BaseRenderer.prototype._onBeforeContext = function _onBeforeContext() {};
	
	  /**
	   * Resizes the context and view to the given size
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  BaseRenderer.prototype.resizeTo = function resizeTo(dimensions) {
	    var pixelRatio = this._options.pixelRatio;
	
	    this._width = dimensions.x * pixelRatio;
	    this._height = dimensions.y * pixelRatio;
	
	    this._canvas.width = this._width;
	    this._canvas.height = this._height;
	
	    if (this._canvas.style) {
	      this._canvas.style.width = this._width / pixelRatio + 'px';
	      this._canvas.style.height = this._height / pixelRatio + 'px';
	    }
	
	    this._dimensions = dimensions.clone();
	  };
	
	  /**
	   * Gets the rendering context for this renderer
	   * @returns {Object}
	   * @protected
	   * @abstract
	   */
	
	
	  BaseRenderer.prototype._createContext = function _createContext() {
	    _globals.Log.warn(this.constructor.name, '`_createContext` is abstract and not implemented in inherited class');
	  };
	
	  /**
	   * Sets up the rendering context for this renderer
	   * @protected
	   * @abstract
	   */
	
	
	  BaseRenderer.prototype._setupContext = function _setupContext() {
	    _globals.Log.warn(this.constructor.name, '`_setupContext` is abstract and not implemented in inherited class');
	  };
	
	  /**
	   * Renders the given displayObject
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @abstract
	   */
	
	
	  BaseRenderer.prototype.render = function render(displayObject) {
	    _globals.Log.warn(this.constructor.name, '`render` is abstract and not implemented in inherited class');
	  };
	
	  /**
	   * Returns the maximum dimensions
	   * @return {Number}
	   */
	
	
	  BaseRenderer.prototype.getMaxDimensions = function getMaxDimensions() {
	    return null;
	  };
	
	  /**
	   * Returns the current rendering context
	   * @return {RenderingContext}
	   */
	
	
	  BaseRenderer.prototype.getContext = function getContext() {
	    return this._context;
	  };
	
	  /**
	   * Returns the current width
	   * @return {Number}
	   */
	
	
	  BaseRenderer.prototype.getWidth = function getWidth() {
	    return this._dimensions.x;
	  };
	
	  /**
	   * Returns the current height
	   * @return {Number}
	   */
	
	
	  BaseRenderer.prototype.getHeight = function getHeight() {
	    return this._dimensions.y;
	  };
	
	  /**
	   * Returns the current dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  BaseRenderer.prototype.getDimensions = function getDimensions() {
	    return this._dimensions;
	  };
	
	  /**
	   * Returns the current pixel ratio
	   * @return {Number}
	   */
	
	
	  BaseRenderer.prototype.getPixelRatio = function getPixelRatio() {
	    return this._pixelRatio;
	  };
	
	  /**
	   * Sets the pixel ratio
	   * @return {Number}
	   */
	
	
	  BaseRenderer.prototype.setPixelRatio = function setPixelRatio(pixelRatio) {
	    this._pixelRatio = pixelRatio;
	  };
	
	  /**
	   * Returns the maximum texture size
	   * @return {Number}
	   */
	
	
	  BaseRenderer.prototype.getMaxTextureSize = function getMaxTextureSize() {
	    return this._maxTextureSize;
	  };
	
	  /**
	   * Returns the current filter manager
	   * @return {PhotoEditorSDK.Engine.FilterManager}
	   */
	
	
	  BaseRenderer.prototype.getFilterManager = function getFilterManager() {
	    return this._filterManager;
	  };
	
	  /**
	   * Sets the filter manager
	   * @param {PhotoEditorSDK.Engine.FilterManager} filterManager
	   */
	
	
	  BaseRenderer.prototype.setFilterManager = function setFilterManager(filterManager) {
	    this._filterManager = filterManager;
	  };
	
	  /**
	   * Checks if this renderer is supported on the current device and browser
	   * @return {Boolean}
	   */
	
	
	  BaseRenderer.isSupported = function isSupported() {
	    return true;
	  };
	
	  /**
	   * Checks if this renderer's type is equal to the given one
	   * @param  {String}  type
	   * @return {Boolean}
	   */
	
	
	  BaseRenderer.prototype.isOfType = function isOfType(type) {
	    return this._type === type;
	  };
	
	  /**
	   * Disposes this Renderer
	   * @abstract
	   */
	
	
	  BaseRenderer.prototype.dispose = function dispose() {
	    _globals.Log.warn(this.constructor.name, '`dispose` is abstract and not implemented in inherited class');
	  };
	
	  return BaseRenderer;
	}(_globals.EventEmitter);
	
	exports.default = BaseRenderer;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * The base class for all ObjectRenderer classes
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	
	var ObjectRenderer = function () {
	  /**
	   * Creates an ObjectRenderer
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   */
	
	  function ObjectRenderer(renderer) {
	    (0, _classCallCheck3.default)(this, ObjectRenderer);
	
	    this._renderer = renderer;
	
	    this._onContextChange = this._onContextChange.bind(this);
	    this._renderer.on('context', this._onContextChange);
	  }
	
	  /**
	   * Gets called when the rendering context changes
	   * @private
	   */
	
	
	  ObjectRenderer.prototype._onContextChange = function _onContextChange() {};
	
	  /**
	   * Gets called when this object renderer is activated
	   */
	
	
	  ObjectRenderer.prototype.start = function start() {};
	
	  /**
	   * Gets called when this object renderer is deactivated
	   */
	
	
	  ObjectRenderer.prototype.stop = function stop() {
	    this.flush();
	  };
	
	  /**
	   * Renders whatever has been queued
	   */
	
	
	  ObjectRenderer.prototype.flush = function flush() {};
	
	  /**
	   * Disposes this ObjectRenderer
	   */
	
	
	  ObjectRenderer.prototype.dispose = function dispose() {
	    this._renderer.off('context', this._onContextChange);
	    this._renderer = null;
	  };
	
	  return ObjectRenderer;
	}();
	
	exports.default = ObjectRenderer;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _baseTexture = __webpack_require__(46);
	
	var _baseTexture2 = _interopRequireDefault(_baseTexture);
	
	var _textureUvs = __webpack_require__(104);
	
	var _textureUvs2 = _interopRequireDefault(_textureUvs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A texture that can be applied to a {@link PhotoEditorSDK.Engine.Sprite}
	 * @class
	 * @extends EventEmitter
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var Texture = function (_EventEmitter) {
	  (0, _inherits3.default)(Texture, _EventEmitter);
	
	  function Texture(baseTexture, frame) {
	    (0, _classCallCheck3.default)(this, Texture);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    if (!(baseTexture instanceof _baseTexture2.default)) {
	      throw new Error('\`baseTexture\` should be an instance of BaseTexture');
	    }
	    _this._baseTexture = baseTexture;
	    _this._uvs = new _textureUvs2.default();
	    _this._frame = frame ? frame.clone() : null;
	    _this._frameLocked = !!frame;
	
	    // Bind event handlers
	    _this._onBaseTextureLoaded = _this._onBaseTextureLoaded.bind(_this);
	    _this._onBaseTextureUpdated = _this._onBaseTextureUpdated.bind(_this);
	
	    if (!_this._baseTexture.isLoaded()) {
	      _this._baseTexture.once('loaded', _this._onBaseTextureLoaded);
	    } else {
	      var _baseTexture$getFrame = baseTexture.getFrame();
	
	      var width = _baseTexture$getFrame.width;
	      var height = _baseTexture$getFrame.height;
	
	      if (!_this._frameLocked) {
	        _this._frame = new _globals.Rectangle(0, 0, width, height);
	      }
	      _this._onBaseTextureLoaded();
	    }
	    return _this;
	  }
	
	  /**
	   * Creates a texture from the given image
	   * @param  {Image} image
	   */
	
	
	  Texture.fromImage = function fromImage(image) {
	    var baseTexture = new _baseTexture2.default(image);
	    return new Texture(baseTexture);
	  };
	
	  /**
	   * Creates a texture from the given canvas
	   * @param  {HTMLCanvasElement} canvas
	   */
	
	
	  Texture.fromCanvas = function fromCanvas(canvas) {
	    var baseTexture = new _baseTexture2.default(canvas);
	    return new Texture(baseTexture);
	  };
	
	  /**
	   * Gets called when the base texture has been loaded
	   * @private
	   */
	
	
	  Texture.prototype._onBaseTextureLoaded = function _onBaseTextureLoaded() {
	    if (!this._frameLocked) {
	      var frame = this._baseTexture.getFrame().clone();
	      this.setFrame(frame);
	    }
	
	    this._baseTexture.on('update', this._onBaseTextureUpdated);
	  };
	
	  /**
	   * Gets called when the base texture has been updated
	   * @private
	   */
	
	
	  Texture.prototype._onBaseTextureUpdated = function _onBaseTextureUpdated() {
	    var _baseTexture$getFrame2 = this._baseTexture.getFrame();
	
	    var width = _baseTexture$getFrame2.width;
	    var height = _baseTexture$getFrame2.height;
	
	    this._frame.width = width;
	    this._frame.height = height;
	    this.emit('update');
	  };
	
	  /**
	   * Updates the UV coordinates of this texture
	   * @private
	   */
	
	
	  Texture.prototype._updateUVs = function _updateUVs() {
	    this._uvs.update(this._frame, this._baseTexture.getFrame());
	  };
	
	  /**
	   * Returns the base texture
	   * @return {PhotoEditorSDK.Engine.BaseTexture}
	   */
	
	
	  Texture.prototype.getBaseTexture = function getBaseTexture() {
	    return this._baseTexture;
	  };
	
	  /**
	   * Sets the base texture
	   * @param {PhotoEditorSDK.Engine.BaseTexture} baseTexture
	   */
	
	
	  Texture.prototype.setBaseTexture = function setBaseTexture(baseTexture) {
	    this._baseTexture = baseTexture;
	  };
	
	  /**
	   * Returns the frame
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Texture.prototype.getFrame = function getFrame() {
	    return this._frame;
	  };
	
	  /**
	   * Sets the frame
	   * @param {PhotoEditorSDK.Math.Rectangle} frame
	   */
	
	
	  Texture.prototype.setFrame = function setFrame(frame) {
	    this._frame = frame;
	    this._updateUVs();
	  };
	
	  /**
	   * Returns the width
	   * @return {Number}
	   */
	
	
	  Texture.prototype.getWidth = function getWidth() {
	    return this._frame.width;
	  };
	
	  /**
	   * Returns the height
	   * @return {Number}
	   */
	
	
	  Texture.prototype.getHeight = function getHeight() {
	    return this._frame.height;
	  };
	
	  /**
	   * Returns the texture UVs
	   * @return {PhotoEditorSDK.Engine.TextureUVs}
	   */
	
	
	  Texture.prototype.getUVs = function getUVs() {
	    return this._uvs;
	  };
	
	  /**
	   * Returns the dimensions of this texture
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Texture.prototype.getDimensions = function getDimensions() {
	    return new _globals.Vector2(this._frame.width, this._frame.height);
	  };
	
	  return Texture;
	}(_globals.EventEmitter); /*
	                           * This file is part of PhotoEditorSDK.
	                           *
	                           * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                           * All rights reserved.
	                           *
	                           * Redistribution and use in source and binary forms, without
	                           * modification, are permitted provided that the following license agreement
	                           * is approved and a legal/financial contract was signed by the user.
	                           * The license agreement can be found under following link:
	                           *
	                           * https://www.photoeditorsdk.com/LICENSE.txt
	                           */
	
	exports.default = Texture;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var now = typeof window !== 'undefined' && window.performance ? window.performance.now.bind(window.performance) : __webpack_require__(93);
	
	/**
	 * Hooks into a rendering context (WebGLRenderingContext or CanvasRenderingContext2D),
	 * mocks its methods and measures the time consumed by the method calls. When `endFrame`
	 * is called, it prints a performance report
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ContextPerformanceHook = function () {
	  function ContextPerformanceHook(context) {
	    var _this = this;
	
	    (0, _classCallCheck3.default)(this, ContextPerformanceHook);
	
	    this._context = context;
	    this._tracking = false;
	
	    var self = this;
	
	    var _loop = function _loop(key) {
	      var value = context[key];
	      if (typeof value === 'function') {
	        value = function value() {
	          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	          }
	
	          var fn = context[key];
	          if (!self._tracking) {
	            return fn.apply(context, args);
	          }
	
	          var start = now();
	          var result = fn.apply(context, args);
	          var time = now() - start;
	
	          var call = {
	            functionName: key,
	            arguments: args,
	            duration: time
	          };
	          self._trackedCalls.push(call);
	
	          return result;
	        };
	      }
	      _this[key] = value;
	    };
	
	    for (var key in context) {
	      _loop(key);
	    }
	  }
	
	  /**
	   * Starts tracking a frame
	   */
	
	
	  ContextPerformanceHook.prototype.startFrame = function startFrame() {
	    this._tracking = true;
	    this._trackedCalls = [];
	  };
	
	  /**
	   * Stops tracking a frame and prints a performance report
	   */
	
	
	  ContextPerformanceHook.prototype.endFrame = function endFrame() {
	    var tag = 'Rendering';
	    _globals.Log.log(tag, 'Frame rendering results:');
	    _globals.Log.log(tag, 'Context calls: ' + this._trackedCalls.length);
	
	    var groupedCalls = {};
	    this._trackedCalls.forEach(function (_ref) {
	      var functionName = _ref.functionName;
	      var duration = _ref.duration;
	
	      groupedCalls[functionName] = groupedCalls[functionName] || {
	        totalDuration: 0,
	        calls: 0
	      };
	
	      groupedCalls[functionName].totalDuration += duration;
	      groupedCalls[functionName].calls++;
	    });
	
	    var callsArray = [];
	    for (var key in groupedCalls) {
	      var data = groupedCalls[key];
	      data.averageDuration = data.totalDuration / data.calls;
	
	      callsArray.push({ functionName: key, data: data });
	    }
	
	    callsArray.sort(function (a, b) {
	      return b.data.totalDuration - a.data.totalDuration;
	    });
	    callsArray = callsArray.slice(0, 3);
	
	    callsArray.forEach(function (item) {
	      _globals.Log.log(tag, item.functionName + ': ' + item.data.calls + ' calls, ' + item.data.totalDuration.toFixed(2) + 'ms');
	    });
	  };
	
	  return ContextPerformanceHook;
	}();
	
	exports.default = ContextPerformanceHook;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _canvas = __webpack_require__(17);
	
	var _canvas2 = _interopRequireDefault(_canvas);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * This class represents an image in pixel array form.
	 */
	
	var PixelArrayImage = function () {
	  /**
	   * @param  {Number} width
	   * @param  {Number} height
	   * @param  {UInt8Array} data
	   * @constructor
	   */
	
	  function PixelArrayImage(width, height, data) {
	    (0, _classCallCheck3.default)(this, PixelArrayImage);
	
	    this.width = width;
	    this.height = height;
	    this.data = data;
	  }
	
	  /**
	   * Creates a PixelArrayImage from the given `node-canvas` Image object by rendering the image
	   * to a canvas and reading the pixel data
	   * @param  {Canvas.Image} image
	   * @return {PixelArrayImage}
	   */
	
	
	  PixelArrayImage.fromNodeCanvasImage = function fromNodeCanvasImage(image) {
	    var canvas = new _canvas2.default(image.width, image.height);
	    var context = canvas.getContext('2d');
	
	    context.drawImage(image, 0, 0);
	    var imageData = context.getImageData(0, 0, image.width, image.height);
	    return new PixelArrayImage(image.width, image.height, imageData.data);
	  };
	
	  return PixelArrayImage;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = PixelArrayImage;

/***/ },
/* 72 */
/***/ function(module, exports) {

	'use strict';
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * Helper function to correctly set up the prototype chain
	 * Based on the backbone.js extend function:
	 * https://github.com/jashkenas/backbone/blob/master/backbone.js
	 * @param  {Object} prototypeProperties
	 * @param  {Object} classProperties
	 * @return {Object}
	 * @ignore
	 */
	module.exports = function (prototypeProperties, classProperties) {
	  /* jshint validthis:true */
	  var parent = this;
	  var child;
	
	  // The constructor function for the new subclass is either defined by you
	  // (the 'constructor' property in your `extend` definition), or defaulted
	  // by us to simply call the parent's constructor.
	  if (prototypeProperties && prototypeProperties.hasOwnProperty('constructor')) {
	    child = prototypeProperties.constructor;
	  } else {
	    child = function child() {
	      return parent.apply(this, arguments);
	    };
	  }
	
	  // Add static properties to the constructor function, if supplied.
	  var key;
	  for (key in parent) {
	    child[key] = parent[key];
	  }
	  if (typeof classProperties !== 'undefined') {
	    for (key in classProperties) {
	      child[key] = classProperties[key];
	    }
	  }
	
	  // Set the prototype chain to inherit from `parent`, without calling
	  // `parent`'s constructor function.
	  var Surrogate = function Surrogate() {
	    this.constructor = child;
	  };
	  Surrogate.prototype = parent.prototype;
	  child.prototype = new Surrogate();
	
	  // Add prototype properties (instance properties) to the subclass,
	  // if supplied.
	  if (prototypeProperties) {
	    for (key in prototypeProperties) {
	      child.prototype[key] = prototypeProperties[key];
	    }
	  }
	
	  // Set a convenience property in case the parent's prototype is needed
	  // later.
	  child.__super__ = parent.prototype;
	
	  return child;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(82);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _vector = __webpack_require__(23);
	
	var _vector2 = _interopRequireDefault(_vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Represents a 3-dimensional matrix
	 * @class
	 * @memberof PhotoEditorSDK.Math
	 */
	
	var Matrix = function () {
	  /**
	   * Creates a Matrix
	   */
	
	  function Matrix() {
	    (0, _classCallCheck3.default)(this, Matrix);
	
	    this.reset();
	  }
	
	  /**
	   * Multiplies this matrix with the given one
	   * @param  {PhotoEditorSDK.Math.Matrix} matrix
	   * @return {PhotoEditorSDK.Math.Matrix}
	   */
	
	
	  Matrix.prototype.multiply = function multiply(matrix) {
	    var a = void 0,
	        b = void 0,
	        c = void 0,
	        d = void 0,
	        tx = void 0,
	        ty = void 0;
	    a = this.a * matrix.a + this.b * matrix.c;
	    b = this.a * matrix.b + this.b * matrix.d;
	    c = this.c * matrix.a + this.d * matrix.c;
	    d = this.c * matrix.b + this.d * matrix.d;
	    tx = this.tx * matrix.a + this.ty * matrix.c + matrix.tx;
	    ty = this.tx * matrix.b + this.ty * matrix.d + matrix.ty;
	
	    this.a = a;
	    this.b = b;
	    this.c = c;
	    this.d = d;
	    this.tx = tx;
	    this.ty = ty;
	    return this;
	  };
	
	  /**
	   * Applies this matrix to the given vector
	   * @param  {PhotoEditorSDK.Math.Vector2} position
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Matrix.prototype.applyToVector = function applyToVector(position) {
	    var _position = position;
	    var x = _position.x;
	    var y = _position.y;
	
	    position = position.clone();
	    position.x = this.a * x + this.c * y + this.tx;
	    position.y = this.b * x + this.d * y + this.tx;
	    return position;
	  };
	
	  /**
	   * Applies the inverse of this matrix to the given vector
	   * @param  {PhotoEditorSDK.Math.Vector2} position
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Matrix.prototype.applyInverseToVector = function applyInverseToVector(position) {
	    var determinant = 1 / (this.a * this.d + this.c * -this.b);
	
	    var _position2 = position;
	    var x = _position2.x;
	    var y = _position2.y;
	
	    position = position.clone();
	    position.x = this.d * determinant * x + -this.c * determinant * y + (this.ty * this.c - this.tx * this.d) * determinant;
	    position.y = this.a * determinant * y + -this.b * determinant * x + (-this.ty * this.a + this.tx * this.b) * determinant;
	
	    return position;
	  };
	
	  /**
	   * Turns the given rectangle into vector coordinates by applying this Matrix
	   * @param  {PhotoEditorSDK.Math.Rectangle} rectangle
	   * @param  {PhotoEditorSDK.Math.Vector2} anchor
	   * @return {PhotoEditorSDK.Math.Vector2[]}
	   */
	
	
	  Matrix.prototype.rectangleToCoordinates = function rectangleToCoordinates(rectangle) {
	    var anchor = arguments.length <= 1 || arguments[1] === undefined ? new _vector2.default(0, 0) : arguments[1];
	
	    // Anchor offsets (w0 = right, w1 = left, h0 = up, h1 = down)
	    var w0 = rectangle.width * (1 - anchor.x);
	    var w1 = rectangle.width * -anchor.x;
	    var h0 = rectangle.height * (1 - anchor.y);
	    var h1 = rectangle.height * -anchor.y;
	
	    var positions = [];
	
	    // Bottom Left
	    positions.push(new _vector2.default(this.a * w1 + this.c * h1 + this.tx, this.d * h1 + this.b * w1 + this.ty));
	
	    // Bottom Right
	    positions.push(new _vector2.default(this.a * w0 + this.c * h1 + this.tx, this.d * h1 + this.b * w0 + this.ty));
	
	    // Top Right
	    positions.push(new _vector2.default(this.a * w0 + this.c * h0 + this.tx, this.d * h0 + this.b * w0 + this.ty));
	
	    // Top Left
	    positions.push(new _vector2.default(this.a * w1 + this.c * h0 + this.tx, this.d * h0 + this.b * w1 + this.ty));
	
	    return positions;
	  };
	
	  /**
	   * Resets this matrix to the identity matrix
	   */
	
	
	  Matrix.prototype.reset = function reset() {
	    this.a = 1;
	    this.b = 0;
	    this.c = 0;
	    this.d = 1;
	    this.tx = 0;
	    this.ty = 0;
	  };
	
	  /**
	   * Returns an array representation of this matrix
	   * @return {Float32Array}
	   */
	
	
	  Matrix.prototype.toArray = function toArray() {
	    var arr = [this.a, this.b, 0, this.c, this.d, 0, this.tx, this.ty, 1];
	    if (typeof Float32Array === 'undefined') {
	      return arr;
	    }
	    return new Float32Array(arr);
	  };
	
	  /**
	   * The identity matrix
	   * @static
	   * @type {PhotoEditorSDK.Math.Matrix}
	   */
	
	
	  (0, _createClass3.default)(Matrix, null, [{
	    key: 'IDENTITY',
	    get: function get() {
	      return new Matrix();
	    }
	  }]);
	  return Matrix;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = Matrix;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * Represents a Rectangle
	 * @class
	 * @memberof PhotoEditorSDK.Math
	 */
	
	var Rectangle = function () {
	  /**
	   * Creartes a Rectangle
	   * @param {Number} [x = 0]
	   * @param {Number} [y = 0]
	   * @param {Number} [width  = 0]
	   * @param {Number} [height = 0]
	   */
	
	  function Rectangle() {
	    var x = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	    var y = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
	    var width = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
	    var height = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];
	    (0, _classCallCheck3.default)(this, Rectangle);
	
	    this.x = x;
	    this.y = y;
	    this.width = width;
	    this.height = height;
	  }
	
	  /**
	   * Sets the given values
	   * @param {Number} x
	   * @param {Number} y
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Rectangle.prototype.set = function set(x, y, width, height) {
	    this.x = x;
	    this.y = y;
	    this.width = width;
	    this.height = height;
	    return this;
	  };
	
	  /**
	   * Creates a clone of this rectangle
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Rectangle.prototype.clone = function clone() {
	    return new Rectangle(this.x, this.y, this.width, this.height);
	  };
	
	  /**
	   * Copies the values of the given rectangle
	   * @param  {PhotoEditorSDK.Math.Rectangle} other
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Rectangle.prototype.copy = function copy(other) {
	    this.x = other.x;
	    this.y = other.y;
	    this.width = other.width;
	    this.height = other.height;
	    return this;
	  };
	
	  /**
	   * Checks whether this rectangle's values are the same as the given ones
	   * @param  {(Number|PhotoEditorSDK.Math.Rectangle)} rect
	   * @param  {Number} y
	   * @param  {Number} width
	   * @param  {Number} height
	   * @return {Boolean}
	   */
	
	
	  Rectangle.prototype.equals = function equals(rect, y, width, height) {
	    if (rect instanceof Rectangle) {
	      return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
	    } else {
	      var x = rect;
	      return x === this.x && y === this.y && width === this.width && height === this.height;
	    }
	  };
	
	  /**
	   * Rounds this rectangle's values
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Rectangle.prototype.round = function round() {
	    this.x = Math.round(this.x);
	    this.y = Math.round(this.y);
	    this.width = Math.round(this.width);
	    this.height = Math.round(this.height);
	    return this;
	  };
	
	  /**
	   * Returns a string representation of this rectangle
	   * @return {String}
	   */
	
	
	  Rectangle.prototype.toString = function toString() {
	    return "Rectangle({ x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + " })";
	  };
	
	  return Rectangle;
	}();
	
	exports.default = Rectangle;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var now = typeof window !== 'undefined' && window.performance ? window.performance.now.bind(window.performance) : __webpack_require__(93);
	
	/**
	 * A simple class that tracks the time between start and end and renders it as FPS
	 * @class
	 * @memberof PhotoEditorSDK
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var PerformanceTest = function () {
	  /**
	   * Creates a PerformanceTest
	   * @param  {String} tag
	   * @param  {String} name
	   */
	
	  function PerformanceTest(tag, name) {
	    (0, _classCallCheck3.default)(this, PerformanceTest);
	
	    this._tag = tag;
	    this._name = name;
	    this._start = now();
	  }
	
	  /**
	   * Stops the performance test and prints the result
	   */
	
	
	  PerformanceTest.prototype.stop = function stop() {
	    var end = now();
	    var ms = end - this._start;
	    var fps = Math.round(1000 / ms);
	    _globals.Log.info(this._tag, this._name + ' took ' + ms.toFixed(2) + 'ms (' + fps + ' FPS)');
	  };
	
	  return PerformanceTest;
	}();
	
	exports.default = PerformanceTest;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AdjustmentsFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(AdjustmentsFilter, _Engine$Filter);
	
	  function AdjustmentsFilter() {
	    (0, _classCallCheck3.default)(this, AdjustmentsFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(211);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  AdjustmentsFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    var _options = this._options;
	    var brightness = _options.brightness;
	    var saturation = _options.saturation;
	    var contrast = _options.contrast;
	
	
	    var applyBrightness = brightness !== 0;
	    var applySaturation = saturation !== 1;
	    var applyContrast = contrast !== 1;
	
	    brightness = brightness * 255;
	
	    for (var i = 0; i < canvas.width * canvas.height; i++) {
	      var index = i * 4;
	      var r = imageData.data[index];
	      var g = imageData.data[index + 1];
	      var b = imageData.data[index + 2];
	
	      // Brightness
	      if (applyBrightness) {
	        r = r + brightness;
	        g = g + brightness;
	        b = b + brightness;
	      }
	
	      // Saturation
	      if (applySaturation) {
	        var luminance = r * 0.2125 + g * 0.7154 + b * 0.0721;
	        r = luminance * (1 - saturation) + r * saturation;
	        g = luminance * (1 - saturation) + g * saturation;
	        b = luminance * (1 - saturation) + b * saturation;
	      }
	
	      // Contrast
	      if (applyContrast) {
	        r = (r - 127) * contrast + 127;
	        g = (g - 127) * contrast + 127;
	        b = (b - 127) * contrast + 127;
	      }
	
	      imageData.data[index] = r;
	      imageData.data[index + 1] = g;
	      imageData.data[index + 2] = b;
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return AdjustmentsFilter;
	}(_globals.Engine.Filter); /*
	                            * This file is part of PhotoEditorSDK.
	                            *
	                            * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                            * All rights reserved.
	                            *
	                            * Redistribution and use in source and binary forms, without
	                            * modification, are permitted provided that the following license agreement
	                            * is approved and a legal/financial contract was signed by the user.
	                            * The license agreement can be found under following link:
	                            *
	                            * https://www.photoeditorsdk.com/LICENSE.txt
	                            */
	
	AdjustmentsFilter.prototype.availableOptions = {
	  brightness: { type: 'number', default: 0, uniformType: 'f' },
	  saturation: { type: 'number', default: 1, uniformType: 'f' },
	  contrast: { type: 'number', default: 1, uniformType: 'f' }
	};
	
	exports.default = AdjustmentsFilter;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * A ControlPoint is a part of a {@link PhotoEditorSDK.Operations.BrushOperation.Path}, so a Path
	 * consists of multiple ControlPoints. Should only be created using {@link PhotoEditorSDK.Operations.BrushOperation.Path#addControlPoint}
	 * @class
	 * @memberof PhotoEditorSDK.Operations.BrushOperation
	 */
	
	var ControlPoint = function () {
	  /**
	   * Creates a ControlPoint
	   * @param  {PhotoEditorSDK.Operations.BrushOperation.Path} path
	   * @param  {PhotoEditorSDK.Math.Vector2} position
	   */
	
	  function ControlPoint(path, position) {
	    (0, _classCallCheck3.default)(this, ControlPoint);
	
	    this._path = path;
	    this._drawnCanvases = [];
	    this._position = position;
	  }
	
	  /**
	   * Renders this ControlPoint to the given canvas
	   * @param  {HTMLCanvasElement} canvas
	   * @param  {PhotoEditorSDK.Operations.BrushOperation.ControlPoint} lastControlPoint
	   */
	
	
	  ControlPoint.prototype.renderToCanvas = function renderToCanvas(canvas, lastControlPoint) {
	    if (this._drawnCanvases.indexOf(canvas) !== -1) {
	      // This control point has already been drawn on this canvas. Ignore.
	      return;
	    }
	
	    var context = canvas.getContext('2d');
	    var position = this._position;
	    var lastPosition = lastControlPoint.getPosition();
	
	    context.beginPath();
	    context.lineJoin = 'round';
	    context.strokeStyle = this._path.getColor().toRGBA();
	    context.lineWidth = this._path.getThickness();
	    context.moveTo(lastPosition.x, lastPosition.y);
	    context.lineTo(position.x, position.y);
	    context.closePath();
	    context.stroke();
	    this._drawnCanvases.push(canvas);
	  };
	
	  /**
	   * Sets the position
	   * @param {PhotoEditorSDK.Math.Vector2} position
	   */
	
	
	  ControlPoint.prototype.setPosition = function setPosition(position) {
	    this._position = position;
	  };
	
	  /**
	   * Returns the position
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  ControlPoint.prototype.getPosition = function getPosition() {
	    return this._position.clone();
	  };
	
	  /**
	   * Sets this ControlPoint to dirty
	   */
	
	
	  ControlPoint.prototype.setDirty = function setDirty() {
	    this._drawnCanvases = [];
	  };
	
	  return ControlPoint;
	}();
	
	exports.default = ControlPoint;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Identity Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var IdentityFilter = function (_Filter) {
	  (0, _inherits3.default)(IdentityFilter, _Filter);
	
	  function IdentityFilter() {
	    (0, _classCallCheck3.default)(this, IdentityFilter);
	    return (0, _possibleConstructorReturn3.default)(this, _Filter.apply(this, arguments));
	  }
	
	  /**
	   * Renders the filter
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Engine.RenderTexture}
	   * @return {Promise}
	   */
	
	  IdentityFilter.prototype.render = function render(sdk, renderTexture) {
	    return _globals.Promise.resolve();
	  };
	
	  return IdentityFilter;
	}(_filter2.default);
	
	IdentityFilter.isIdentity = true;
	IdentityFilter.displayName = 'Original';
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	IdentityFilter.identifier = 'identity';
	
	exports.default = IdentityFilter;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var TEXTURE_GL_UNIT = 3;
	
	var LookupTableFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(LookupTableFilter, _Engine$Filter);
	
	  function LookupTableFilter() {
	    (0, _classCallCheck3.default)(this, LookupTableFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(220);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  LookupTableFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    var table = this._options.lookupTableData;
	    for (var i = 0; i < canvas.width * canvas.height; i++) {
	      var index = i * 4;
	
	      var r = imageData.data[index];
	      imageData.data[index] = table[r * 4];
	      var g = imageData.data[index + 1];
	      imageData.data[index + 1] = table[1 + g * 4];
	      var b = imageData.data[index + 2];
	      imageData.data[index + 2] = table[2 + b * 4];
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return LookupTableFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	
	
	LookupTableFilter.prototype.availableOptions = {
	  lookupTable: { type: 'number', default: TEXTURE_GL_UNIT, uniformType: 'i' },
	  lookupTableData: { type: 'array', default: [] }
	};
	
	/**
	 * Stores a 256 byte long lookup table in a 2d texture which will be
	 * used to look up the corresponding value for each channel.
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var LookupTable = function (_Primitive) {
	  (0, _inherits3.default)(LookupTable, _Primitive);
	
	  function LookupTable() {
	    (0, _classCallCheck3.default)(this, LookupTable);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new LookupTableFilter();
	    _this2._textures = [];
	    return _this2;
	  }
	
	  /**
	   * Gets called before this primitive's filter is being applied
	   * @param {PhotoEditorSDK} sdk
	   */
	
	
	  LookupTable.prototype.update = function update(sdk) {
	    var renderer = sdk.getRenderer();
	    /* istanbul ignore if */
	    if (renderer.isOfType('webgl')) {
	      this._updateWebGLTexture(sdk);
	    } else if (renderer.isOfType('canvas')) {
	      this._filter.setLookupTableData(this._options.data);
	    }
	  };
	
	  /**
	   * Updates the lookup table texture (WebGL only)
	   * @param {PhotoEditorSDK} sdk
	   * @private
	   */
	  /* istanbul ignore next */
	
	
	  LookupTable.prototype._updateWebGLTexture = function _updateWebGLTexture(sdk) {
	    if (typeof this._options.data === 'undefined') {
	      throw new Error('LookupTable: No data specified.');
	    }
	
	    var data = new Uint8Array(this._options.data);
	
	    var renderer = sdk.getRenderer();
	    var id = renderer.id;
	
	    if (!this._textures[id]) {
	      this._textures[id] = new _engine2.default.BaseTexture();
	    }
	
	    var texture = this._textures[id];
	    var pixelArrayImage = new _engine2.default.PixelArrayImage(256, 1, data);
	    texture.setSource(pixelArrayImage);
	    texture.setGLUnit(TEXTURE_GL_UNIT);
	
	    /* istanbul ignore next */
	    if (renderer.isOfType('webgl')) {
	      renderer.updateTexture(texture);
	    }
	  };
	
	  /**
	   * Cleans up this primitive
	   */
	
	
	  LookupTable.prototype.dispose = function dispose() {
	    _Primitive.prototype.dispose.call(this);
	    for (var id in this._textures) {
	      delete this._textures[id];
	    }
	    delete this._options.data;
	  };
	
	  return LookupTable;
	}(_primitive2.default);
	
	exports.default = LookupTable;

/***/ },
/* 80 */
/***/ function(module, exports) {

	/* eslint-disable */
	"use strict";
	/*!
	
	StackBlur - a fast almost Gaussian Blur For Canvas
	
	Version:  0.5
	Author:   Mario Klingemann
	Contact:  mario@quasimondo.com
	Website:  http://www.quasimondo.com/StackBlurForCanvas
	Twitter:  @quasimondo
	
	In case you find this class useful - especially in commercial projects -
	I am not totally unhappy for a small donation to my PayPal account
	mario@quasimondo.de
	
	Or support me on flattr:
	https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript
	
	Copyright (c) 2010 Mario Klingemann
	
	Permission is hereby granted, free of charge, to any person
	obtaining a copy of this software and associated documentation
	files (the "Software"), to deal in the Software without
	restriction, including without limitation the rights to use,
	copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the
	Software is furnished to do so, subject to the following
	conditions:
	
	The above copyright notice and this permission notice shall be
	included in all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
	OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
	HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
	OTHER DEALINGS IN THE SOFTWARE.
	*/
	
	var mul_table = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
	
	var shg_table = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
	
	function stackBlurCanvasRGBA(imageData, top_x, top_y, width, height, radius) {
	  if (isNaN(radius) || radius < 1) {
	    return;
	  }
	  radius |= 0;
	
	  var pixels = imageData.data;
	
	  var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
	
	  var div = radius + radius + 1;
	  var widthMinus1 = width - 1;
	  var heightMinus1 = height - 1;
	  var radiusPlus1 = radius + 1;
	  var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
	
	  var stackStart = new BlurStack();
	  var stackEnd;
	  var stack = stackStart;
	  for (i = 1; i < div; i++) {
	    stack = stack.next = new BlurStack();
	    if (i == radiusPlus1) stackEnd = stack;
	  }
	  stack.next = stackStart;
	  var stackIn = null;
	  var stackOut = null;
	
	  yw = yi = 0;
	
	  var mul_sum = mul_table[radius];
	  var shg_sum = shg_table[radius];
	
	  for (y = 0; y < height; y++) {
	    r_in_sum = g_in_sum = b_in_sum = a_in_sum = r_sum = g_sum = b_sum = a_sum = 0;
	
	    r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	
	    r_sum += sumFactor * pr;
	    g_sum += sumFactor * pg;
	    b_sum += sumFactor * pb;
	    a_sum += sumFactor * pa;
	
	    stack = stackStart;
	
	    for (i = 0; i < radiusPlus1; i++) {
	      stack.r = pr;
	      stack.g = pg;
	      stack.b = pb;
	      stack.a = pa;
	      stack = stack.next;
	    }
	
	    for (i = 1; i < radiusPlus1; i++) {
	      p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
	      r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
	      g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
	      b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
	      a_sum += (stack.a = pa = pixels[p + 3]) * rbs;
	
	      r_in_sum += pr;
	      g_in_sum += pg;
	      b_in_sum += pb;
	      a_in_sum += pa;
	
	      stack = stack.next;
	    }
	
	    stackIn = stackStart;
	    stackOut = stackEnd;
	    for (x = 0; x < width; x++) {
	      pixels[yi + 3] = pa = a_sum * mul_sum >> shg_sum;
	      if (pa !== 0) {
	        pa = 255 / pa;
	        pixels[yi] = (r_sum * mul_sum >> shg_sum) * pa;
	        pixels[yi + 1] = (g_sum * mul_sum >> shg_sum) * pa;
	        pixels[yi + 2] = (b_sum * mul_sum >> shg_sum) * pa;
	      } else {
	        pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
	      }
	
	      r_sum -= r_out_sum;
	      g_sum -= g_out_sum;
	      b_sum -= b_out_sum;
	      a_sum -= a_out_sum;
	
	      r_out_sum -= stackIn.r;
	      g_out_sum -= stackIn.g;
	      b_out_sum -= stackIn.b;
	      a_out_sum -= stackIn.a;
	
	      p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;
	
	      r_in_sum += stackIn.r = pixels[p];
	      g_in_sum += stackIn.g = pixels[p + 1];
	      b_in_sum += stackIn.b = pixels[p + 2];
	      a_in_sum += stackIn.a = pixels[p + 3];
	
	      r_sum += r_in_sum;
	      g_sum += g_in_sum;
	      b_sum += b_in_sum;
	      a_sum += a_in_sum;
	
	      stackIn = stackIn.next;
	
	      r_out_sum += pr = stackOut.r;
	      g_out_sum += pg = stackOut.g;
	      b_out_sum += pb = stackOut.b;
	      a_out_sum += pa = stackOut.a;
	
	      r_in_sum -= pr;
	      g_in_sum -= pg;
	      b_in_sum -= pb;
	      a_in_sum -= pa;
	
	      stackOut = stackOut.next;
	
	      yi += 4;
	    }
	    yw += width;
	  }
	
	  for (x = 0; x < width; x++) {
	    g_in_sum = b_in_sum = a_in_sum = r_in_sum = g_sum = b_sum = a_sum = r_sum = 0;
	
	    yi = x << 2;
	    r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	    g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	    b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	    a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	
	    r_sum += sumFactor * pr;
	    g_sum += sumFactor * pg;
	    b_sum += sumFactor * pb;
	    a_sum += sumFactor * pa;
	
	    stack = stackStart;
	
	    for (i = 0; i < radiusPlus1; i++) {
	      stack.r = pr;
	      stack.g = pg;
	      stack.b = pb;
	      stack.a = pa;
	      stack = stack.next;
	    }
	
	    yp = width;
	
	    for (i = 1; i <= radius; i++) {
	      yi = yp + x << 2;
	
	      r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
	      g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
	      b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
	      a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;
	
	      r_in_sum += pr;
	      g_in_sum += pg;
	      b_in_sum += pb;
	      a_in_sum += pa;
	
	      stack = stack.next;
	
	      if (i < heightMinus1) {
	        yp += width;
	      }
	    }
	
	    yi = x;
	    stackIn = stackStart;
	    stackOut = stackEnd;
	    for (y = 0; y < height; y++) {
	      p = yi << 2;
	      pixels[p + 3] = pa = a_sum * mul_sum >> shg_sum;
	      if (pa > 0) {
	        pa = 255 / pa;
	        pixels[p] = (r_sum * mul_sum >> shg_sum) * pa;
	        pixels[p + 1] = (g_sum * mul_sum >> shg_sum) * pa;
	        pixels[p + 2] = (b_sum * mul_sum >> shg_sum) * pa;
	      } else {
	        pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
	      }
	
	      r_sum -= r_out_sum;
	      g_sum -= g_out_sum;
	      b_sum -= b_out_sum;
	      a_sum -= a_out_sum;
	
	      r_out_sum -= stackIn.r;
	      g_out_sum -= stackIn.g;
	      b_out_sum -= stackIn.b;
	      a_out_sum -= stackIn.a;
	
	      p = x + ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;
	
	      r_sum += r_in_sum += stackIn.r = pixels[p];
	      g_sum += g_in_sum += stackIn.g = pixels[p + 1];
	      b_sum += b_in_sum += stackIn.b = pixels[p + 2];
	      a_sum += a_in_sum += stackIn.a = pixels[p + 3];
	
	      stackIn = stackIn.next;
	
	      r_out_sum += pr = stackOut.r;
	      g_out_sum += pg = stackOut.g;
	      b_out_sum += pb = stackOut.b;
	      a_out_sum += pa = stackOut.a;
	
	      r_in_sum -= pr;
	      g_in_sum -= pg;
	      b_in_sum -= pb;
	      a_in_sum -= pa;
	
	      stackOut = stackOut.next;
	
	      yi += width;
	    }
	  }
	}
	
	function BlurStack() {
	  this.r = 0;
	  this.g = 0;
	  this.b = 0;
	  this.a = 0;
	  this.next = null;
	}
	
	module.exports = {
	  stackBlurCanvasRGBA: stackBlurCanvasRGBA
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(174), __esModule: true };

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(81);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 83 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(178);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(27)
	  , document = __webpack_require__(11).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(13) && !__webpack_require__(33)(function(){
	  return Object.defineProperty(__webpack_require__(85)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(51)
	  , $export        = __webpack_require__(26)
	  , redefine       = __webpack_require__(92)
	  , hide           = __webpack_require__(19)
	  , has            = __webpack_require__(14)
	  , Iterators      = __webpack_require__(50)
	  , $iterCreate    = __webpack_require__(185)
	  , setToStringTag = __webpack_require__(54)
	  , getPrototypeOf = __webpack_require__(191)
	  , ITERATOR       = __webpack_require__(20)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(53)
	  , createDesc     = __webpack_require__(35)
	  , toIObject      = __webpack_require__(16)
	  , toPrimitive    = __webpack_require__(58)
	  , has            = __webpack_require__(14)
	  , IE8_DOM_DEFINE = __webpack_require__(86)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(13) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(91)
	  , hiddenKeys = __webpack_require__(49).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 90 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(14)
	  , toIObject    = __webpack_require__(16)
	  , arrayIndexOf = __webpack_require__(180)(false)
	  , IE_PROTO     = __webpack_require__(55)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(19);

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;
	
	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _identityFilter = __webpack_require__(78);
	
	Object.defineProperty(exports, 'IdentityFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_identityFilter).default;
	  }
	});
	
	var _a15Filter = __webpack_require__(117);
	
	Object.defineProperty(exports, 'A15Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_a15Filter).default;
	  }
	});
	
	var _breezeFilter = __webpack_require__(118);
	
	Object.defineProperty(exports, 'BreezeFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_breezeFilter).default;
	  }
	});
	
	var _bwFilter = __webpack_require__(119);
	
	Object.defineProperty(exports, 'BWFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_bwFilter).default;
	  }
	});
	
	var _bwhardFilter = __webpack_require__(120);
	
	Object.defineProperty(exports, 'BWHardFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_bwhardFilter).default;
	  }
	});
	
	var _celsiusFilter = __webpack_require__(121);
	
	Object.defineProperty(exports, 'CelsiusFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_celsiusFilter).default;
	  }
	});
	
	var _chestFilter = __webpack_require__(122);
	
	Object.defineProperty(exports, 'ChestFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_chestFilter).default;
	  }
	});
	
	var _fixieFilter = __webpack_require__(123);
	
	Object.defineProperty(exports, 'FixieFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_fixieFilter).default;
	  }
	});
	
	var _foodFilter = __webpack_require__(124);
	
	Object.defineProperty(exports, 'FoodFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_foodFilter).default;
	  }
	});
	
	var _fridgeFilter = __webpack_require__(125);
	
	Object.defineProperty(exports, 'FridgeFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_fridgeFilter).default;
	  }
	});
	
	var _frontFilter = __webpack_require__(126);
	
	Object.defineProperty(exports, 'FrontFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_frontFilter).default;
	  }
	});
	
	var _glamFilter = __webpack_require__(127);
	
	Object.defineProperty(exports, 'GlamFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_glamFilter).default;
	  }
	});
	
	var _gobblinFilter = __webpack_require__(128);
	
	Object.defineProperty(exports, 'GobblinFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_gobblinFilter).default;
	  }
	});
	
	var _k1Filter = __webpack_require__(129);
	
	Object.defineProperty(exports, 'K1Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_k1Filter).default;
	  }
	});
	
	var _k2Filter = __webpack_require__(130);
	
	Object.defineProperty(exports, 'K2Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_k2Filter).default;
	  }
	});
	
	var _k6Filter = __webpack_require__(131);
	
	Object.defineProperty(exports, 'K6Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_k6Filter).default;
	  }
	});
	
	var _kdynamicFilter = __webpack_require__(132);
	
	Object.defineProperty(exports, 'KDynamicFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_kdynamicFilter).default;
	  }
	});
	
	var _leninFilter = __webpack_require__(133);
	
	Object.defineProperty(exports, 'LeninFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_leninFilter).default;
	  }
	});
	
	var _lomoFilter = __webpack_require__(134);
	
	Object.defineProperty(exports, 'LomoFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_lomoFilter).default;
	  }
	});
	
	var _mellowFilter = __webpack_require__(135);
	
	Object.defineProperty(exports, 'MellowFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_mellowFilter).default;
	  }
	});
	
	var _morningFilter = __webpack_require__(136);
	
	Object.defineProperty(exports, 'MorningFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_morningFilter).default;
	  }
	});
	
	var _orchidFilter = __webpack_require__(137);
	
	Object.defineProperty(exports, 'OrchidFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_orchidFilter).default;
	  }
	});
	
	var _polaFilter = __webpack_require__(138);
	
	Object.defineProperty(exports, 'PolaFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_polaFilter).default;
	  }
	});
	
	var _pola669Filter = __webpack_require__(139);
	
	Object.defineProperty(exports, 'Pola669Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_pola669Filter).default;
	  }
	});
	
	var _quoziFilter = __webpack_require__(151);
	
	Object.defineProperty(exports, 'QuoziFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_quoziFilter).default;
	  }
	});
	
	var _semiredFilter = __webpack_require__(152);
	
	Object.defineProperty(exports, 'SemiredFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_semiredFilter).default;
	  }
	});
	
	var _sunnyFilter = __webpack_require__(153);
	
	Object.defineProperty(exports, 'SunnyFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_sunnyFilter).default;
	  }
	});
	
	var _texasFilter = __webpack_require__(154);
	
	Object.defineProperty(exports, 'TexasFilter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_texasFilter).default;
	  }
	});
	
	var _x400Filter = __webpack_require__(155);
	
	Object.defineProperty(exports, 'X400Filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_x400Filter).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operations = __webpack_require__(64);
	
	var Operations = _interopRequireWildcard(_operations);
	
	var _operationsStack = __webpack_require__(63);
	
	var _operationsStack2 = _interopRequireDefault(_operationsStack);
	
	var _versionChecker = __webpack_require__(110);
	
	var _versionChecker2 = _interopRequireDefault(_versionChecker);
	
	var _exif = __webpack_require__(40);
	
	var _exif2 = _interopRequireDefault(_exif);
	
	var _imageExporter = __webpack_require__(108);
	
	var _imageExporter2 = _interopRequireDefault(_imageExporter);
	
	var _performanceTest = __webpack_require__(75);
	
	var _performanceTest2 = _interopRequireDefault(_performanceTest);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RenderType = _globals.Constants.RenderType; /*
	                                                 * This file is part of PhotoEditorSDK.
	                                                 *
	                                                 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                                                 * All rights reserved.
	                                                 *
	                                                 * Redistribution and use in source and binary forms, without
	                                                 * modification, are permitted provided that the following license agreement
	                                                 * is approved and a legal/financial contract was signed by the user.
	                                                 * The license agreement can be found under following link:
	                                                 *
	                                                 * https://www.photoeditorsdk.com/LICENSE.txt
	                                                 */
	
	var ImageFormat = _globals.Constants.ImageFormat;
	var Events = _globals.Constants.Events;
	
	/**
	 * The main SDK class which handles rendering and manages
	 * operations.
	 * @class
	 * @alias PhotoEditorSDK
	 */
	
	var PhotoEditorSDK = function (_EventEmitter) {
	  (0, _inherits3.default)(PhotoEditorSDK, _EventEmitter);
	
	  /**
	   * Creates a PhotoEditorSDK instance
	   * @param  {String} [preferredRenderer = webgl] - `webgl` or `canvas`
	   * @param  {Object} [options = {}]
	   * @param  {Image} [options.image] - The image that should be rendered
	   * @param  {String} [options.renderMode = dynamic] - `dynamic` or `export`
	   * @param  {Boolean} [options.versionCheck = true] - Should a version check be performed?
	   * @param  {Boolean} [options.displayWelcomeMessage = true] - Should a welcome message be printed
	   *   in the console?
	   * @param  {Boolean} [options.transparent = false] - Should the canvas background be transparent?
	   * @param  {HTMLCanvasElement} [options.canvas] - The canvas element the SDK should render to
	   * @param  {Number} [options.zoom = 1] - The zoom level. Only available in `dynamic` mode
	   * @param  {Number} [options.spriteScale = 1] - The output sprite's scale. Only available in `dynamic` mode
	   * @param  {String} [options.logLevel = warn] - `trace`, `info`, `warn`, `error` or `log`
	   * @param  {Number} [options.pixelRatio = 1] - If none is given, PhotoEditorSDK automatically
	   *   detects the current device's pixel ratio
	   */
	
	  function PhotoEditorSDK(preferredRenderer) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    (0, _classCallCheck3.default)(this, PhotoEditorSDK);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	    _this._onContextRestored = _this._onContextRestored.bind(_this);
	
	    var _require = __webpack_require__(65);
	
	    var version = _require.version;
	
	    _this.version = version;
	
	    _this._preferredRenderer = preferredRenderer;
	    _this._options = _globals.Utils.defaults(options, {
	      extensions: {},
	      renderMode: 'dynamic',
	      versionCheck: true,
	      displayWelcomeMessage: true,
	      image: null,
	      canvas: null,
	      transparent: false,
	      zoom: 1,
	      spriteScale: 1,
	      logLevel: 'warn',
	      pixelRatio: typeof window !== 'undefined' && window.devicePixelRatio || 1
	    });
	
	    _this._options.extensions = _globals.Utils.defaults(_this._options.extensions, {
	      operations: [],
	      controls: [],
	      languages: []
	    });
	
	    _globals.Log.setLevel(_this._options.logLevel);
	
	    _this._defaultRenderMode = _this._options.renderMode;
	    _this._offset = new _globals.Vector2();
	    _this._zoom = _this._options.zoom;
	    _this._spriteScale = _this._options.spriteScale;
	    _this._operations = {};
	    _this._renderMode = _this._options.renderMode;
	    _this._operationsStack = null;
	    _this.setOperationsStack(new _operationsStack2.default());
	
	    // Engine stuff
	    _this._container = new _globals.Engine.Container();
	    _this._sprite = new _globals.Engine.Sprite();
	    _this._container.addChild(_this._sprite);
	
	    _this._inputBaseTexture = null;
	    _this._inputTexture = null;
	
	    _this._checkForUpdates();
	    _this._registerOperations();
	
	    if (_this._options.image) {
	      _this.setImage(_this._options.image);
	    }
	
	    _this._initRenderer();
	
	    var renderer = _this._renderer.constructor.type;
	    if (_this._options.displayWelcomeMessage) {
	      _globals.Log.log('Yo!', 'Version: ' + _this.version + ' (' + renderer + ') - https://www.photoeditorsdk.com');
	    }
	
	    // Async image handling
	    (0, _globals.requestAnimationFrame)(_this._init.bind(_this));
	    return _this;
	  }
	
	  /**
	   * Initializes the SDK
	   * @private
	   */
	
	
	  PhotoEditorSDK.prototype._init = function _init() {
	    if (this._options.image) {
	      this.setImage(this._options.image);
	    }
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation is updated. Delegates the event.
	   * @private
	   */
	
	
	  PhotoEditorSDK.prototype._onOperationUpdate = function _onOperationUpdate() {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    this.emit.apply(this, [Events.OPERATION_UPDATED].concat(args));
	  };
	
	  /**
	   * Gets called when the WebGL context has been restored. Re-triggers a render.
	   * @private
	   */
	  /* istanbul ignore next */
	
	
	  PhotoEditorSDK.prototype._onContextRestored = function _onContextRestored() {
	    _globals.Log.warn(this.constructor.name, 'Trying to re-render after WebGL context has been restored.');
	    this.setAllOperationsToDirty();
	    this._operationsStack.forEach(function (operation) {
	      operation.disposeRenderTexture();
	    });
	    this.render();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Exports the image with the given options. Result of the Promise is the exported image or data url.
	   * @param  {PhotoEditorSDK.RenderType} [renderType=PhotoEditorSDK.RenderType.DATAURL] - The output type
	   * @param  {PhotoEditorSDK.ImageFormat} [imageFormat=PhotoEditorSDK.ImageFormat.PNG] - The output image format
	   * @param  {Number} [quality=0.8] - The image quality, between 0 and 1
	   * @return {Promise}
	   */
	
	
	  PhotoEditorSDK.prototype.export = function _export() {
	    var renderType = arguments.length <= 0 || arguments[0] === undefined ? RenderType.DATAURL : arguments[0];
	
	    var _this2 = this;
	
	    var imageFormat = arguments.length <= 1 || arguments[1] === undefined ? ImageFormat.PNG : arguments[1];
	    var quality = arguments.length <= 2 || arguments[2] === undefined ? 0.8 : arguments[2];
	
	    this._renderMode = 'export';
	    var tempDimensions = this._renderer.getDimensions();
	    this._renderer.resizeTo(this.getFinalDimensions());
	
	    return _imageExporter2.default.validateSettings(renderType, imageFormat).then(function () {
	      return _this2.render();
	    }).then(function () {
	      return _imageExporter2.default.export(_this2, _this2._image, _this2._renderer.getCanvas(), renderType, imageFormat, quality);
	    }).then(function (data) {
	      _this2._renderer.resizeTo(tempDimensions);
	      _this2._renderMode = _this2._defaultRenderMode;
	      _this2.setAllOperationsToDirty();
	      _this2.render();
	      return data;
	    });
	  };
	
	  /**
	   * Renders the current image to the canvas
	   * @return {Promise}
	   */
	
	
	  PhotoEditorSDK.prototype.render = function render() {
	    var _this3 = this;
	
	    if (!this._image) {
	      throw new Error('You need to set an image before calling PhotoEditorSDK#render.');
	    }
	
	    var context = this._renderer.getContext();
	    if (context.startFrame) {
	      context.startFrame();
	    }
	
	    var perfTest = void 0;
	    if (_globals.Log.canLog('info')) {
	      perfTest = new _performanceTest2.default('⚡⚡⚡', 'Frame rendering');
	    }
	    _globals.Log.info('⚡⚡⚡', 'Rendering starts');
	
	    this._container.setPosition(0, 0);
	    this._container.setScale(1, 1);
	    this._sprite.setAnchor(0, 0);
	    this._sprite.setPosition(0, 0);
	    this._sprite.setScale(1, 1);
	    this._sprite.setRotation(0);
	
	    var stack = this._operationsStack;
	    stack.updateDirtinessForRenderer(this._renderer);
	
	    this._sprite.setTexture(this._inputTexture);
	    this._container.updateTransform();
	
	    return stack.validateSettings().then(function () {
	      return stack.render(_this3, _this3._sprite);
	    }).then(function () {
	      switch (_this3._renderMode) {
	        case 'dynamic':
	          // Always center image, set scale to zoom level
	          var center = _this3._renderer.getDimensions().clone().divide(2).add(_this3._offset);
	          _this3._container.setScale(_this3._zoom, _this3._zoom);
	          _this3._container.setPosition(center);
	          _this3._sprite.setAnchor(0.5, 0.5);
	          _this3._sprite.setScale(_this3._spriteScale, _this3._spriteScale);
	          break;
	        case 'export':
	          // Move sprite to upper left hand corner, render at full scale
	          _this3._container.setScale(1, 1);
	          _this3._sprite.setAnchor(0, 0);
	          _this3._sprite.setPosition(0, 0);
	          _this3._sprite.setScale(1, 1);
	          _this3._sprite.setRotation(0);
	          break;
	      }
	
	      _this3._renderer.render(_this3._container);
	    }).then(function () {
	      if (perfTest) {
	        perfTest.stop();
	      }
	      if (context.endFrame) {
	        context.endFrame();
	      }
	    });
	  };
	
	  // -------------------------------------------------------------------------- OPERATIONS
	
	  /**
	   * Registers all default operations
	   * @private
	   */
	
	
	  PhotoEditorSDK.prototype._registerOperations = function _registerOperations() {
	    this._operations = {};
	
	    for (var operationName in Operations) {
	      var operation = Operations[operationName];
	      this._operations[operation.identifier] = operation;
	    }
	
	    this._operations = _globals.Utils.extend(this._operations, this._options.extensions.operations);
	  };
	
	  /**
	   * Sets all operations in the stack to dirty
	   */
	
	
	  PhotoEditorSDK.prototype.setAllOperationsToDirty = function setAllOperationsToDirty() {
	    this._operationsStack.setAllToDirty();
	  };
	
	  /**
	   * Creates an operation with the given identifier
	   * @param {String} identifier
	   * @param {Object} [options = {}]
	   * @param {Boolean} [addToStack = true]
	   * @returns {PhotoEditorSDK.Operation}
	   */
	
	
	  PhotoEditorSDK.prototype.createOperation = function createOperation(identifier) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var addToStack = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	    var Operation = this._operations[identifier];
	    if (!Operation) {
	      throw new Error('No operation with identifier `' + identifier + '` found.');
	    }
	
	    var operation = new Operation(this, options);
	    if (addToStack) {
	      this.addOperation(operation);
	    }
	    return operation;
	  };
	
	  /**
	   * Adds the given operation to the operations stack
	   * @param {PhotoEditorSDK.Operation} operation
	   */
	
	
	  PhotoEditorSDK.prototype.addOperation = function addOperation(operation) {
	    this._operationsStack.push(operation);
	  };
	
	  /**
	   * Removes the given operation from the operations stack
	   * @param  {PhotoEditorSDK.Operation} operation
	   */
	
	
	  PhotoEditorSDK.prototype.removeOperation = function removeOperation(operation) {
	    this._operationsStack.remove(operation);
	  };
	
	  // -------------------------------------------------------------------------- DIMENSIONS
	
	  /**
	   * Returns the initial image dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  PhotoEditorSDK.prototype.getInputDimensions = function getInputDimensions() {
	    var frame = this._inputTexture.getFrame();
	    return new _globals.Vector2(frame.width, frame.height);
	  };
	
	  /**
	   * Returns the final dimensions that the input image would have
	   * after all existing operations have been applied
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  PhotoEditorSDK.prototype.getFinalDimensions = function getFinalDimensions() {
	    var dimensions = this.getInputDimensions();
	    var operationsStack = this._operationsStack;
	
	    operationsStack.forEach(function (operation) {
	      dimensions = operation.getNewDimensions(dimensions);
	    });
	
	    return dimensions.round();
	  };
	
	  /**
	   * Returns the current sprite dimensions
	   * @return {Vector2}
	   */
	
	
	  PhotoEditorSDK.prototype.getOutputDimensions = function getOutputDimensions() {
	    return this.getFinalDimensions().clone().multiply(this._zoom);
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Checks for version updates
	   * @private
	   */
	
	
	  PhotoEditorSDK.prototype._checkForUpdates = function _checkForUpdates() {
	    if (this._options.versionCheck) {
	      this._versionChecker = new _versionChecker2.default(this.version);
	    }
	  };
	
	  /**
	   * Creates a render texture for the current renderer
	   * @return {PhotoEditorSDK.Engine.RenderTexture}
	   * @TODO  This does probably not belong here
	   */
	
	
	  PhotoEditorSDK.prototype.createRenderTexture = function createRenderTexture() {
	    var pixelRatio = this._options.pixelRatio;
	
	    var frame = this._sprite.getTexture().getFrame();
	    return new _globals.Engine.RenderTexture(this._renderer, frame.width, frame.height, pixelRatio);
	  };
	
	  /**
	   * Initializes the renderer
	   * @private
	   */
	
	
	  PhotoEditorSDK.prototype._initRenderer = function _initRenderer() {
	    var rendererOptions = {
	      canvas: this._options.canvas,
	      pixelRatio: this._options.pixelRatio,
	      debug: this._options.debug,
	      transparent: this._options.transparent
	    };
	
	    var width = void 0,
	        height = void 0;
	    if (this._renderMode === 'dynamic' && this._options.canvas) {
	      var canvas = this._options.canvas;
	
	      width = canvas.width;
	      height = canvas.height;
	    } else if (this._image) {
	      var dimensions = this.getFinalDimensions();
	      width = dimensions.x;
	      height = dimensions.y;
	    }
	
	    switch (this._preferredRenderer) {
	      /* istanbul ignore next */
	      case 'webgl':
	        this._renderer = _globals.Engine.autoDetectRenderer(width, height, rendererOptions);
	        this._renderer.on('context-restored', this._onContextRestored);
	        break;
	      case 'canvas':
	        this._renderer = new _globals.Engine.CanvasRenderer(width, height, rendererOptions);
	        this._renderer.on('context-restored', this._onContextRestored);
	        break;
	      default:
	        _globals.Log.warn('PhotoEditorSDK', 'PhotoEditorSDK Error: Renderer `' + this._preferredRenderer + '` not supported. Falling back to automatically detected renderer.');
	        this._renderer = _globals.Engine.autoDetectRenderer(width, height, rendererOptions);
	    }
	  };
	
	  /**
	   * Resizes the renderer to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  PhotoEditorSDK.prototype.resizeTo = function resizeTo(dimensions) {
	    this._renderer.resizeTo(dimensions);
	  };
	
	  /**
	   * Resets all custom and selected operations
	   */
	
	
	  PhotoEditorSDK.prototype.reset = function reset() {
	    this._operationsStack.clear();
	  };
	
	  // -------------------------------------------------------------------------- EXIF
	
	  /**
	   * Parses the exif data and fixes the orientation if necessary
	   * @param {Image} image
	   * @private
	   * @TODO Move this somewhere else
	   */
	
	
	  PhotoEditorSDK.prototype.parseExif = function parseExif(image) {
	    if (!image) {
	      return;
	    }
	    var src = image.src;
	
	    /* istanbul ignore else */
	
	    if (typeof window === 'undefined') {
	      var NodeCanvas = __webpack_require__(17);
	      if (image instanceof NodeCanvas.Image && image.rawSource) {
	        src = image.rawSource;
	      }
	    }
	
	    if (_exif2.default.isJPEG(src)) {
	      var exif = null;
	      try {
	        exif = _exif2.default.fromBase64String(src);
	      } catch (e) {}
	      if (!exif) {
	        return;
	      }
	
	      return exif;
	    }
	  };
	
	  /**
	   * Reads the EXIF orientation tag and fixes it with the OrientationOperation
	   * @private
	   * @TODO Move this somewhere else
	   */
	
	
	  PhotoEditorSDK.prototype._handleExifOrientation = function _handleExifOrientation() {
	    var exifTags = this._exif.getTags();
	
	    if (exifTags && exifTags.Orientation) {
	      var rotationNeedsChange = exifTags.Orientation !== 1 && exifTags.Orientation !== 2;
	      var flipNeedsChange = [2, 4, 5, 7].indexOf(exifTags.Orientation) !== -1;
	
	      var orientationOperation = void 0;
	      if (rotationNeedsChange || flipNeedsChange) {
	        orientationOperation = this.createOperation('orientation');
	      }
	
	      if (rotationNeedsChange) {
	        // We need to rotate
	        var degrees = 0;
	        switch (exifTags.Orientation) {
	          case 7:
	          case 8:
	            degrees = -90;
	            break;
	          case 3:
	          case 4:
	            degrees = -180;
	            break;
	          case 5:
	          case 6:
	            degrees = 90;
	            break;
	        }
	
	        orientationOperation.setRotation(degrees);
	      }
	
	      if ([2, 4].indexOf(exifTags.Orientation) !== -1) {
	        orientationOperation.setFlipHorizontally(true);
	      }
	
	      if ([5, 7].indexOf(exifTags.Orientation) !== -1) {
	        orientationOperation.setFlipVertically(true);
	      }
	
	      this._exif.setOrientation(1);
	    }
	  };
	
	  // -------------------------------------------------------------------------- GETTERS / SETTERS
	
	  /**
	   * Checks if an image is provided
	   * @return {Boolean} [description]
	   */
	
	
	  PhotoEditorSDK.prototype.hasImage = function hasImage() {
	    return this._image !== null && typeof this._image !== 'undefined';
	  };
	
	  /**
	   * Returns the image
	   * @return {Image}
	   */
	
	
	  PhotoEditorSDK.prototype.getImage = function getImage() {
	    return this._image;
	  };
	
	  /**
	   * Sets the image and parses the exif data
	   * @param {Image} image
	   * @param {PhotoEditorSDK.Exif} [exif = null]
	   * @param {PhotoEditorSDK.Math.Vector2} [dimensions]
	   */
	
	
	  PhotoEditorSDK.prototype.setImage = function setImage(image) {
	    var exif = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var dimensions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	    this._options.image = image;
	    this._image = image;
	    if (!exif) {
	      this._exif = this.parseExif(image);
	    } else {
	      this._exif = exif;
	    }
	    if (this._exif) {
	      this._handleExifOrientation();
	    }
	
	    var baseTexture = new _globals.Engine.BaseTexture(this._image);
	    var frame = new _globals.Rectangle(0, 0, this._image.width, this._image.height);
	    if (dimensions) {
	      frame.width = dimensions.x;
	      frame.height = dimensions.y;
	    }
	
	    this._inputTexture = new _globals.Engine.Texture(baseTexture, frame);
	    this._sprite.setTexture(this._inputTexture);
	  };
	
	  /**
	   * Returns the canvas
	   * @return {HTMLCanvasElement}
	   */
	
	
	  PhotoEditorSDK.prototype.getCanvas = function getCanvas() {
	    return this._renderer.getCanvas();
	  };
	
	  /**
	   * Sets the canvas
	   * @param {HTMLCanvasElement} canvas
	   */
	
	
	  PhotoEditorSDK.prototype.setCanvas = function setCanvas(canvas) {
	    this._renderer.setCanvas(canvas);
	  };
	
	  /**
	   * Returns the sprite
	   * @return {PhotoEditorSDK.Engine.Sprite}
	   */
	
	
	  PhotoEditorSDK.prototype.getSprite = function getSprite() {
	    return this._sprite;
	  };
	
	  /**
	   * Returns the container
	   * @return {PhotoEditorSDK.Engine.Container}
	   */
	
	
	  PhotoEditorSDK.prototype.getContainer = function getContainer() {
	    return this._container;
	  };
	
	  /**
	   * Returns the operation stack
	   * @return {PhotoEditorSDK.OperationsStack}
	   */
	
	
	  PhotoEditorSDK.prototype.getOperationsStack = function getOperationsStack() {
	    return this._operationsStack;
	  };
	
	  /**
	   * Sets the operations stack
	   * @param {PhotoEditorSDK.OperationsStack} operationsStack
	   */
	
	
	  PhotoEditorSDK.prototype.setOperationsStack = function setOperationsStack(operationsStack) {
	    if (this._operationsStack) {
	      this._operationsStack.off(Events.OPERATION_UPDATED, this._onOperationUpdate);
	    }
	
	    this._operationsStack = operationsStack;
	    this._operationsStack.on(Events.OPERATION_UPDATED, this._onOperationUpdate);
	  };
	
	  /**
	   * Returns the available operations
	   * @return {Operation[]}
	   */
	
	
	  PhotoEditorSDK.prototype.getOperations = function getOperations() {
	    return this._operations;
	  };
	
	  /**
	   * Returns the renderer
	   * @return {PhotoEditorSDK.Engine.BaseRenderer}
	   */
	
	
	  PhotoEditorSDK.prototype.getRenderer = function getRenderer() {
	    return this._renderer;
	  };
	
	  /**
	   * Returns the rendering offset
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  PhotoEditorSDK.prototype.getOffset = function getOffset() {
	    return this._offset;
	  };
	
	  /**
	   * Sets the rendering offset
	   * @param {PhotoEditorSDK.Math.Vector2|Number} offset
	   * @param {Number} y
	   */
	
	
	  PhotoEditorSDK.prototype.setOffset = function setOffset(offset, y) {
	    if (offset instanceof _globals.Vector2) {
	      this._offset.copy(offset);
	    } else {
	      this._offset.set(offset, y);
	    }
	  };
	
	  /**
	   * Returns the zoom level
	   * @return {Number}
	   */
	
	
	  PhotoEditorSDK.prototype.getZoom = function getZoom() {
	    return this._zoom;
	  };
	
	  /**
	   * Sets the zoom level
	   * @param {Number} zoom
	   */
	
	
	  PhotoEditorSDK.prototype.setZoom = function setZoom(zoom) {
	    this._zoom = zoom;
	    this._container.setScale(this._zoom, this._zoom);
	    this._container.updateTransform();
	  };
	
	  /**
	   * Returns the output sprite's scale
	   * @return {Number}
	   */
	
	
	  PhotoEditorSDK.prototype.getSpriteScale = function getSpriteScale() {
	    return this._spriteScale;
	  };
	
	  /**
	   * Sets the sprite scale to the given value
	   * @param {Number} spriteScale
	   */
	
	
	  PhotoEditorSDK.prototype.setSpriteScale = function setSpriteScale(spriteScale) {
	    this._spriteScale = spriteScale;
	    this._sprite.setScale(spriteScale);
	    this._sprite.updateTransform();
	  };
	
	  /**
	   * Returns the pixel ratio
	   * @return {Number}
	   */
	
	
	  PhotoEditorSDK.prototype.getPixelRatio = function getPixelRatio() {
	    return this._options.pixelRatio;
	  };
	
	  /**
	   * Returns the Exif instance
	   * @return {PhotoEditorSDK.Exif} [description]
	   */
	
	
	  PhotoEditorSDK.prototype.getExif = function getExif() {
	    return this._exif;
	  };
	
	  /**
	   * Returns the options
	   * @return {Object}
	   */
	
	
	  PhotoEditorSDK.prototype.getOptions = function getOptions() {
	    return this._options;
	  };
	
	  /**
	   * Returns the input texture
	   * @return {PhotoEditorSDK.Engine.Texture}
	   */
	
	
	  PhotoEditorSDK.prototype.getInputTexture = function getInputTexture() {
	    return this._inputTexture;
	  };
	
	  // -------------------------------------------------------------------------- DISPOSAL
	
	  /**
	   * Disposes the SDK
	   */
	
	
	  PhotoEditorSDK.prototype.dispose = function dispose() {
	    this._renderer.dispose();
	    if (this._exif) {
	      this._exif.dispose();
	    }
	  };
	
	  return PhotoEditorSDK;
	}(_globals.EventEmitter);
	
	exports.default = PhotoEditorSDK;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _configurable = __webpack_require__(31);
	
	var _configurable2 = _interopRequireDefault(_configurable);
	
	var _shader = __webpack_require__(44);
	
	var _shader2 = _interopRequireDefault(_shader);
	
	var _textureShader = __webpack_require__(45);
	
	var _textureShader2 = _interopRequireDefault(_textureShader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A filter can be attached to a DisplayObject and affects the way it is displayed.
	 * @class
	 * @extends PhotoEditorSDK.Configurable
	 * @memberof PhotoEditorSDK.Engine
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Filter = function (_Configurable) {
	  (0, _inherits3.default)(Filter, _Configurable);
	
	  function Filter() {
	    (0, _classCallCheck3.default)(this, Filter);
	    return (0, _possibleConstructorReturn3.default)(this, _Configurable.apply(this, arguments));
	  }
	
	  /**
	   * Goes through the available options, sets _options defaults
	   * @param {Object} userOptions
	   * @override
	   * @protected
	   */
	
	  Filter.prototype._initOptions = function _initOptions() {
	    this._shaders = [];
	    this._availableUniforms = _textureShader2.default.defaultUniforms;
	    this._attributes = _textureShader2.default.defaultAttributes;
	    this._vertexSource = _textureShader2.default.defaultVertexSource;
	    this._fragmentSource = _textureShader2.default.defaultFragmentSource;
	
	    this._initUniforms();
	    _Configurable.prototype._initOptions.call(this);
	  };
	
	  /**
	   * Initializes the uniforms
	   * @private
	   */
	
	
	  Filter.prototype._initUniforms = function _initUniforms() {
	    this._uniforms = {};
	    for (var name in this._availableUniforms) {
	      var uniform = this._availableUniforms[name];
	      this._uniforms[name] = {
	        type: uniform.type,
	        value: uniform.default || null
	      };
	    }
	
	    // Options are also turned into uniforms
	    for (var optionName in this.availableOptions) {
	      var optionConfig = this.availableOptions[optionName];
	
	      if (!optionConfig.uniformType) {
	        _globals.Log.trace(this.constructor.name, 'Option `' + optionName + '` is missing a `uniformType`!');
	      } else {
	        this._uniforms['u_' + optionName] = {
	          type: optionConfig.uniformType,
	          value: optionConfig.default || null
	        };
	      }
	    }
	  };
	
	  /**
	   * Sets the value for the given option, validates it
	   * @param {String} optionName
	   * @param {*} value
	   * @param {Boolean} update = true
	   * @override
	   */
	
	
	  Filter.prototype.setOption = function setOption(optionName, value) {
	    var update = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	    _Configurable.prototype.setOption.call(this, optionName, value, update);
	
	    var uniformValue = value;
	    var optionConfig = this.availableOptions[optionName];
	
	    if (!optionConfig.uniformType) {
	      return;
	    }
	
	    switch (optionConfig.type) {
	      case 'color':
	        if (optionConfig.uniformType === '4f') {
	          uniformValue = value.toGLColor();
	        } else if (optionConfig.uniformType === '3f') {
	          uniformValue = value.toRGBGLColor();
	        }
	        break;
	      case 'vector2':
	        uniformValue = [value.x, value.y];
	        break;
	    }
	
	    this.setUniform('u_' + optionName, uniformValue);
	  };
	
	  /**
	   * Sets the given uniform to the given value
	   * @param {String} name
	   * @param {*} value
	   * @param {Boolean} sync = false
	   */
	
	
	  Filter.prototype.setUniform = function setUniform(name, value) {
	    var sync = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	    this._uniforms[name].value = value;
	  };
	
	  /**
	   * Sets the given uniforms to their values
	   * @param {Object}  uniforms
	   * @param {Boolean} sync = false
	   */
	
	
	  Filter.prototype.setUniforms = function setUniforms(uniforms) {
	    var sync = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    for (var name in uniforms) {
	      this._uniforms[name].value = uniforms[name];
	      if (sync) {
	        this.syncUniform(name);
	      }
	    }
	  };
	
	  /**
	   * Synchronizes the uniform with the given name
	   * @param  {String} name
	   */
	
	
	  Filter.prototype.syncUniform = function syncUniform(name) {
	    this._shaders.forEach(function (shader) {
	      shader.syncUniform(name);
	    });
	  };
	
	  /**
	   * Synchronizes all uniforms with WebGL
	   */
	
	
	  Filter.prototype.syncUniforms = function syncUniforms() {
	    this._shaders.forEach(function (shader) {
	      shader.syncUniforms();
	    });
	  };
	
	  /**
	   * Returns the shader for the given renderer
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   * @return {PhotoEditorSDK.Engine.Shader}
	   */
	  /* istanbul ignore next */
	
	
	  Filter.prototype.getShaderForRenderer = function getShaderForRenderer(renderer) {
	    var gl = renderer.getContext();
	    var shader = this._shaders[gl.id];
	
	    if (!shader) {
	      shader = new _shader2.default(renderer, this._vertexSource, this._fragmentSource, this._uniforms, this._attributes);
	
	      this._shaders[gl.id] = shader;
	    }
	
	    return shader;
	  };
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} inputTarget
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   */
	
	
	  Filter.prototype.apply = function apply(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    /* istanbul ignore if */
	    if (renderer.isOfType('webgl')) {
	      this._applyWebGL(renderer, inputTarget, outputTarget, clear);
	    } else if (renderer.isOfType('canvas')) {
	      this._applyCanvas(renderer, inputTarget, outputTarget, clear);
	    }
	  };
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the WebGLRenderer
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderer} renderer
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderTarget} inputTarget
	   * @param  {PhotoEditorSDK.Engine.WebGLRenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  Filter.prototype._applyWebGL = function _applyWebGL(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var gl = renderer.getContext();
	    var shader = this.getShaderForRenderer(renderer);
	
	    renderer.setRenderTarget(outputTarget);
	    if (clear) {
	      outputTarget.clear();
	    }
	
	    renderer.setShader(shader);
	
	    var projectionMatrix = renderer.getCurrentRenderTarget().getProjectionMatrix().toArray();
	    shader.setUniform('u_projMatrix', projectionMatrix);
	    shader.syncUniforms();
	
	    // Render!
	    gl.activeTexture(gl.TEXTURE0);
	    gl.bindTexture(gl.TEXTURE_2D, inputTarget.getTexture());
	    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
	  };
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {PhotoEditorSDK.Engine.CanvasRenderer} renderer
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} inputTarget
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  Filter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    _globals.Log.warn(this.constructor.name, '`_applyCanvas` is not implemented. Just copying image data from `inputTarget` to `outputTarget`.');
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  /**
	   * Disposes this Filter
	   */
	
	
	  Filter.prototype.dispose = function dispose() {
	    this._shaders.forEach(function (shader) {
	      return shader.dispose();
	    });
	    this._shaders = [];
	  };
	
	  return Filter;
	}(_configurable2.default);
	
	exports.default = Filter;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _contextPerformanceHook = __webpack_require__(70);
	
	var _contextPerformanceHook2 = _interopRequireDefault(_contextPerformanceHook);
	
	var _baseRenderer = __webpack_require__(67);
	
	var _baseRenderer2 = _interopRequireDefault(_baseRenderer);
	
	var _canvasRenderTarget = __webpack_require__(29);
	
	var _canvasRenderTarget2 = _interopRequireDefault(_canvasRenderTarget);
	
	var _canvasFilterManager = __webpack_require__(42);
	
	var _canvasFilterManager2 = _interopRequireDefault(_canvasFilterManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The renderer that is used for Canvas2D rendering
	 * @class
	 * @extends PhotoEditorSDK.Engine.BaseRenderer
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var CanvasRenderer = function (_BaseRenderer) {
	  (0, _inherits3.default)(CanvasRenderer, _BaseRenderer);
	
	  /**
	   * Creates a CanvasRenderer
	   * @override
	   */
	
	  function CanvasRenderer() {
	    (0, _classCallCheck3.default)(this, CanvasRenderer);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseRenderer.call.apply(_BaseRenderer, [this].concat(args)));
	
	    _this._type = 'canvas';
	
	    _this.setCanvas(_this._options.canvas || _this._createCanvas());
	    return _this;
	  }
	
	  /**
	   * Creates a canvas element
	   * @return {Canvas}
	   * @private
	   */
	
	
	  CanvasRenderer.prototype._createCanvas = function _createCanvas() {
	    return _globals.Utils.createCanvas();
	  };
	
	  /**
	   * Gets the rendering context for this renderer
	   * @returns {Object}
	   * @private
	   */
	
	
	  CanvasRenderer.prototype._createContext = function _createContext() {
	    var canvas = this._canvas;
	    var ctx = canvas.getContext('2d');
	
	    if (this._options.debug) {
	      ctx = new _contextPerformanceHook2.default(ctx);
	    }
	
	    this.id = ctx.id = CanvasRenderer.contextId++;
	    this._context = ctx;
	    ctx.renderer = this;
	
	    this.emit('context', ctx);
	
	    return ctx;
	  };
	
	  /**
	   * Sets up the rendering context for this renderer
	   * @private
	   */
	
	
	  CanvasRenderer.prototype._setupContext = function _setupContext() {
	    var ctx = this._context;
	
	    // Enable image smoothing if available
	    if (!('imageSmoothingEnabled' in ctx)) {
	      ['moz', 'webkit', 'ms'].forEach(function (prop) {
	        if (ctx[prop]) {
	          ctx[prop] = true;
	        }
	      });
	    } else {
	      ctx.imageSmoothingEnabled = true;
	    }
	
	    this._defaultRenderTarget = new _canvasRenderTarget2.default(this._width, this._height, this._pixelRatio, this._canvas, this._context);
	    this.setRenderTarget(this._defaultRenderTarget);
	
	    this._filterManager = new _canvasFilterManager2.default(this);
	  };
	
	  /**
	   * Renders the given DisplayObject
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   */
	
	
	  CanvasRenderer.prototype.render = function render(displayObject) {
	    var ctx = this._renderTarget.getContext();
	
	    // Since the given displayObject is the "root" object
	    // right now, we need to give it a dummy / fake object
	    // as parent with the default world transform and alpha
	    var originalParent = displayObject.getParent();
	    displayObject.setParent(this._fakeObject);
	
	    // Update transforms and render this object
	    displayObject.updateTransform();
	
	    // Reset parent
	    displayObject.setParent(originalParent);
	
	    // Reset transform
	    ctx.setTransform(1, 0, 0, 1, 0, 0);
	
	    // Reset alpha
	    ctx.globalAlpha = 1;
	
	    // Clear the view
	    var _canvas = this._canvas;
	    var width = _canvas.width;
	    var height = _canvas.height;
	
	    ctx.clearRect(0, 0, width, height);
	    if (this._clearColor.a !== 0) {
	      ctx.save();
	      ctx.fillStyle = this._clearColor.toRGBA();
	      ctx.fillRect(0, 0, width, height);
	      ctx.restore();
	    }
	
	    this.renderDisplayObject(displayObject, this._renderTarget);
	  };
	
	  /**
	   * Renders the given DisplayObject
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} renderTarget
	   */
	
	
	  CanvasRenderer.prototype.renderDisplayObject = function renderDisplayObject(displayObject, renderTarget) {
	    var originalRenderTarget = this._renderTarget;
	    this._filterManager.setFilterStack(renderTarget.getFilterStack());
	    this.setRenderTarget(renderTarget);
	    displayObject.renderCanvas(this);
	    this.setRenderTarget(originalRenderTarget);
	  };
	
	  /**
	   * Returns the current render target
	   * @return {PhotoEditorSDK.Engine.RenderTarget}
	   */
	
	
	  CanvasRenderer.prototype.getCurrentRenderTarget = function getCurrentRenderTarget() {
	    return this._renderTarget;
	  };
	
	  /**
	   * Sets the render target
	   * @param {PhotoEditorSDK.Engine.RenderTarget} renderTarget
	   */
	
	
	  CanvasRenderer.prototype.setRenderTarget = function setRenderTarget(renderTarget) {
	    this._renderTarget = renderTarget;
	  };
	
	  /**
	   * Returns the current rendering context
	   * @return {RenderingContext}
	   */
	
	
	  CanvasRenderer.prototype.getContext = function getContext() {
	    return this._renderTarget.getContext();
	  };
	
	  /**
	   * Disposes this Renderer
	   */
	
	
	  CanvasRenderer.prototype.dispose = function dispose() {
	    this._filterManager.dispose();
	  };
	
	  return CanvasRenderer;
	}(_baseRenderer2.default); /*
	                            * This file is part of PhotoEditorSDK.
	                            *
	                            * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                            * All rights reserved.
	                            *
	                            * Redistribution and use in source and binary forms, without
	                            * modification, are permitted provided that the following license agreement
	                            * is approved and a legal/financial contract was signed by the user.
	                            * The license agreement can be found under following link:
	                            *
	                            * https://www.photoeditorsdk.com/LICENSE.txt
	                            */
	
	CanvasRenderer.contextId = 0;
	CanvasRenderer.type = 'Canvas2D';
	
	exports.default = CanvasRenderer;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _globals2 = _interopRequireDefault(_globals);
	
	var _objectRenderer = __webpack_require__(68);
	
	var _objectRenderer2 = _interopRequireDefault(_objectRenderer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The ObjectRenderer that is responsible for rendering Sprite instances
	 * @class
	 * @extends PhotoEditorSDK.Engine.ObjectRenderer
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	/* eslint constructor-super: 0 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SpriteRenderer = function (_ObjectRenderer) {
	  (0, _inherits3.default)(SpriteRenderer, _ObjectRenderer);
	
	  /**
	   * Creates a SpriteRenderer
	   * @override
	   */
	
	  function SpriteRenderer() {
	    (0, _classCallCheck3.default)(this, SpriteRenderer);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ObjectRenderer.call.apply(_ObjectRenderer, [this].concat(args)));
	
	    _this._maxBatchSize = _globals2.default.BATCH_SIZE;
	    _this._vertices = new ArrayBuffer(_globals2.default.BATCH_SIZE * 4 * _globals2.default.VERTEX_BYTE_SIZE);
	    _this._positions = new Float32Array(_this._vertices);
	    _this._colors = new Uint32Array(_this._vertices);
	    _this._indices = new Uint16Array(_globals2.default.BATCH_SIZE * 6);
	
	    // Fill vertex position indices
	    for (var i = 0, j = 0; i < _globals2.default.BATCH_SIZE * 6; i += 6, j += 4) {
	      _this._indices[i + 0] = j + 0;
	      _this._indices[i + 1] = j + 1;
	      _this._indices[i + 2] = j + 2;
	      _this._indices[i + 3] = j + 0;
	      _this._indices[i + 4] = j + 2;
	      _this._indices[i + 5] = j + 3;
	    }
	
	    _this._shaders = [];
	    _this._sprites = [];
	
	    _this._currentBatchSize = 0;
	    _this._currentBaseTexture = null;
	
	    _this._onContextChange();
	    return _this;
	  }
	
	  /**
	   * Adds the given sprite to the batch
	   * @param  {PhotoEditorSDK.Engine.Sprite} sprite
	   */
	
	
	  SpriteRenderer.prototype.render = function render(sprite) {
	    var texture = sprite.getTexture();
	    var textureFrame = texture.getFrame();
	    var baseTexture = texture.getBaseTexture();
	
	    // Has the maximum batch size been reached? Flush!
	    if (this._currentBatchSize >= this._maxBatchSize) {
	      this.flush();
	      this._currentBaseTexture = baseTexture;
	    }
	
	    // No updated UVs => No rendering
	    var uvs = texture.getUVs();
	    if (!uvs) {
	      return;
	    }
	
	    // Fill positions array
	    var index = this._currentBatchSize * _globals2.default.VERTEX_BYTE_SIZE;
	    this._addVertexCoordinates(sprite, index, textureFrame);
	    this._addTextureUVs(sprite, index, uvs);
	    this._addColors(sprite, index);
	
	    // Add the sprite to the list of sprites
	    this._sprites[this._currentBatchSize] = sprite;
	    this._currentBatchSize++;
	  };
	
	  /**
	   * Adds the color to the positions array for the given sprite
	   * @param {PhotoEditorSDK.Engine.Sprite} sprite
	   * @param {Number} index
	   * @private
	   */
	
	
	  SpriteRenderer.prototype._addColors = function _addColors(sprite, index) {
	    var colors = this._colors;
	    var tint = sprite.getTint();
	    var color = (tint >> 16) + (tint & 0xff00) + ((tint & 0xff) << 16) + (sprite.getWorldAlpha() * 255 << 24);
	    colors[index + 4] = colors[index + 9] = colors[index + 14] = colors[index + 19] = color;
	  };
	
	  /**
	   * Adds the texture UV coordinates to the positions array for the given sprite
	   * @param {PhotoEditorSDK.Engine.Sprite} sprite
	   * @param {Number} index
	   * @param {PhotoEditorSDK.Engine.TextureUVs} uvs
	   * @private
	   */
	
	
	  SpriteRenderer.prototype._addTextureUVs = function _addTextureUVs(sprite, index, uvs) {
	    var positions = this._positions;
	
	    // Add UVs
	    var uvCoords = uvs.getUVsAt(0);
	    positions[index + 2] = uvCoords.x;
	    positions[index + 3] = uvCoords.y;
	
	    uvCoords = uvs.getUVsAt(1);
	    positions[index + 7] = uvCoords.x;
	    positions[index + 8] = uvCoords.y;
	
	    uvCoords = uvs.getUVsAt(2);
	    positions[index + 12] = uvCoords.x;
	    positions[index + 13] = uvCoords.y;
	
	    uvCoords = uvs.getUVsAt(3);
	    positions[index + 17] = uvCoords.x;
	    positions[index + 18] = uvCoords.y;
	  };
	
	  /**
	   * Adds the vertex coordinates to the positions array for the given
	   * sprite and texture frame
	   * @param {PhotoEditorSDK.Engine.Sprite} sprite
	   * @param {Number} index
	   * @param {PhotoEditorSDK.Math.Rectangle} textureFrame
	   * @private
	   */
	
	
	  SpriteRenderer.prototype._addVertexCoordinates = function _addVertexCoordinates(sprite, index, textureFrame) {
	    var positions = this._positions;
	    var worldTransform = sprite.getWorldTransform();
	
	    // Transform sprite coords with anchor in mind
	    var anchor = sprite.getAnchor();
	    var rectPositions = worldTransform.rectangleToCoordinates(textureFrame, anchor);
	
	    var stride = 5;
	    for (var i = 0; i < 4; i++) {
	      positions[index + i * stride] = rectPositions[i].x;
	      positions[index + i * stride + 1] = rectPositions[i].y;
	    }
	  };
	
	  /**
	   * Gets called when the rendering context changes
	   * @private
	   */
	
	
	  SpriteRenderer.prototype._onContextChange = function _onContextChange() {
	    var gl = this._renderer.getContext();
	
	    this._shader = this._renderer.shaders.default;
	
	    this._vertexBuffer = gl.createBuffer();
	    this._indexBuffer = gl.createBuffer();
	
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indices, gl.STATIC_DRAW);
	
	    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, this._vertices, gl.DYNAMIC_DRAW);
	  };
	
	  /**
	   * Gets called when this object renderer is activated
	   */
	
	
	  SpriteRenderer.prototype.start = function start() {
	    this._shader.setupBuffers(this._vertexBuffer, this._indexBuffer);
	  };
	
	  /**
	   * Renders the queued sprites in batches, every time the base texture has changed,
	   * it flushes the current batch to the graphics card
	   */
	
	
	  SpriteRenderer.prototype.flush = function flush() {
	    var renderer = this._renderer;
	    var gl = renderer.getContext();
	
	    if (this._currentBatchSize === 0) {
	      return;
	    }
	
	    if (this._currentBatchSize > _globals2.default.BATCH_SIZE * 0.5) {
	      // Upload whole ArrayBuffer
	      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._vertices);
	    } else {
	      // Only upload sub array
	      var subArray = this._positions.subarray(0, this._currentBatchSize * _globals2.default.VERTEX_BYTE_SIZE);
	      gl.bufferSubData(gl.ARRAY_BUFFER, 0, subArray);
	    }
	
	    // Init variables
	    var currentBatchSize = 0;
	    var currentBaseTexture = null;
	    var nextBaseTexture = null;
	    var currentShader = null;
	    var nextShader = null;
	    var shaderChanged = false;
	    var textureChanged = false;
	    var sprite = null;
	    var batchStartIndex = 0;
	
	    for (var i = 0, j = this._currentBatchSize; i < j; i++) {
	      sprite = this._sprites[i];
	
	      nextBaseTexture = sprite.getTexture().getBaseTexture();
	      nextShader = sprite.getShader() || this._shader;
	      shaderChanged = currentShader !== nextShader;
	      textureChanged = currentBaseTexture !== nextBaseTexture;
	
	      if (textureChanged || shaderChanged) {
	        this._renderBatch(currentBaseTexture, currentBatchSize, batchStartIndex);
	
	        batchStartIndex = i;
	        currentBatchSize = 0;
	        currentBaseTexture = nextBaseTexture;
	
	        // Shader has changed, set it
	        if (shaderChanged) {
	          currentShader = nextShader;
	          renderer.setShader(currentShader);
	
	          var renderTarget = renderer.getCurrentRenderTarget();
	          var projectionMatrix = renderTarget.getProjectionMatrix().toArray();
	          currentShader.setUniform('u_projMatrix', projectionMatrix);
	          currentShader.syncUniforms();
	
	          gl.activeTexture(gl.TEXTURE0);
	        }
	      }
	
	      currentBatchSize++;
	    }
	
	    this._renderBatch(currentBaseTexture, currentBatchSize, batchStartIndex);
	
	    // Reset the batch
	    this._currentBatchSize = 0;
	    this._sprites = [];
	  };
	
	  /**
	   * Renders the current batch
	   * @param  {PhotoEditorSDK.Engine.BaseTexture} baseTexture
	   * @param  {Number} batchSize
	   * @param  {Number} batchStartIndex
	   * @private
	   */
	
	
	  SpriteRenderer.prototype._renderBatch = function _renderBatch(baseTexture, batchSize, batchStartIndex) {
	    if (batchSize === 0) {
	      return;
	    }
	
	    var renderer = this._renderer;
	    var gl = renderer.getContext();
	
	    var glTexture = baseTexture.getGLTextureForId(gl.id);
	    if (!glTexture) {
	      glTexture = renderer.getOrCreateGLTexture(baseTexture);
	      renderer.updateTexture(baseTexture);
	    }
	    gl.activeTexture(gl.TEXTURE0 + baseTexture.getGLUnit());
	    gl.bindTexture(gl.TEXTURE_2D, glTexture);
	
	    var verticesCount = batchSize * 6;
	    var vertexOffset = batchStartIndex * 6 * 2;
	    gl.drawElements(gl.TRIANGLES, verticesCount, gl.UNSIGNED_SHORT, vertexOffset);
	  };
	
	  /**
	   * Disposes this ObjectRenderer
	   */
	
	
	  SpriteRenderer.prototype.dispose = function dispose() {
	    var renderer = this._renderer;
	    var gl = renderer.getContext();
	
	    gl.deleteBuffer(this._vertexBuffer);
	    gl.deleteBuffer(this._indexBuffer);
	
	    this._vertices = null;
	    this._positions = null;
	    this._colors = null;
	    this._indices = null;
	
	    _ObjectRenderer.prototype.dispose.call(this);
	  };
	
	  return SpriteRenderer;
	}(_objectRenderer2.default);
	
	exports.default = SpriteRenderer;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _baseRenderer = __webpack_require__(67);
	
	var _baseRenderer2 = _interopRequireDefault(_baseRenderer);
	
	var _webglRenderTarget = __webpack_require__(30);
	
	var _webglRenderTarget2 = _interopRequireDefault(_webglRenderTarget);
	
	var _objectRenderer = __webpack_require__(68);
	
	var _objectRenderer2 = _interopRequireDefault(_objectRenderer);
	
	var _spriteRenderer = __webpack_require__(98);
	
	var _spriteRenderer2 = _interopRequireDefault(_spriteRenderer);
	
	var _textureShader = __webpack_require__(45);
	
	var _textureShader2 = _interopRequireDefault(_textureShader);
	
	var _displayObject = __webpack_require__(41);
	
	var _displayObject2 = _interopRequireDefault(_displayObject);
	
	var _webglFilterManager = __webpack_require__(43);
	
	var _webglFilterManager2 = _interopRequireDefault(_webglFilterManager);
	
	var _contextPerformanceHook = __webpack_require__(70);
	
	var _contextPerformanceHook2 = _interopRequireDefault(_contextPerformanceHook);
	
	var _pixelArrayImage = __webpack_require__(71);
	
	var _pixelArrayImage2 = _interopRequireDefault(_pixelArrayImage);
	
	var _canvas = __webpack_require__(17);
	
	var _canvas2 = _interopRequireDefault(_canvas);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var NodeCanvasImage = typeof _canvas2.default !== 'undefined' ? _canvas2.default.Image : undefined;
	
	/**
	 * The renderer that is used for WebGL rendering
	 * @class
	 * @extends PhotoEditorSDK.Engine.BaseRenderer
	 * @memberof PhotoEditorSDK.Engine
	 */
	/* istanbul ignore next */
	
	
	// For server-side environments
	/* global Image */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var WebGLRenderer = function (_BaseRenderer) {
	  (0, _inherits3.default)(WebGLRenderer, _BaseRenderer);
	
	  /**
	   * Creates a WebGLRenderer
	   * @override
	   */
	
	  function WebGLRenderer() {
	    (0, _classCallCheck3.default)(this, WebGLRenderer);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseRenderer.call.apply(_BaseRenderer, [this].concat(args)));
	
	    _this._type = 'webgl';
	
	    _this._textures = [];
	    _this._fakeObject = new _displayObject2.default();
	    _this._onContextLost = _this._onContextLost.bind(_this);
	    _this._onContextRestored = _this._onContextRestored.bind(_this);
	
	    _this.setCanvas(_this._options.canvas || _globals.Utils.createCanvas());
	
	    _this.shaders = _this._initShaders();
	    _this.renderers = _this._initRenderers();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- CONTEXT LOSS
	
	  /**
	   * Gets called when the WebGL context has been lost
	   * @param  {Event} e
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._onContextLost = function _onContextLost(e) {
	    e.preventDefault();
	    _globals.Log.warn(this.constructor.name, 'WebGL context has been lost - trying to restore.');
	  };
	
	  /**
	   * Gets called when the WebGL context has been restored. Cleans up and resets everything.
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._onContextRestored = function _onContextRestored() {
	    var _this2 = this;
	
	    _globals.Log.warn(this.constructor.name, 'WebGL context has been restored. Clearing all textures.');
	
	    this._textures.forEach(function (texture) {
	      texture.disposeGLTextures(_this2);
	    });
	
	    this._createContext();
	    this._setupContext();
	    this.emit('context-restored');
	  };
	
	  /**
	   * Gets called before the context has been set up
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._onBeforeContext = function _onBeforeContext() {
	    this._filterManager = new _webglFilterManager2.default(this);
	    this._currentObjectRenderer = new _objectRenderer2.default(this);
	  };
	
	  /**
	   * Sets the given shader to active
	   * @param {PhotoEditorSDK.Engine.Shader} shader
	   */
	
	
	  WebGLRenderer.prototype.setShader = function setShader(shader) {
	    this._currentShader = shader;
	    this._context.useProgram(shader.getProgram());
	    this._setAttributesForShader(shader);
	  };
	
	  /**
	   * Sets the canvas to the given one
	   * @param {HTMLCanvasElement} canvas
	   */
	
	
	  WebGLRenderer.prototype.setCanvas = function setCanvas(canvas) {
	    if (this._canvas) {
	      this._canvas.removeEventListener('webglcontextlost', this._onContextLost);
	      this._canvas.removeEventListener('webglcontextrestored', this._onContextRestored);
	    }
	
	    if (canvas.addEventListener) {
	      // node-canvas doesn't have events
	      canvas.addEventListener('webglcontextlost', this._onContextLost);
	      canvas.addEventListener('webglcontextrestored', this._onContextRestored);
	    }
	
	    _BaseRenderer.prototype.setCanvas.call(this, canvas);
	  };
	
	  /**
	   * Uploads the given shader's attributes to the GPU
	   * @param {PhotoEditorSDK.Engine.Shader} shader
	   */
	
	
	  WebGLRenderer.prototype._setAttributesForShader = function _setAttributesForShader(shader) {
	    var gl = this._context;
	    var attributes = shader.getAttributes();
	    var attributeLocations = shader.getAttributeLocations();
	
	    attributes.forEach(function (attributeName) {
	      var attributeLocation = attributeLocations[attributeName];
	      gl.enableVertexAttribArray(attributeLocation);
	    });
	  };
	
	  /**
	   * Initializes the default shaders
	   * @return {Object}
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._initShaders = function _initShaders() {
	    return {
	      default: new _textureShader2.default(this)
	    };
	  };
	
	  /**
	   * Initializes the available object renderers
	   * @return {Object}
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._initRenderers = function _initRenderers() {
	    return {
	      sprite: new _spriteRenderer2.default(this)
	    };
	  };
	
	  /**
	   * Gets the rendering context for this renderer
	   * @returns {Object}
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._createContext = function _createContext() {
	    var canvas = this._canvas;
	    var gl = null;
	
	    // If node-gl is available, use it for context creation. This allows us
	    // to render images on the server-side with hardware accelerated graphics
	    var createContext = __webpack_require__(28);
	    if (createContext) {
	      gl = createContext(canvas.width, canvas.height, {
	        preserveDrawingBuffer: true
	      });
	    } else {
	      gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
	    }
	
	    // Hook up WebGLDebugUtils if present
	    if (typeof window !== 'undefined' && window.WebGLDebugUtils && this._options.debug) {
	      var logGL = function logGL(functionName, args) {
	        console.error('gl.' + functionName + '(' + window.WebGLDebugUtils.glFunctionArgsToString(functionName, args) + ')');
	      };
	      gl = window.WebGLDebugUtils.makeDebugContext(gl, null, logGL);
	    }
	
	    // Hook up ContextPerformanceHook if debug is enabled
	    if (this._options.debug) {
	      gl = new _contextPerformanceHook2.default(gl);
	    }
	
	    this.id = gl.id = WebGLRenderer.contextId++;
	    this._context = gl;
	    gl.renderer = this;
	
	    this._maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
	
	    this.emit('context', gl);
	
	    return gl;
	  };
	
	  /**
	   * Sets up the rendering context for this renderer
	   * @private
	   */
	
	
	  WebGLRenderer.prototype._setupContext = function _setupContext() {
	    var gl = this._context;
	
	    gl.disable(gl.DEPTH_TEST);
	    gl.disable(gl.CULL_FACE);
	    gl.enable(gl.BLEND);
	    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
	
	    this._defaultRenderTarget = new _webglRenderTarget2.default(this, this._width, this._height, this._pixelRatio, true);
	    this.setRenderTarget(this._defaultRenderTarget);
	  };
	
	  /**
	   * Resizes the context and view to the given size
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  WebGLRenderer.prototype.resizeTo = function resizeTo(dimensions) {
	    _BaseRenderer.prototype.resizeTo.call(this, dimensions);
	    if (this._currentRenderTarget) {
	      this._currentRenderTarget.resizeTo(dimensions);
	    }
	
	    if (__webpack_require__(28)) {
	      this._context.resize(dimensions.x, dimensions.y);
	    }
	  };
	
	  /**
	   * Sets the current render target to the passed one and activates
	   * it for rendering
	   * @param {PhotoEditorSDK.Engine.RenderTarget} renderTarget
	   */
	
	
	  WebGLRenderer.prototype.setRenderTarget = function setRenderTarget(renderTarget) {
	    this._currentRenderTarget = renderTarget;
	    this._currentRenderTarget.activate();
	  };
	
	  /**
	   * Sets the current object renderer to the given one
	   * @param {PhotoEditorSDK.Engine.ObjectRenderer} objectRenderer
	   */
	
	
	  WebGLRenderer.prototype.setObjectRenderer = function setObjectRenderer(objectRenderer) {
	    this._currentObjectRenderer.stop();
	    this._currentObjectRenderer = objectRenderer;
	    this._currentObjectRenderer.start();
	  };
	
	  /**
	   * Renders the given DisplayObject
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   */
	
	
	  WebGLRenderer.prototype.render = function render(displayObject) {
	    this.setRenderTarget(this._defaultRenderTarget);
	    this._defaultRenderTarget.clear(this._clearColor);
	
	    // Since the given displayObject is the "root" object
	    // right now, we need to give it a dummy / fake object
	    // as parent with the default world transform and alpha
	    var originalParent = displayObject.getParent();
	    displayObject.setParent(this._fakeObject);
	
	    // Update transforms and render this object
	    displayObject.updateTransform();
	
	    // Reset parent
	    displayObject.setParent(originalParent);
	
	    this.renderDisplayObject(displayObject, this._defaultRenderTarget);
	  };
	
	  /**
	   * Renders the given DisplayObject
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} renderTarget
	   */
	
	
	  WebGLRenderer.prototype.renderDisplayObject = function renderDisplayObject(displayObject, renderTarget) {
	    this.setRenderTarget(renderTarget);
	    this._filterManager.setFilterStack(renderTarget.getFilterStack());
	    displayObject.renderWebGL(this);
	    this._currentObjectRenderer.flush();
	  };
	
	  /**
	   * Clears the context
	   */
	
	
	  WebGLRenderer.prototype.clear = function clear() {
	    var gl = this._context;
	
	    gl.clearColor.apply(gl, this._clearColor.toGLColor());
	    gl.clear(gl.COLOR_BUFFER_BIT);
	  };
	
	  /**
	   * Returns and/or creates a WebGLTexture for the given BaseTexture object
	   * @param  {PhotoEditorSDK.Engine.BaseTexture} texture
	   * @return {PhotoEditorSDK.Engine.WebGLTexture}
	   */
	
	
	  WebGLRenderer.prototype.getOrCreateGLTexture = function getOrCreateGLTexture(texture) {
	    var gl = this._context;
	
	    var glTexture = texture.getGLTextureForId(gl.id);
	    if (!glTexture) {
	      glTexture = gl.createTexture();
	      texture.setGLTextureForId(glTexture, gl.id);
	
	      // Hold reference to texture for easier disposal
	      this._textures.push(texture);
	    }
	
	    return glTexture;
	  };
	
	  /**
	   * Updates the given texture
	   * @param  {PhotoEditorSDK.Engine.BaseTexture} texture
	   * @param  {Boolean} [upload = true]
	   */
	
	
	  WebGLRenderer.prototype.updateTexture = function updateTexture(texture) {
	    var upload = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    var source = texture.getSource();
	    var hasSource = !!source;
	
	    var gl = this._context;
	    var glUnit = texture.getGLUnit();
	    var glTexture = this.getOrCreateGLTexture(texture);
	
	    gl.activeTexture(gl.TEXTURE0 + glUnit);
	    gl.bindTexture(gl.TEXTURE_2D, glTexture);
	
	    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
	
	    if (__webpack_require__(28)) {
	      gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
	    }
	
	    if (upload && hasSource) {
	      if (typeof Image !== 'undefined' && source instanceof Image || source.constructor.name === 'Canvas' || source.tagName && source.tagName.toUpperCase() === 'CANVAS') {
	        // Default client-side behavior: Upload the `source` image
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);
	      } else {
	        // In case we're on the server side, convert a `node-canvas` Image object
	        // into a PixelArrayImage
	        if (typeof NodeCanvasImage !== 'undefined' && source instanceof NodeCanvasImage) {
	          source = _pixelArrayImage2.default.fromNodeCanvasImage(source);
	        }
	
	        // Upload the PixelArrayImage's data (a Uint8Array)
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.width, source.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, source.data);
	      }
	    }
	
	    if (texture.isMipMappingEnabled()) {
	      gl.generateMipmap(gl.TEXTURE_2D);
	    } else {
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    }
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, texture.getGLFilter(gl, 'min'));
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, texture.getGLFilter(gl, 'mag'));
	    gl.activeTexture(gl.TEXTURE0);
	  };
	
	  /**
	   * Returns the maximum dimensions
	   * @return {Number}
	   */
	
	
	  WebGLRenderer.prototype.getMaxDimensions = function getMaxDimensions() {
	    // node-gl support
	    var createContext = __webpack_require__(28);
	    if (createContext) {
	      var _gl = createContext(1, 1);
	      return _gl.getParameter(_gl.MAX_TEXTURE_SIZE);
	    }
	
	    var canvas = _globals.Utils.createCanvas();
	    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
	    if (!gl) {
	      return null;
	    } else {
	      return gl.getParameter(gl.MAX_TEXTURE_SIZE);
	    }
	  };
	
	  /**
	   * Returns the current render target
	   * @return {PhotoEditorSDK.Engine.RenderTarget}
	   */
	
	
	  WebGLRenderer.prototype.getCurrentRenderTarget = function getCurrentRenderTarget() {
	    return this._currentRenderTarget;
	  };
	
	  /**
	   * Returns the current object renderer
	   * @return {PhotoEditorSDK.Engine.ObjectRenderer}
	   */
	
	
	  WebGLRenderer.prototype.getCurrentObjectRenderer = function getCurrentObjectRenderer() {
	    return this._currentObjectRenderer;
	  };
	
	  /**
	   * Checks if this renderer is supported on the current device and browser
	   * @return {Boolean}
	   */
	
	
	  WebGLRenderer.isSupported = function isSupported() {
	    if (__webpack_require__(28)) {
	      // We're on the server side and node-gl is available
	      return true;
	    }
	
	    if (typeof window === 'undefined') {
	      return false;
	    }
	
	    var canvas = _globals.Utils.createCanvas();
	    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
	    return !!gl;
	  };
	
	  /**
	   * Disposes this Renderer
	   */
	
	
	  WebGLRenderer.prototype.dispose = function dispose() {
	    var _this3 = this;
	
	    this._filterManager.dispose();
	    this._currentObjectRenderer.dispose();
	    this._defaultRenderTarget.dispose();
	    this._textures.forEach(function (texture) {
	      texture.disposeGLTextures(_this3);
	    });
	  };
	
	  return WebGLRenderer;
	}(_baseRenderer2.default);
	
	WebGLRenderer.contextId = 0;
	WebGLRenderer.type = 'WebGL';
	
	exports.default = WebGLRenderer;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _textureShader = __webpack_require__(45);
	
	var _textureShader2 = _interopRequireDefault(_textureShader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	  TextureShader: _textureShader2.default
	}; /*
	    * This file is part of PhotoEditorSDK.
	    *
	    * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	    * All rights reserved.
	    *
	    * Redistribution and use in source and binary forms, without
	    * modification, are permitted provided that the following license agreement
	    * is approved and a legal/financial contract was signed by the user.
	    * The license agreement can be found under following link:
	    *
	    * https://www.photoeditorsdk.com/LICENSE.txt
	    */

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _container = __webpack_require__(66);
	
	var _container2 = _interopRequireDefault(_container);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A drawable rectangle with a texture
	 * @class
	 * @extends PhotoEditorSDK.Engine.Container
	 * @memberof PhotoEditorSDK.Engine
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Sprite = function (_Container) {
	  (0, _inherits3.default)(Sprite, _Container);
	
	  /**
	   * Creates a Sprite
	   * @param  {PhotoEditorSDK.Engine.Texture} texture
	   */
	
	  function Sprite(texture) {
	    (0, _classCallCheck3.default)(this, Sprite);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Container.call(this));
	
	    _this._onTextureUpdate = _this._onTextureUpdate.bind(_this);
	
	    _this._texture = texture;
	    _this._shader = null;
	
	    // Cached dimensions
	    _this._width = 0;
	    _this._height = 0;
	
	    _this._anchor = new _globals.Vector2(0, 0);
	
	    _this.setTexture(texture);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when this sprite's texture has been updated
	   * @private
	   */
	
	
	  Sprite.prototype._onTextureUpdate = function _onTextureUpdate() {
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the contents of this container
	   * @param {WebGLRenderer} renderer
	   * @private
	   */
	
	
	  Sprite.prototype._renderWebGL = function _renderWebGL(renderer) {
	    renderer.setObjectRenderer(renderer.renderers.sprite);
	    renderer.renderers.sprite.render(this);
	  };
	
	  /**
	   * Renders the contents of this container
	   * @param  {CanvasRenderer} renderer
	   * @private
	   */
	
	
	  Sprite.prototype._renderCanvas = function _renderCanvas(renderer) {
	    var transform = this._worldTransform;
	    var textureFrame = this._texture.getFrame();
	
	    var width = textureFrame.width;
	    var height = textureFrame.height;
	
	    var pixelRatio = renderer.getPixelRatio();
	
	    // Apply transform
	    var dx = this._anchor.x * -width;
	    var dy = this._anchor.y * -height;
	    var ctx = renderer.getContext();
	    ctx.setTransform(transform.a, transform.b, transform.c, transform.d, transform.tx * pixelRatio, transform.ty * pixelRatio);
	
	    ctx.globalAlpha = this.getWorldAlpha();
	
	    var baseTexture = this._texture.getBaseTexture();
	    var texturePixelRatio = baseTexture.getPixelRatio();
	    ctx.drawImage(this._texture.getBaseTexture().getSource(),
	
	    // Source x, y, width, height
	    0, 0, width * texturePixelRatio, height * texturePixelRatio,
	
	    // Destination x, y, width, height
	    dx * pixelRatio, dy * pixelRatio, width * pixelRatio, height * pixelRatio);
	  };
	
	  // -------------------------------------------------------------------------- PUBLIC API
	
	  /**
	   * Checks if this sprite is located at the given position
	   * @param  {PhotoEditorSDK.Math.Vector2}  position
	   * @return {Boolean}
	   */
	
	
	  Sprite.prototype.isAtPosition = function isAtPosition(position) {
	    var localPosition = this._worldTransform.applyInverseToVector(position);
	    var textureFrame = this._texture.getFrame();
	    var width = textureFrame.width;
	    var height = textureFrame.height;
	
	
	    var upperLeft = new _globals.Vector2(-width, -height);
	    upperLeft.multiply(this._anchor);
	    var lowerRight = upperLeft.clone().add(width, height);
	
	    if (localPosition.x < upperLeft.x || localPosition.x > lowerRight.x || localPosition.y < upperLeft.y || localPosition.y > lowerRight.y) {
	      return false;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns the non-global bounds of this DisplayObject
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Sprite.prototype.getLocalBounds = function getLocalBounds() {
	    if (this._localBoundsNeedUpdate) {
	      var bounds = this._localBounds;
	      var textureFrame = this._texture.getFrame();
	
	      bounds.x = -textureFrame.width * this._anchor.x;
	      bounds.y = -textureFrame.height * this._anchor.y;
	      bounds.width = textureFrame.width;
	      bounds.height = textureFrame.height;
	
	      this._localBoundsNeedUpdate = false;
	    }
	    return this._localBounds.clone();
	  };
	
	  /**
	   * Returns the bounds for this DisplayObject
	   * @return {PhotoEditorSDK.Math.Rectangle}
	   */
	
	
	  Sprite.prototype.getBounds = function getBounds() {
	    var _this2 = this;
	
	    if (this._boundsNeedUpdate) {
	      (function () {
	        var bounds = _this2._bounds;
	        var textureFrame = _this2._texture.getFrame();
	
	        // @TODO Optimize this (if necessary). We could skip matrix application
	        //       when there's no rotation
	        var worldTransform = _this2._worldTransform;
	        var anchor = _this2._anchor;
	        var positions = worldTransform.rectangleToCoordinates(textureFrame, anchor);
	
	        var minX = positions[0].x;
	        var minY = positions[0].y;
	        var maxX = minX;
	        var maxY = minY;
	
	        positions.forEach(function (_ref) {
	          var x = _ref.x;
	          var y = _ref.y;
	
	          minX = Math.min(minX, x);
	          minY = Math.min(minY, y);
	          maxX = Math.max(maxX, x);
	          maxY = Math.max(maxY, y);
	        });
	
	        bounds.x = minX;
	        bounds.width = Math.abs(maxX - minX);
	        bounds.y = minY;
	        bounds.height = Math.abs(maxY - minY);
	
	        _this2._boundsNeedUpdate = false;
	      })();
	    }
	    return this._bounds.clone();
	  };
	
	  // -------------------------------------------------------------------------- GETTERS / SETTERS
	
	  /**
	   * Returns the current texture
	   * @return {PhotoEditorSDK.Engine.Texture} [description]
	   */
	
	
	  Sprite.prototype.getTexture = function getTexture() {
	    return this._texture;
	  };
	
	  /**
	   * Sets the texture
	   * @param {PhotoEditorSDK.Engine.Texture} texture
	   */
	
	
	  Sprite.prototype.setTexture = function setTexture(texture) {
	    if (!texture) {
	      return;
	    }
	
	    if (this._texture) {
	      this._texture.off('update', this._onTextureUpdate);
	    }
	
	    this._texture = texture;
	    if (texture.getBaseTexture().isLoaded()) {
	      this._onTextureUpdate();
	    }
	    texture.on('update', this._onTextureUpdate);
	  };
	
	  /**
	   * Returns the shader
	   * @return {PhotoEditorSDK.Engine.Shader}
	   */
	
	
	  Sprite.prototype.getShader = function getShader() {
	    return this._shader;
	  };
	
	  /**
	   * Sets the shader
	   * @param {PhotoEditorSDK.Engine.Shader} shader
	   */
	
	
	  Sprite.prototype.setShader = function setShader(shader) {
	    this._shader = shader;
	  };
	
	  /**
	   * Returns the width
	   * @return {Number}
	   */
	
	
	  Sprite.prototype.getWidth = function getWidth() {
	    return this._width;
	  };
	
	  /**
	   * Sets the width
	   * @param {Number} width
	   */
	
	
	  Sprite.prototype.setWidth = function setWidth(width) {
	    this._scale.x = width / this._texture.getFrame().width;
	    this._width = width;
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Returns the height
	   * @return {Number}
	   */
	
	
	  Sprite.prototype.getHeight = function getHeight() {
	    return this._height;
	  };
	
	  /**
	   * Sets the height
	   * @param {Number} height
	   */
	
	
	  Sprite.prototype.setHeight = function setHeight(height) {
	    this._scale.y = height / this._texture.getFrame().height;
	    this._height = height;
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Returns the anchor
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Sprite.prototype.getAnchor = function getAnchor() {
	    return this._anchor;
	  };
	
	  /**
	   * Sets the anchor
	   * @param {PhotoEditorSDK.Math.Vector2} anchor
	   */
	
	
	  Sprite.prototype.setAnchor = function setAnchor(anchor, y) {
	    if (anchor instanceof _globals.Vector2) {
	      this._anchor.copy(anchor);
	    } else {
	      this._anchor.set(anchor, y);
	    }
	    this._boundsNeedUpdate = true;
	    this._localBoundsNeedUpdate = true;
	  };
	
	  /**
	   * Disposes this Sprite
	   */
	
	
	  Sprite.prototype.dispose = function dispose() {
	    if (this._texture) {
	      this._texture.off('update', this._onTextureUpdate);
	    }
	  };
	
	  return Sprite;
	}(_container2.default);
	
	exports.default = Sprite;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(6);
	
	var _texture = __webpack_require__(69);
	
	var _texture2 = _interopRequireDefault(_texture);
	
	var _baseTexture = __webpack_require__(46);
	
	var _baseTexture2 = _interopRequireDefault(_baseTexture);
	
	var _webglRenderTarget = __webpack_require__(30);
	
	var _webglRenderTarget2 = _interopRequireDefault(_webglRenderTarget);
	
	var _canvasRenderTarget = __webpack_require__(29);
	
	var _canvasRenderTarget2 = _interopRequireDefault(_canvasRenderTarget);
	
	var _webglFilterManager = __webpack_require__(43);
	
	var _webglFilterManager2 = _interopRequireDefault(_webglFilterManager);
	
	var _canvasFilterManager = __webpack_require__(42);
	
	var _canvasFilterManager2 = _interopRequireDefault(_canvasFilterManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A texture that you can render to
	 * @class
	 * @extends PhotoEditorSDK.Engine.Texture
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var RenderTexture = function (_Texture) {
	  (0, _inherits3.default)(RenderTexture, _Texture);
	
	  /**
	   * Creates a RenderTexture
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @param  {Number} [width = 100]
	   * @param  {Number} [height = 100]
	   * @param  {Number} [pixelRatio = 1]
	   */
	
	  function RenderTexture(renderer) {
	    var width = arguments.length <= 1 || arguments[1] === undefined ? 100 : arguments[1];
	    var height = arguments.length <= 2 || arguments[2] === undefined ? 100 : arguments[2];
	    var pixelRatio = arguments.length <= 3 || arguments[3] === undefined ? 1 : arguments[3];
	    (0, _classCallCheck3.default)(this, RenderTexture);
	
	    var baseTexture = new _baseTexture2.default();
	    var frame = baseTexture.getFrame();
	    frame.width = width;
	    frame.height = height;
	    baseTexture.setPixelRatio(pixelRatio);
	    baseTexture.setLoaded(true);
	
	
	    // RenderTexture is always loaded!
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Texture.call(this, baseTexture, new _globals.Rectangle(0, 0, width, height)));
	
	    _this._loaded = true;
	    _this._width = width;
	    _this._height = height;
	    _this._pixelRatio = pixelRatio;
	    _this._renderer = renderer;
	
	    _this._setupFilterManager();
	    _this._setupBuffer();
	    _this._updateUVs();
	    return _this;
	  }
	
	  /**
	   * Sets up the filter manager
	   * @private
	   */
	
	
	  RenderTexture.prototype._setupFilterManager = function _setupFilterManager() {
	    /* istanbul ignore if */
	    if (this._renderer.isOfType('webgl')) {
	      this._filterManager = new _webglFilterManager2.default(this._renderer);
	    } else if (this._renderer.isOfType('canvas')) {
	      this._filterManager = new _canvasFilterManager2.default(this._renderer);
	    }
	
	    this._filterManager.resizeTo(new _globals.Vector2(this._width, this._height));
	  };
	
	  /**
	   * Sets up the buffer that we're rendering to
	   * @private
	   */
	
	
	  RenderTexture.prototype._setupBuffer = function _setupBuffer() {
	    /* istanbul ignore if */
	    if (this._renderer.isOfType('webgl')) {
	      this._setupWebGLBuffer();
	    } else if (this._renderer.isOfType('canvas')) {
	      this._setupCanvasRenderTarget();
	    }
	  };
	
	  /**
	   * Sets up the WebGLRenderTarget for this RenderTexture
	   * @private
	   */
	
	
	  RenderTexture.prototype._setupWebGLBuffer = function _setupWebGLBuffer() {
	    this._renderTarget = new _webglRenderTarget2.default(this._renderer, this._width, this._height, this._pixelRatio);
	    this._baseTexture.setGLTextureForId(this._renderTarget.getTexture(), this._renderer.getContext().id);
	  };
	
	  /**
	   * Sets up the CanvasRenderTarget for this RenderTexture
	   * @private
	   */
	
	
	  RenderTexture.prototype._setupCanvasRenderTarget = function _setupCanvasRenderTarget() {
	    this._renderTarget = new _canvasRenderTarget2.default(this._width, this._height, this._pixelRatio);
	    this._baseTexture.setSource(this._renderTarget.getCanvas());
	  };
	
	  /**
	   * Clears this texture's render buffer
	   * @param {PhotoEditorSDK.Color} color
	   */
	
	
	  RenderTexture.prototype.clear = function clear(color) {
	    this._renderTarget.clear(color);
	  };
	
	  /**
	   * Resizes this RenderTexture to the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   */
	
	
	  RenderTexture.prototype.resizeTo = function resizeTo(dimensions) {
	    if (this._width === dimensions.x && this._height === dimensions.y) {
	      return;
	    }
	
	    this._width = dimensions.x;
	    this._height = dimensions.y;
	    this._frame.width = dimensions.x;
	    this._frame.height = dimensions.y;
	
	    this._baseTexture.resizeTo(dimensions);
	    this._renderTarget.resizeTo(dimensions);
	    this._filterManager.resizeTo(dimensions);
	  };
	
	  /**
	   * Renders the given DisplayObject
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   */
	
	
	  RenderTexture.prototype.render = function render(displayObject) {
	    /* istanbul ignore if */
	    if (this._renderer.isOfType('webgl')) {
	      this._renderWebGL(displayObject);
	    } else if (this._renderer.isOfType('canvas')) {
	      this._renderCanvas(displayObject);
	    } else {
	      throw new Error('RenderTexture does not support rendering via ' + this._renderer.constructor.name);
	    }
	  };
	
	  /**
	   * Renders the given DisplayObject using WebGL
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @private
	   */
	
	
	  RenderTexture.prototype._renderWebGL = function _renderWebGL(displayObject) {
	    this._renderTarget.activate();
	
	    displayObject.getWorldTransform().reset();
	    displayObject.getChildren().forEach(function (child) {
	      child.updateTransform();
	    });
	
	    var tempFilterManager = this._renderer.getFilterManager();
	    this._renderer.setFilterManager(this._filterManager);
	    this._renderer.renderDisplayObject(displayObject, this._renderTarget);
	    this._renderer.setFilterManager(tempFilterManager);
	  };
	
	  /**
	   * Renders the given DisplayObject using Canvas2D
	   * @param  {PhotoEditorSDK.Engine.DisplayObject} displayObject
	   * @private
	   */
	
	
	  RenderTexture.prototype._renderCanvas = function _renderCanvas(displayObject) {
	    displayObject.getWorldTransform().reset();
	    displayObject.getChildren().forEach(function (child) {
	      child.updateTransform();
	    });
	
	    var tempFilterManager = this._renderer.getFilterManager();
	    this._renderer.setFilterManager(this._filterManager);
	    this._renderer.renderDisplayObject(displayObject, this._renderTarget);
	    this._renderer.setFilterManager(tempFilterManager);
	  };
	
	  /**
	   * Returns the render target
	   * @return {PhotoEditorSDK.Engine.WebGLRenderTarget}
	   */
	
	
	  RenderTexture.prototype.getRenderTarget = function getRenderTarget() {
	    return this._renderTarget;
	  };
	
	  /**
	   * Disposes this RenderTexture
	   */
	
	
	  RenderTexture.prototype.dispose = function dispose() {
	    this._baseTexture.dispose(this._renderer);
	    this._renderTarget.dispose();
	    this._filterManager.dispose();
	  };
	
	  return RenderTexture;
	}(_texture2.default); /*
	                       * This file is part of PhotoEditorSDK.
	                       *
	                       * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                       * All rights reserved.
	                       *
	                       * Redistribution and use in source and binary forms, without
	                       * modification, are permitted provided that the following license agreement
	                       * is approved and a legal/financial contract was signed by the user.
	                       * The license agreement can be found under following link:
	                       *
	                       * https://www.photoeditorsdk.com/LICENSE.txt
	                       */
	
	exports.default = RenderTexture;

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * Represents a rectangle that is rendered using WebGL
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 * @ignore
	 */
	/* istanbul ignore next */
	
	var Quad = function () {
	  function Quad(renderer) {
	    (0, _classCallCheck3.default)(this, Quad);
	
	    this._renderer = renderer;
	
	    this._vertices = new Float32Array([0, 0, 100, 0, 100, 100, 0, 100]);
	
	    this._uvs = new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]);
	
	    this._indices = new Uint16Array([0, 1, 2, 0, 3, 2]);
	
	    this._colors = new Float32Array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
	
	    this._initBuffers();
	    this._uploadBuffers();
	  }
	
	  /**
	   * Maps the given rectangles to the quad
	   * @param  {Rectangle} rect1
	   * @param  {Rectangle} rect2
	   */
	
	
	  Quad.prototype.map = function map(rect1, rect2) {
	    var x = rect2.x;
	    var y = rect2.y;
	
	    // Update the UVs
	    // We don't have any translation, so these four
	    // values are all we need
	
	    this._uvs[2] = rect2.width / rect1.width;
	    this._uvs[4] = this._uvs[2];
	    this._uvs[5] = rect2.height / rect1.height;
	    this._uvs[7] = this._uvs[5];
	
	    // Update the vertices
	    this._vertices[0] = x;
	    this._vertices[1] = y;
	
	    this._vertices[2] = x + rect2.width;
	    this._vertices[3] = y;
	
	    this._vertices[4] = this._vertices[2];
	    this._vertices[5] = y + rect2.height;
	
	    this._vertices[6] = x;
	    this._vertices[7] = this._vertices[5];
	
	    this._uploadBuffers();
	  };
	
	  /**
	   * Initializes the buffers
	   * @private
	   */
	
	
	  Quad.prototype._initBuffers = function _initBuffers() {
	    var gl = this._renderer.getContext();
	
	    // Init vertex buffer
	    this._vertexBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
	    gl.bufferData(gl.ARRAY_BUFFER, (8 + 8 + 16) * 4, gl.DYNAMIC_DRAW);
	
	    this._indexBuffer = gl.createBuffer();
	    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
	    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indices, gl.STATIC_DRAW);
	  };
	
	  /**
	   * Uploads the buffers
	   * @private
	   */
	
	
	  Quad.prototype._uploadBuffers = function _uploadBuffers() {
	    var gl = this._renderer.getContext();
	
	    gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
	    gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._vertices);
	    gl.bufferSubData(gl.ARRAY_BUFFER, 8 * 4, this._uvs);
	    gl.bufferSubData(gl.ARRAY_BUFFER, (8 + 8) * 4, this._colors);
	  };
	
	  Quad.prototype.getVertexBuffer = function getVertexBuffer() {
	    return this._vertexBuffer;
	  };
	
	  Quad.prototype.getIndexBuffer = function getIndexBuffer() {
	    return this._indexBuffer;
	  };
	
	  /**
	   * Cleans up this Quad's buffers
	   */
	
	
	  Quad.prototype.dispose = function dispose() {
	    var gl = this._renderer.getContext();
	    gl.deleteBuffer(this._vertexBuffer);
	    gl.deleteBuffer(this._indexBuffer);
	  };
	
	  return Quad;
	}();
	
	exports.default = Quad;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(6);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Represents the UV coordinates of a texture
	 * @class
	 * @memberof PhotoEditorSDK.Engine
	 */
	
	var TextureUVs = function () {
	  /**
	   * Creates a TextureUVs instance
	   */
	
	  function TextureUVs() {
	    (0, _classCallCheck3.default)(this, TextureUVs);
	
	    this._uvs = [new _globals.Vector2(0, 0), new _globals.Vector2(1, 0), new _globals.Vector2(1, 1), new _globals.Vector2(0, 1)];
	  }
	
	  /**
	   * Updates the UVs based on the given baseframe
	   * @param  {Rectangle} frame
	   * @param  {Rectangle} baseFrame
	   */
	
	
	  TextureUVs.prototype.update = function update(frame, baseFrame) {
	    // Upper left
	    var uv = this._uvs[0];
	    uv.x = frame.x / baseFrame.width;
	    uv.y = frame.y / baseFrame.height;
	
	    // Upper right
	    uv = this._uvs[1];
	    uv.x = (frame.x + frame.width) / baseFrame.width;
	    uv.y = frame.y / baseFrame.height;
	
	    // Lower right
	    uv = this._uvs[2];
	    uv.x = (frame.x + frame.width) / baseFrame.width;
	    uv.y = (frame.y + frame.height) / baseFrame.height;
	
	    // Lower left
	    uv = this._uvs[3];
	    uv.x = frame.x / baseFrame.width;
	    uv.y = (frame.y + frame.height) / baseFrame.height;
	  };
	
	  /**
	   * Returns the UV coordinates for the given index
	   * @param  {Number} index
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  TextureUVs.prototype.getUVsAt = function getUVsAt(index) {
	    return this._uvs[index];
	  };
	
	  /**
	   * Returns the UV coordinates
	   * @return {Array.<PhotoEditorSDK.Math.Vector2>}
	   */
	
	
	  TextureUVs.prototype.getUVs = function getUVs() {
	    return this._uvs;
	  };
	
	  return TextureUVs;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = TextureUVs;

/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * A couple of utility functions
	 * @type {Object}
	 */
	var Utils = {
	  /**
	   * Assigns own enumerable properties of source object(s) to the destination
	   * object for all destination properties that resolve to undefined. Once a
	   * property is set, additional values of the same property are ignored.
	   * @param  {Object} object
	   * @param  {Object} ...sources
	   * @return {Object}
	   */
	  defaults: function defaults(object) {
	    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      sources[_key - 1] = arguments[_key];
	    }
	
	    // Shallow clone
	    var newObject = {};
	    for (var key in object) {
	      newObject[key] = object[key];
	    }
	
	    // Clone sources
	    for (var i = 0; i < sources.length; i++) {
	      var source = sources[i];
	      for (var _key2 in source) {
	        if (typeof newObject[_key2] === 'undefined') {
	          newObject[_key2] = source[_key2];
	        }
	      }
	    }
	
	    return newObject;
	  },
	
	  /**
	   * Assigns own enumerable properties of source object(s) to the destination
	   * object. Subsequent sources overwrite property assignments of previous
	   * sources.
	   * @param {Object} object
	   * @param {Object} ...sources
	   * @return {Object}
	   */
	  extend: function extend(object) {
	    for (var _len2 = arguments.length, sources = Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
	      sources[_key3 - 1] = arguments[_key3];
	    }
	
	    // Shallow clone
	    var newObject = {};
	    for (var key in object) {
	      newObject[key] = object[key];
	    }
	
	    // Extend sources
	    for (var i = 0; i < sources.length; i++) {
	      var source = sources[i];
	      for (var _key4 in source) {
	        newObject[_key4] = source[_key4];
	      }
	    }
	
	    return newObject;
	  }
	};
	
	exports.default = Utils;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _sdk = __webpack_require__(95);
	
	var _sdk2 = _interopRequireDefault(_sdk);
	
	var _math = __webpack_require__(62);
	
	var Math = _interopRequireWildcard(_math);
	
	var _operations = __webpack_require__(64);
	
	var Operations = _interopRequireWildcard(_operations);
	
	var _filters = __webpack_require__(94);
	
	var Filters = _interopRequireWildcard(_filters);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _eventEmitter = __webpack_require__(21);
	
	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);
	
	var _utils = __webpack_require__(22);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _operationsStack = __webpack_require__(63);
	
	var _operationsStack2 = _interopRequireDefault(_operationsStack);
	
	var _exif = __webpack_require__(40);
	
	var _exif2 = _interopRequireDefault(_exif);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _constants = __webpack_require__(38);
	
	var _base = __webpack_require__(39);
	
	var _base2 = _interopRequireDefault(_base);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The current version of the SDK
	 * @name PhotoEditorSDK.version
	 * @internal Keep in sync with package.json
	 */
	_sdk2.default.version = __webpack_require__(65).version;
	
	// Namespaces
	/*!
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	_sdk2.default.Math = Math;
	
	_sdk2.default.Operations = Operations;
	
	_sdk2.default.Filters = Filters;
	
	_sdk2.default.FilterPrimitives = FilterPrimitives;
	
	_sdk2.default.Engine = _engine2.default;
	
	// Classes
	
	_sdk2.default.Color = _color2.default;
	
	_sdk2.default.Filter = _filter2.default;
	
	_sdk2.default.Operation = _operation2.default;
	
	_sdk2.default.EventEmitter = _eventEmitter2.default;
	
	_sdk2.default.Utils = _utils2.default;
	
	_sdk2.default.OperationsStack = _operationsStack2.default;
	
	_sdk2.default.EXIF = _exif2.default;
	
	_sdk2.default.Promise = _promise2.default;
	
	// Constants
	
	_sdk2.default.RenderType = _constants.RenderType;
	_sdk2.default.ImageFormat = _constants.ImageFormat;
	
	// Libs
	
	_sdk2.default.Base64 = _base2.default;
	
	module.exports = _sdk2.default;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * An ArrayStream provides methods for working with a byte array
	 * @class
	 * @memberof PhotoEditorSDK
	 * @ignore
	 */
	
	var ArrayStream = function () {
	  /**
	   * Creates an ArrayStream
	   * @param  {Array} buf
	   */
	
	  function ArrayStream(buf) {
	    (0, _classCallCheck3.default)(this, ArrayStream);
	
	    this._head = 0;
	    this._buf = buf;
	  }
	
	  /**
	   * Returns the value of the following 8 bit integer
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.peekInt8 = function peekInt8() {
	    return this._buf[this._head];
	  };
	
	  /**
	   * Returns the value of the following 16 bit integer
	   * @param  {Boolean} [littleEndian = false]
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.peekInt16 = function peekInt16() {
	    var littleEndian = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var a = this._buf[this._head];
	    var b = this._buf[this._head + 1];
	    if (!littleEndian) {
	      return (a << 8) + b;
	    } else {
	      return (b << 8) + a;
	    }
	  };
	
	  /**
	   * Returns the value of the following 24 bit integer
	   * @param  {Boolean} [littleEndian = false]
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.peekInt24 = function peekInt24() {
	    var littleEndian = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var a = this._buf[this._head];
	    var b = this._buf[this._head + 1];
	    var c = this._buf[this._head + 2];
	    if (!littleEndian) {
	      return (a << 16) + (b << 8) + c;
	    } else {
	      return (c << 16) + (b << 8) + a;
	    }
	  };
	
	  /**
	   * Returns the value of the following 32 bit integer
	   * @param  {Boolean} [littleEndian = false]
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.peekInt32 = function peekInt32() {
	    var littleEndian = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var a = this._buf[this._head];
	    var b = this._buf[this._head + 1];
	    var c = this._buf[this._head + 2];
	    var d = this._buf[this._head + 3];
	    if (!littleEndian) {
	      return (a << 32) + (b << 16) + (c << 8) + d;
	    } else {
	      return (d << 32) + (c << 16) + (b << 8) + a;
	    }
	  };
	
	  /**
	   * Writes the given 16 bit integer at the current head position
	   * @param  {Number} num
	   */
	
	
	  ArrayStream.prototype.writeInt16 = function writeInt16(num) {
	    this._buf[this._head] = num >> 8; // upper
	    this._buf[this._head + 1] = num & 0xff; // lower
	  };
	
	  /**
	   * Returns the value of the following 8 bit integer and moves the head by 1 byte
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.readInt8 = function readInt8() {
	    var num = this.peekInt8();
	    this._head += 1;
	    return num;
	  };
	
	  /**
	   * Returns the value of the following 16 bit integer and moves the head by 2 bytes
	   * @param  {Boolean} [littleEndian = false]
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.readInt16 = function readInt16() {
	    var littleEndian = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var num = this.peekInt16(littleEndian);
	    this._head += 2;
	    return num;
	  };
	
	  /**
	   * Returns the value of the following 24 bit integer and moves the head by 3 bytes
	   * @param  {Boolean} [littleEndian = false]
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.readInt24 = function readInt24() {
	    var littleEndian = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var num = this.peekInt24(littleEndian);
	    this._head += 3;
	    return num;
	  };
	
	  /**
	   * Returns the value of the following 32 bit integer and moves the head by 4 bytes
	   * @param  {Boolean} [littleEndian = false]
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.readInt32 = function readInt32() {
	    var littleEndian = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    var num = this.peekInt32(littleEndian);
	    this._head += 4;
	    return num;
	  };
	
	  /**
	   * Reads a string with the given length
	   * @param  {Number} length
	   * @return {String}
	   */
	
	
	  ArrayStream.prototype.readString = function readString(length) {
	    var str = '';
	    for (var i = 0; i < length; i++) {
	      var character = this.readInt8();
	      str += String.fromCharCode(character);
	    }
	    return str;
	  };
	
	  /**
	   * Returns the current head position
	   * @return {Number}
	   */
	
	
	  ArrayStream.prototype.getHead = function getHead() {
	    return this._head;
	  };
	
	  /**
	   * Sets the head position
	   * @param {Number} head
	   */
	
	
	  ArrayStream.prototype.setHead = function setHead(head) {
	    this._head = head;
	  };
	
	  return ArrayStream;
	}();
	
	exports.default = ArrayStream;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _constants = __webpack_require__(38);
	
	var _utils = __webpack_require__(22);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _exif = __webpack_require__(40);
	
	var _exif2 = _interopRequireDefault(_exif);
	
	var _nodeGlExporter = __webpack_require__(109);
	
	var _nodeGlExporter2 = _interopRequireDefault(_nodeGlExporter);
	
	var _canvas = __webpack_require__(17);
	
	var _canvas2 = _interopRequireDefault(_canvas);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * @class
	 * @alias PhotoEditorSDK.ImageExporter
	 * @private
	 */
	/* global Image */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ImageExporter = function () {
	  function ImageExporter() {
	    (0, _classCallCheck3.default)(this, ImageExporter);
	  }
	
	  /**
	   * Validates the given RenderType and ImageFormat
	   * @param  {PhotoEditorSDK.RenderType} renderType
	   * @param  {PhotoEditorSDK.ImageFormat} imageFormat
	   * @return {Promise}
	   * @todo Clean this mess up
	   */
	
	  ImageExporter.validateSettings = function validateSettings(renderType, imageFormat) {
	    return new _promise2.default(function (resolve, reject) {
	      var settings = {
	        renderType: renderType,
	        imageFormat: imageFormat
	      };
	
	      // Validate RenderType
	      if (typeof settings.renderType !== 'undefined' && settings.renderType !== null && _utils2.default.values(_constants.RenderType).indexOf(settings.renderType) === -1) {
	        throw new Error('Invalid render type: ' + settings.renderType);
	      } else if (typeof renderType === 'undefined') {
	        settings.renderType = _constants.RenderType.DATAURL;
	      }
	
	      // Validate ImageFormat
	      if (typeof settings.imageFormat !== 'undefined' && settings.imageFormat !== null && _utils2.default.values(_constants.ImageFormat).indexOf(settings.imageFormat) === -1) {
	        throw new Error('Invalid image format: ' + settings.imageFormat);
	      } else if (typeof imageFormat === 'undefined') {
	        settings.imageFormat = _constants.ImageFormat.PNG;
	      }
	
	      // Render type 'buffer' only available in node
	      if (settings.renderType === _constants.RenderType.BUFFER && typeof process === 'undefined') {
	        throw new Error('Render type \'buffer\' is only available when using node.js');
	      }
	
	      resolve(settings);
	    });
	  };
	
	  /**
	   * Exports the image from the given canvas with the given options
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Image} image
	   * @param  {HTMLCanvasElement} canvas
	   * @param  {PhotoEditorSDK.RenderType} renderType
	   * @param  {PhotoEditorSDK.ImageFormat} imageFormat
	   * @param  {Number} [quality = 0.8]
	   * @return {Promise}
	   */
	
	
	  ImageExporter.export = function _export(sdk, image, canvas, renderType, imageFormat) {
	    var quality = arguments.length <= 5 || arguments[5] === undefined ? 0.8 : arguments[5];
	
	    return new _promise2.default(function (resolve, reject) {
	      var result = void 0;
	      if (renderType === _constants.RenderType.IMAGE || renderType === _constants.RenderType.DATAURL) {
	        if (typeof window === 'undefined') {
	          // Quality not supported in node environment / node-canvas
	          result = canvas.toDataURL(imageFormat);
	        } else {
	          result = canvas.toDataURL(imageFormat, quality);
	        }
	
	        // When image's `src` attribute is a jpeg data url, we can restore
	        // the exif information
	        if (_exif2.default.isJPEG(image.src) && _exif2.default.isJPEG(result)) {
	          var exif = sdk.getExif();
	          if (exif) {
	            result = exif.restoreExifTags(result);
	          }
	        }
	      }
	
	      var renderer = sdk.getRenderer();
	      if (renderer.isOfType('webgl') && typeof _canvas2.default !== 'undefined' && canvas instanceof _canvas2.default) {
	        _nodeGlExporter2.default.renderContextToCanvas(renderer.getContext(), canvas);
	      }
	
	      if (renderType === _constants.RenderType.IMAGE) {
	        var outputImage = void 0;
	
	        /* istanbul ignore else  */
	        if (typeof Image === 'undefined') {
	          // Not a browser environment
	          var CanvasImage = __webpack_require__(17).Image;
	          outputImage = new CanvasImage();
	        } else {
	          outputImage = new Image();
	        }
	
	        outputImage.src = result;
	        resolve(outputImage);
	      } else if (renderType === _constants.RenderType.DATAURL) {
	        resolve(result);
	      } else if (renderType === _constants.RenderType.BUFFER) {
	        resolve(canvas.toBuffer());
	      } else if (renderType === _constants.RenderType.MSBLOB) {
	        resolve(canvas.msToBlob());
	      } else if (renderType === _constants.RenderType.BLOB) {
	        canvas.toBlob(function (blob) {
	          resolve(blob);
	        }, imageFormat, quality);
	      }
	    });
	  };
	
	  return ImageExporter;
	}();
	
	exports.default = ImageExporter;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _canvas = __webpack_require__(17);
	
	var _canvas2 = _interopRequireDefault(_canvas);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var NodeGLExporter = function () {
	  function NodeGLExporter() {
	    (0, _classCallCheck3.default)(this, NodeGLExporter);
	  }
	
	  /**
	   * Creates a new `node-canvas` Canvas and renders the image from the `gl` context onto it
	   * @param  {WebGLRenderingContext2D} gl
	   * @param  {Canvas} canvas
	   */
	
	  NodeGLExporter.renderContextToCanvas = function renderContextToCanvas(gl, canvas) {
	    var width = canvas.width;
	    var height = canvas.height;
	
	    var pixels = new Uint8Array(width * height * 4);
	    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
	
	    var context = canvas.getContext('2d');
	    var imageData = new _canvas2.default.ImageData(width, height);
	
	    var i = 0;
	    pixels.forEach(function () {
	      imageData.data[i] = pixels[i];
	      i++;
	    });
	
	    context.putImageData(imageData, 0, 0);
	  };
	
	  return NodeGLExporter;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = NodeGLExporter;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var VERSION_CHECK_FN = 'imglySDKVersionCallback'; /*
	                                                   * This file is part of PhotoEditorSDK.
	                                                   *
	                                                   * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                                                   * All rights reserved.
	                                                   *
	                                                   * Redistribution and use in source and binary forms, without
	                                                   * modification, are permitted provided that the following license agreement
	                                                   * is approved and a legal/financial contract was signed by the user.
	                                                   * The license agreement can be found under following link:
	                                                   *
	                                                   * https://www.photoeditorsdk.com/LICENSE.txt
	                                                   */
	
	var VERSION_CHECK_URL = 'https://www.photoeditorsdk.com/version.json?sdk=html5&jsoncallback=' + VERSION_CHECK_FN;
	
	/**
	 * Checks whether there is a new version of the SDK available
	 * @class
	 * @memberof PhotoEditorSDK
	 * @ignore
	 */
	/* istanbul ignore next */
	
	var VersionChecker = function () {
	  /**
	   * Creates a new VersionChecker
	   * @param  {String} version
	   */
	
	  function VersionChecker(version) {
	    (0, _classCallCheck3.default)(this, VersionChecker);
	
	    this._version = version;
	    this._check();
	  }
	
	  /**
	   * Checks if this version of the SDK is outdated
	   * @private
	   */
	
	
	  VersionChecker.prototype._check = function _check() {
	    var _this = this;
	
	    if (typeof document === 'undefined') {
	      return _globals.Log.info(this.constructor.name, 'Not in browser environment. Version check skipped.');
	    }
	
	    var self = this;
	    window[VERSION_CHECK_FN] = function (response) {
	      if (response.outdated) {
	        _globals.Log.warn(_this.constructor.name, 'Your Version ' + self._version + ' is outdated. Current version is ' + response.version + '.');
	      }
	    };
	
	    var script = document.createElement('script');
	    script.src = VERSION_CHECK_URL + '&version=' + this._version;
	    script.async = true;
	    document.getElementsByTagName('head')[0].appendChild(script);
	  };
	
	  return VersionChecker;
	}();
	
	exports.default = VersionChecker;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _adjustmentsFilter = __webpack_require__(76);
	
	var _adjustmentsFilter2 = _interopRequireDefault(_adjustmentsFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Applies adjustments (brightness, saturation, contrast) to the image
	 * @class
	 * @alias Operations.AdjustmentsOperation
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var AdjustmentsOperation = function (_Operation) {
	  (0, _inherits3.default)(AdjustmentsOperation, _Operation);
	
	  /**
	   * Creates a new AdjustmentsOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   * @param  {Number} [options.brightness = 0]
	   * @param  {Number} [options.saturation = 1]
	   * @param  {Number} [options.contrast = 1]
	   */
	
	  function AdjustmentsOperation() {
	    (0, _classCallCheck3.default)(this, AdjustmentsOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._filter = new _adjustmentsFilter2.default();
	    _this._sprite.setFilters([_this._filter]);
	    return _this;
	  }
	
	  /**
	   * Applies this operation
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise} renderer
	   * @private
	   */
	
	
	  AdjustmentsOperation.prototype._render = function _render(sdk) {
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	    var renderer = sdk.getRenderer();
	
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    var spriteBounds = outputSprite.getBounds();
	    var spriteDimensions = new _globals.Vector2(spriteBounds.width, spriteBounds.height);
	    renderTexture.resizeTo(spriteDimensions);
	
	    this._filter.set({
	      brightness: this._options.brightness,
	      saturation: this._options.saturation,
	      contrast: this._options.contrast
	    });
	
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	
	    this.setDirtyForRenderer(false, renderer);
	
	    return _promise2.default.resolve();
	  };
	
	  return AdjustmentsOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	AdjustmentsOperation.identifier = 'adjustments';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	AdjustmentsOperation.prototype.availableOptions = {
	  brightness: { type: 'number', default: 0 },
	  saturation: { type: 'number', default: 1.0 },
	  contrast: { type: 'number', default: 1.0 }
	};
	
	exports.default = AdjustmentsOperation;

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BorderFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(BorderFilter, _Engine$Filter);
	
	  function BorderFilter() {
	    (0, _classCallCheck3.default)(this, BorderFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(213);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  BorderFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var outputContext = outputTarget.getContext();
	
	    var _options = this._options;
	    var color = _options.color;
	    var thickness = _options.thickness;
	
	
	    outputContext.save();
	    outputContext.drawImage(canvas, 0, 0);
	    outputContext.beginPath();
	    outputContext.lineWidth = thickness * 2;
	    outputContext.strokeStyle = color.toRGBA();
	    outputContext.rect(0, 0, canvas.width, canvas.height);
	    outputContext.stroke();
	    outputContext.restore();
	  };
	
	  return BorderFilter;
	}(_globals.Engine.Filter);
	
	BorderFilter.prototype.availableOptions = {
	  color: { type: 'color', default: _globals.Color.BLACK, uniformType: '4f' },
	  thickness: { type: 'number', default: 0, uniformType: 'f' },
	  textureSize: { type: 'vector2', default: new _globals.Vector2(0, 0), uniformType: '2f' }
	};
	
	/**
	 * An operation that can draw a border around the canvas
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	
	var BorderOperation = function (_Operation) {
	  (0, _inherits3.default)(BorderOperation, _Operation);
	
	  /**
	   * Creates a new BorderOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function BorderOperation() {
	    (0, _classCallCheck3.default)(this, BorderOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this2._filter = new BorderFilter();
	    _this2._sprite.setFilters([_this2._filter]);
	    return _this2;
	  }
	
	  /**
	   * Renders the border operation
	   * @param  {PhotoEditorSDK} sdk
	   * @private
	   */
	
	
	  BorderOperation.prototype._render = function _render(sdk) {
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	    var renderer = sdk.getRenderer();
	
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    var spriteBounds = outputSprite.getBounds();
	    var spriteDimensions = new _globals.Vector2(spriteBounds.width, spriteBounds.height);
	
	    renderTexture.resizeTo(spriteDimensions);
	
	    var _options2 = this._options;
	    var color = _options2.color;
	    var thickness = _options2.thickness;
	
	    // Update uniforms
	
	    this._filter.set({
	      color: color,
	      thickness: thickness,
	      textureSize: spriteDimensions
	    });
	
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	    this.setDirtyForRenderer(false, renderer);
	
	    return _globals.Promise.resolve();
	  };
	
	  return BorderOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	BorderOperation.identifier = 'border';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	BorderOperation.prototype.availableOptions = {
	  color: { type: 'color', default: new _globals.Color(0, 0, 0, 1) },
	  thickness: { type: 'number', default: 5 }
	};
	
	exports.default = BorderOperation;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _path = __webpack_require__(114);
	
	var _path2 = _interopRequireDefault(_path);
	
	var _controlPoint = __webpack_require__(77);
	
	var _controlPoint2 = _interopRequireDefault(_controlPoint);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can draw brushes on the canvas
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BrushOperation = function (_Operation) {
	  (0, _inherits3.default)(BrushOperation, _Operation);
	
	  /**
	   * Creates a new BrushOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function BrushOperation() {
	    (0, _classCallCheck3.default)(this, BrushOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._brushCanvasDirty = true;
	    _this._brushCanvas = _globals.Utils.createCanvas();
	    _this._texture = _globals.Engine.Texture.fromCanvas(_this._brushCanvas);
	    _this._sprite.setTexture(_this._texture);
	
	    _this._inputSprite = new _globals.Engine.Sprite();
	    _this._container.removeChild(_this._sprite);
	    _this._container.addChild(_this._inputSprite);
	    _this._container.addChild(_this._sprite);
	
	    _this._onPathUpdate = _this._onPathUpdate.bind(_this);
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	    _this._sdk.on(_globals.Constants.Events.OPERATION_UPDATED, _this._onOperationUpdate);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when a path has been updated
	   * @private
	   */
	
	
	  BrushOperation.prototype._onPathUpdate = function _onPathUpdate() {
	    this.setDirty(true, false);
	  };
	
	  /**
	   * Gets called when an operation is about to be updated. If the crop
	   * or rotation operation is updated, this will be recognized and the
	   * stickers will be updated accordingly
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  BrushOperation.prototype._onOperationUpdate = function _onOperationUpdate(operation, options) {
	    var identifier = operation.constructor.identifier;
	
	
	    if (identifier === 'crop' && 'start' in options && 'end' in options) {
	      this._applyCrop(operation, options);
	    }
	
	    if (identifier === 'orientation') {
	      if ('rotation' in options) {
	        this._applyRotation(operation, options);
	      }
	
	      if ('flipVertically' in options && operation.getFlipVertically() !== options.flipVertically) {
	        this._applyFlip(operation, 'vertical');
	      }
	
	      if ('flipHorizontally' in options && operation.getFlipHorizontally() !== options.flipHorizontally) {
	        this._applyFlip(operation, 'horizontal');
	      }
	    }
	  };
	
	  // -------------------------------------------------------------------------- UPDATE BY OTHER OPERATION
	
	  /**
	   * Applies the given crop change
	   * @param  {PhotoEditorSDK.Operations.CropOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  BrushOperation.prototype._applyCrop = function _applyCrop(operation, options) {
	    var inputDimensions = this._sdk.getInputDimensions();
	
	    var oldStart = operation.getStart();
	    var newStart = options.start;
	
	    this._options.paths.forEach(function (path) {
	      path.forEachControlPoint(function (controlPoint) {
	        var position = controlPoint.getPosition().clone();
	        controlPoint.setPosition(position.add(oldStart.clone().subtract(newStart).multiply(inputDimensions)));
	      });
	    });
	
	    this.setDirty(true, true);
	    this.clearBrushCanvas();
	  };
	
	  /**
	   * Applies the given rotation change
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  BrushOperation.prototype._applyRotation = function _applyRotation(operation, options) {
	    var oldRotation = operation.getRotation();
	    var newRotation = options.rotation;
	    var degreesDifference = newRotation - oldRotation;
	
	    var finalDimensions = this._sdk.getFinalDimensions();
	    this._options.paths.forEach(function (path) {
	      path.forEachControlPoint(function (controlPoint) {
	        var position = controlPoint.getPosition().clone();
	        if (degreesDifference === 90 || oldRotation === 270 && newRotation === 0) {
	          position.flip();
	          position.x = finalDimensions.y - position.x;
	        } else if (degreesDifference === -90 || oldRotation === -270 && newRotation === 0) {
	          position.flip();
	          position.y = finalDimensions.x - position.y;
	        }
	        controlPoint.setPosition(position);
	      });
	    });
	
	    this.setDirty(true, true);
	    this.clearBrushCanvas();
	  };
	
	  /**
	   * Applies a flip with the given direction
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {String} direction
	   * @private
	   */
	
	
	  BrushOperation.prototype._applyFlip = function _applyFlip(operation, direction) {
	    var rotation = operation.getRotation();
	    if (rotation === 90 || rotation === 270) {
	      if (direction === 'vertical') {
	        direction = 'horizontal';
	      } else {
	        direction = 'vertical';
	      }
	    }
	
	    var finalDimensions = this._sdk.getFinalDimensions();
	    this._options.paths.forEach(function (path) {
	      path.forEachControlPoint(function (controlPoint) {
	        var position = controlPoint.getPosition().clone();
	        switch (direction) {
	          case 'horizontal':
	            position.x = finalDimensions.x - position.x;
	            break;
	          case 'vertical':
	            position.y = finalDimensions.y - position.y;
	            break;
	        }
	        controlPoint.setPosition(position);
	      });
	    });
	
	    this.setDirty(true, true);
	    this.clearBrushCanvas();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the brush operation
	   * @param  {PhotoEditorSDK} sdk
	   * @returns {Promise}
	   * @override
	   * @private
	   */
	
	
	  BrushOperation.prototype._render = function _render(sdk) {
	    this.renderBrushCanvas(sdk);
	
	    var renderer = sdk.getRenderer();
	    var outputSprite = sdk.getSprite();
	    this._inputSprite.setTexture(outputSprite.getTexture());
	
	    /* istanbul ignore next */
	    if (renderer.isOfType('webgl')) {
	      renderer.updateTexture(this._texture.getBaseTexture());
	    }
	
	    var renderTexture = this._getRenderTexture(sdk);
	    var outputBounds = outputSprite.getBounds();
	    renderTexture.resizeTo(new _globals.Vector2(outputBounds.width, outputBounds.height));
	
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	
	    return _globals.Promise.resolve();
	  };
	
	  /**
	   * Clears the brush canvas
	   */
	
	
	  BrushOperation.prototype.clearBrushCanvas = function clearBrushCanvas() {
	    if (!this._brushCanvas) {
	      return;
	    }
	
	    this._brushCanvasDirty = true;
	    var canvas = this._brushCanvas;
	    var context = canvas.getContext('2d');
	    context.clearRect(0, 0, canvas.width, canvas.height);
	  };
	
	  /**
	   * Renders the brush canvas that will be used as a texture in WebGL
	   * and as an image in canvas
	   * @param {HTMLCanvasElement} canvas
	   * @private
	   */
	
	
	  BrushOperation.prototype.renderBrushCanvas = function renderBrushCanvas(sdk) {
	    var canvas = arguments.length <= 1 || arguments[1] === undefined ? this._brushCanvas : arguments[1];
	
	    var finalDimensions = sdk.getFinalDimensions();
	    if (canvas.width !== finalDimensions.x || canvas.height !== finalDimensions.y) {
	      canvas.width = finalDimensions.x;
	      canvas.height = finalDimensions.y;
	      this._texture.getBaseTexture().update();
	    }
	
	    var paths = this._options.paths;
	    for (var i = 0; i < paths.length; i++) {
	      var path = paths[i];
	      path.renderToCanvas(canvas);
	    }
	    this._brushCanvasDirty = false;
	  };
	
	  /**
	   * Creates and adds a new path
	   * @param {Number} thickness
	   * @param {Color} color
	   * @return {PhotoEditorSDK.Operations.BrushOperation.Path}
	   */
	
	
	  BrushOperation.prototype.createPath = function createPath(thickness, color) {
	    var path = new BrushOperation.Path(this, thickness, color);
	    path.on('update', this._onPathUpdate);
	    this._options.paths.push(path);
	    this.setDirty(true);
	    return path;
	  };
	
	  /**
	   * Sets the dirtiness for the given renderer
	   * @param {Boolean} dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @param {Boolean} [setPathsToDirty = false]
	   * @override
	   */
	
	
	  BrushOperation.prototype.setDirtyForRenderer = function setDirtyForRenderer(dirty, renderer) {
	    var setPathsToDirty = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	    _Operation.prototype.setDirtyForRenderer.call(this, dirty, renderer);
	
	    if (setPathsToDirty) {
	      this._options.paths.forEach(function (path) {
	        path.setDirty();
	      });
	    }
	  };
	
	  /**
	   * Sets the dirtiness for all renderers
	   * @param {Boolean} dirty
	   * @param {Boolean} [setPathsToDirty = false]
	   * @override
	   */
	
	
	  BrushOperation.prototype.setDirty = function setDirty(dirty) {
	    var setPathsToDirty = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    for (var rendererId in this._dirtiness) {
	      this.setDirtyForRenderer(dirty, { id: rendererId }, setPathsToDirty);
	    }
	  };
	
	  /**
	   * Disposes this operation
	   * @override
	   */
	
	
	  BrushOperation.prototype.dispose = function dispose() {
	    this._sdk.off(_globals.Constants.Events.OPERATION_UPDATED, this._onOperationUpdate);
	  };
	
	  return BrushOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	BrushOperation.identifier = 'brush';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	BrushOperation.prototype.availableOptions = {
	  thickness: { type: 'number', default: 10 },
	  color: { type: 'color', default: new _globals.Color(1, 0, 0, 1) },
	  paths: { type: 'array', default: [], setter: function setter(paths) {
	      paths.forEach(function (path) {
	        path.setDirty(true);
	      });
	      this.clearBrushCanvas();
	      this.setDirty(true);
	      return paths;
	    } }
	};
	
	BrushOperation.Path = _path2.default;
	BrushOperation.ControlPoint = _controlPoint2.default;
	
	exports.default = BrushOperation;

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _controlPoint = __webpack_require__(77);
	
	var _controlPoint2 = _interopRequireDefault(_controlPoint);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A path that can be drawn on a {@link PhotoEditorSDK.Operations.BrushOperation}. Should only be
	 * created using {@link PhotoEditorSDK.Operations.BrushOperation#createPath}
	 * @class
	 * @extends PhotoEditorSDK.EventEmitter
	 * @memberof PhotoEditorSDK.Operations.BrushOperation
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Path = function (_EventEmitter) {
	  (0, _inherits3.default)(Path, _EventEmitter);
	
	  /**
	   * Creates a Path
	   * @param  {PhotoEditorSDK.Operations.BrushOperation} operation
	   * @param  {Number} thickness
	   * @param  {PhotoEditorSDK.Color} color
	   */
	
	  function Path(operation, thickness, color) {
	    (0, _classCallCheck3.default)(this, Path);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._thickness = thickness;
	    _this._color = color;
	    _this._controlPoints = [];
	    return _this;
	  }
	
	  /**
	   * Draws this path onto the given canvas
	   * @param  {HTMLCanvasElement} canvas
	   */
	
	
	  Path.prototype.renderToCanvas = function renderToCanvas(canvas) {
	    if (this._controlPoints.length < 2) {
	      return;
	    }
	
	    var lastControlPoint = this._controlPoints[0];
	    var controlPoint = lastControlPoint;
	    for (var i = 1; i < this._controlPoints.length; i++) {
	      controlPoint = this._controlPoints[i];
	      controlPoint.renderToCanvas(canvas, lastControlPoint);
	      lastControlPoint = controlPoint;
	    }
	  };
	
	  /**
	   * Adds a control point at the given position to this path
	   * @param {PhotoEditorSDK.Math.Vector2} position
	   */
	
	
	  Path.prototype.addControlPoint = function addControlPoint(position) {
	    var controlPoint = new _controlPoint2.default(this, position);
	    this._controlPoints.push(controlPoint);
	    this.emit('update');
	  };
	
	  /**
	   * Returns the path color
	   * @return {PhotoEditorSDK.Color}
	   */
	
	
	  Path.prototype.getColor = function getColor() {
	    return this._color;
	  };
	
	  /**
	   * Returns the path's stroke thickness
	   * @return {Number}
	   */
	
	
	  Path.prototype.getThickness = function getThickness() {
	    return this._thickness;
	  };
	
	  /**
	   * Returns this path's control points
	   * @return {Array.<PhotoEditorSDK.Operations.BrushOperation.ControlPoint>}
	   */
	
	
	  Path.prototype.getControlPoints = function getControlPoints() {
	    return this._controlPoints;
	  };
	
	  /**
	   * Sets this path to dirty
	   */
	
	
	  Path.prototype.setDirty = function setDirty() {
	    this._controlPoints.forEach(function (point) {
	      point.setDirty();
	    });
	  };
	
	  /**
	   * Calls `iterator` for each control point
	   * @param  {Function} iterator
	   */
	
	
	  Path.prototype.forEachControlPoint = function forEachControlPoint(iterator) {
	    this._controlPoints.forEach(iterator);
	  };
	
	  return Path;
	}(_globals.EventEmitter);
	
	exports.default = Path;

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can crop out a part of the image
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	
	var CropOperation = function (_Operation) {
	  (0, _inherits3.default)(CropOperation, _Operation);
	
	  /**
	   * Creates a new CropOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function CropOperation() {
	    (0, _classCallCheck3.default)(this, CropOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._sprite.setAnchor(0, 0);
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	    _this._sdk.on(_globals.Constants.Events.OPERATION_UPDATED, _this._onOperationUpdate);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation is about to be updated. If the crop
	   * or rotation operation is updated, this will be recognized and the
	   * crop will be updated accordingly
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  CropOperation.prototype._onOperationUpdate = function _onOperationUpdate(operation, options) {
	    var identifier = operation.constructor.identifier;
	
	
	    if (identifier === 'orientation') {
	      if ('rotation' in options) {
	        this._applyRotation(operation, options);
	      }
	      if ('flipVertically' in options || 'flipHorizontally' in options) {
	        this._applyFlip(operation, options);
	      }
	    }
	  };
	
	  // -------------------------------------------------------------------------- FIXES
	
	  /**
	   * Applies the rotation done by an orientation operation
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  CropOperation.prototype._applyRotation = function _applyRotation(operation, options) {
	    var currentRotation = operation.getRotation();
	    var newRotation = options.rotation;
	    var degreesDifference = newRotation - currentRotation;
	
	    var start = this._options.start.clone();
	    var end = this._options.end.clone();
	
	    var tempStart = start.clone();
	    if (degreesDifference === 90 || degreesDifference === -270) {
	      start.set(1.0 - end.y, tempStart.x);
	      end.set(1.0 - tempStart.y, end.x);
	    } else if (degreesDifference === -90 || degreesDifference === 270) {
	      start.set(tempStart.y, 1.0 - end.x);
	      end.set(end.y, 1.0 - tempStart.x);
	    }
	
	    this.set({ start: start, end: end }, false);
	  };
	
	  /**
	   * Applies the flip done by an orientation operation
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  CropOperation.prototype._applyFlip = function _applyFlip(operation, options) {
	    if ('flipVertically' in options && operation.getFlipVertically() !== options.flipVertically) {
	      this._applyFlipDirection(operation, 'vertical');
	    }
	
	    if ('flipHorizontally' in options && operation.getFlipHorizontally() !== options.flipHorizontally) {
	      this._applyFlipDirection(operation, 'horizontal');
	    }
	  };
	
	  /**
	   * Applies a flip with the given direction
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {String} direction
	   * @private
	   */
	
	
	  CropOperation.prototype._applyFlipDirection = function _applyFlipDirection(operation, direction) {
	    var rotation = operation.getRotation();
	    if (rotation === 90 || rotation === 270) {
	      if (direction === 'vertical') {
	        direction = 'horizontal';
	      } else {
	        direction = 'vertical';
	      }
	    }
	
	    var start = this._options.start;
	    var end = this._options.end;
	
	    switch (direction) {
	      case 'horizontal':
	        var tempStartX = start.x;
	        start.x = 1 - end.x;
	        end.x = 1 - tempStartX;
	        break;
	      case 'vertical':
	        var tempStartY = start.y;
	        start.y = 1 - end.y;
	        end.y = 1 - tempStartY;
	        break;
	    }
	
	    this.set({ start: start, end: end }, false);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Crops the image
	   * @param  {PhotoEditorSDK} sdk
	   * @returns {Promise}
	   * @override
	   * @private
	   */
	
	
	  CropOperation.prototype._render = function _render(sdk) {
	    var renderer = sdk.getRenderer();
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    var outputBounds = outputSprite.getBounds();
	    var outputDimensions = new _globals.Vector2(outputBounds.width, outputBounds.height);
	
	    var start = this._options.start.clone().multiply(outputDimensions);
	    var end = this._options.end.clone().multiply(outputDimensions);
	
	    var newDimensions = end.clone().subtract(start).floor();
	    renderTexture.resizeTo(newDimensions);
	
	    this._sprite.setPosition(-start.x, -start.y);
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	    this.setDirtyForRenderer(true, renderer);
	
	    return _promise2.default.resolve();
	  };
	
	  /**
	   * Returns the dimensions the given dimensions will have after this operation
	   * has been applied
	   * @param {PhotoEditorSDK.Math.Vector2} dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   * @override
	   */
	
	
	  CropOperation.prototype.getNewDimensions = function getNewDimensions(dimensions) {
	    dimensions = dimensions.clone();
	
	    var newDimensions = this._options.end.clone().subtract(this._options.start);
	
	    newDimensions.multiply(dimensions);
	
	    return newDimensions;
	  };
	
	  return CropOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	CropOperation.identifier = 'crop';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	CropOperation.prototype.availableOptions = {
	  start: { type: 'vector2', required: true, default: new _globals.Vector2(0, 0) },
	  end: { type: 'vector2', required: true, default: new _globals.Vector2(1, 1) }
	};
	
	exports.default = CropOperation;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _identityFilter = __webpack_require__(78);
	
	var _identityFilter2 = _interopRequireDefault(_identityFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can apply a selected filter
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	
	var FilterOperation = function (_Operation) {
	  (0, _inherits3.default)(FilterOperation, _Operation);
	
	  function FilterOperation() {
	    (0, _classCallCheck3.default)(this, FilterOperation);
	    return (0, _possibleConstructorReturn3.default)(this, _Operation.apply(this, arguments));
	  }
	
	  /**
	   * Renders this operation
	   * @param {PhotoEditorSDK} sdk
	   * @return {Promise}
	   * @private
	   */
	
	  FilterOperation.prototype._render = function _render(sdk) {
	    return this._selectedFilter.render(sdk, this._getRenderTexture(sdk));
	  };
	
	  /**
	   * Applies this operation
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   * @override
	   */
	
	
	  FilterOperation.prototype.render = function render(sdk) {
	    if (!this.getEnabled() || this._selectedFilter.constructor.isIdentity) {
	      return _globals.Promise.resolve();
	    }
	
	    _Operation.prototype.render.call(this, sdk);
	  };
	
	  /**
	   * Sets the dirtiness for the given renderer
	   * @param {Boolean} dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @override
	   */
	
	
	  FilterOperation.prototype.setDirtyForRenderer = function setDirtyForRenderer(dirty, renderer) {
	    _Operation.prototype.setDirtyForRenderer.call(this, dirty, renderer);
	    this._selectedFilter.setDirtyForRenderer(dirty, renderer);
	  };
	
	  return FilterOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	FilterOperation.identifier = 'filter';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	FilterOperation.prototype.availableOptions = {
	  intensity: {
	    type: 'number',
	    default: 1,
	    setter: function setter(intensity) {
	      this._selectedFilter && this._selectedFilter.setIntensity(intensity);
	      return intensity;
	    }
	  },
	  filter: { type: 'object', default: _identityFilter2.default,
	    setter: function setter(Filter) {
	      if (this._selectedFilter) {
	        this._selectedFilter.dispose();
	        this._selectedFilter = null;
	      }
	      this._selectedFilter = new Filter(this._options.intensity);
	      return Filter;
	    }
	  }
	};
	
	exports.default = FilterOperation;

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A15 Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var A15Filter = function (_Filter) {
	  (0, _inherits3.default)(A15Filter, _Filter);
	
	  function A15Filter() {
	    (0, _classCallCheck3.default)(this, A15Filter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Contrast({
	      contrast: 0.63
	    }));
	
	    _this._stack.push(new FilterPrimitives.Brightness({
	      brightness: 0.12
	    }));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 38], [94, 94], [148, 142], [175, 187], [255, 255]],
	        green: [[0, 0], [77, 53], [171, 190], [255, 255]],
	        blue: [[0, 10], [48, 85], [174, 228], [255, 255]]
	      }
	    }));
	    return _this;
	  }
	
	  return A15Filter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	A15Filter.identifier = 'a15';
	
	A15Filter.displayName = '15';
	
	exports.default = A15Filter;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Breeze Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BreezeFilter = function (_Filter) {
	  (0, _inherits3.default)(BreezeFilter, _Filter);
	
	  function BreezeFilter() {
	    (0, _classCallCheck3.default)(this, BreezeFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Desaturation
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Desaturation({
	      desaturation: 0.5
	    }));
	
	    // Tone curve
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [170, 170], [212, 219], [234, 242], [255, 255]],
	        green: [[0, 0], [170, 168], [234, 231], [255, 255]],
	        blue: [[0, 0], [170, 170], [212, 208], [255, 255]]
	      }
	    }));
	    return _this;
	  }
	
	  return BreezeFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	BreezeFilter.identifier = 'breeze';
	
	BreezeFilter.displayName = 'Breeze';
	
	exports.default = BreezeFilter;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * BW Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BWFilter = function (_Filter) {
	  (0, _inherits3.default)(BWFilter, _Filter);
	
	  function BWFilter() {
	    (0, _classCallCheck3.default)(this, BWFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Grayscale());
	    return _this;
	  }
	
	  return BWFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	BWFilter.identifier = 'bw';
	
	BWFilter.displayName = 'B&W';
	
	exports.default = BWFilter;

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * BWHard Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BWHardFilter = function (_Filter) {
	  (0, _inherits3.default)(BWHardFilter, _Filter);
	
	  function BWHardFilter() {
	    (0, _classCallCheck3.default)(this, BWHardFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Grayscale());
	    _this._stack.push(new FilterPrimitives.Contrast({
	      contrast: 1.5
	    }));
	    return _this;
	  }
	
	  return BWHardFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	BWHardFilter.identifier = 'bwhard';
	
	BWHardFilter.displayName = '1920';
	
	exports.default = BWHardFilter;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Celsius Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var CelsiusFilter = function (_Filter) {
	  (0, _inherits3.default)(CelsiusFilter, _Filter);
	
	  function CelsiusFilter() {
	    (0, _classCallCheck3.default)(this, CelsiusFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 69], [55, 110], [202, 230], [255, 255]],
	        green: [[0, 44], [89, 93], [185, 141], [255, 189]],
	        blue: [[0, 76], [39, 82], [218, 138], [255, 171]]
	      }
	    }));
	    return _this;
	  }
	
	  return CelsiusFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	CelsiusFilter.identifier = 'celsius';
	
	CelsiusFilter.displayName = 'Celsius';
	
	exports.default = CelsiusFilter;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Chest Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ChestFilter = function (_Filter) {
	  (0, _inherits3.default)(ChestFilter, _Filter);
	
	  function ChestFilter() {
	    (0, _classCallCheck3.default)(this, ChestFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [44, 44], [124, 143], [221, 204], [255, 255]],
	        green: [[0, 0], [130, 127], [213, 199], [255, 255]],
	        blue: [[0, 0], [51, 52], [219, 204], [255, 255]]
	      }
	    }));
	    return _this;
	  }
	
	  return ChestFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	ChestFilter.identifier = 'chest';
	
	ChestFilter.displayName = 'Chest';
	
	exports.default = ChestFilter;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Fixie Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FixieFilter = function (_Filter) {
	  (0, _inherits3.default)(FixieFilter, _Filter);
	
	  function FixieFilter() {
	    (0, _classCallCheck3.default)(this, FixieFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [44, 28], [63, 48], [128, 132], [235, 248], [255, 255]],
	        green: [[0, 0], [20, 10], [60, 45], [190, 209], [211, 231], [255, 255]],
	        blue: [[0, 31], [41, 62], [150, 142], [234, 212], [255, 224]]
	      }
	    }));
	    return _this;
	  }
	
	  return FixieFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	FixieFilter.identifier = 'fixie';
	
	FixieFilter.displayName = 'Fixie';
	
	exports.default = FixieFilter;

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Food Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FoodFilter = function (_Filter) {
	  (0, _inherits3.default)(FoodFilter, _Filter);
	
	  function FoodFilter() {
	    (0, _classCallCheck3.default)(this, FoodFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Saturation({
	      saturation: 1.35
	    }));
	
	    _this._stack.push(new FilterPrimitives.Contrast({
	      contrast: 1.1
	    }));
	    return _this;
	  }
	
	  return FoodFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	FoodFilter.identifier = 'food';
	
	FoodFilter.displayName = 'Food';
	
	exports.default = FoodFilter;

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Fridge Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FridgeFilter = function (_Filter) {
	  (0, _inherits3.default)(FridgeFilter, _Filter);
	
	  function FridgeFilter() {
	    (0, _classCallCheck3.default)(this, FridgeFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 9], [21, 11], [45, 24], [255, 220]],
	        green: [[0, 12], [21, 21], [42, 42], [150, 150], [170, 173], [255, 210]],
	        blue: [[0, 28], [43, 72], [128, 185], [255, 220]]
	      }
	    }));
	    return _this;
	  }
	
	  return FridgeFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	FridgeFilter.identifier = 'fridge';
	
	FridgeFilter.displayName = 'Fridge';
	
	exports.default = FridgeFilter;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Front Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FrontFilter = function (_Filter) {
	  (0, _inherits3.default)(FrontFilter, _Filter);
	
	  function FrontFilter() {
	    (0, _classCallCheck3.default)(this, FrontFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 65], [28, 67], [67, 113], [125, 183], [187, 217], [255, 229]],
	        green: [[0, 52], [42, 59], [104, 134], [169, 209], [255, 240]],
	        blue: [[0, 52], [65, 68], [93, 104], [150, 153], [255, 198]]
	      }
	    }));
	    return _this;
	  }
	
	  return FrontFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	FrontFilter.identifier = 'front';
	
	FrontFilter.displayName = 'Front';
	
	exports.default = FrontFilter;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Glam Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var GlamFilter = function (_Filter) {
	  (0, _inherits3.default)(GlamFilter, _Filter);
	
	  function GlamFilter() {
	    (0, _classCallCheck3.default)(this, GlamFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Contrast({
	      contrast: 1.1
	    }));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [94, 74], [181, 205], [255, 255]],
	        green: [[0, 0], [127, 127], [255, 255]],
	        blue: [[0, 0], [102, 73], [227, 213], [255, 255]]
	      }
	    }));
	    return _this;
	  }
	
	  return GlamFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	GlamFilter.identifier = 'glam';
	
	GlamFilter.displayName = 'Glam';
	
	exports.default = GlamFilter;

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Gobblin Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var GobblinFilter = function (_Filter) {
	  (0, _inherits3.default)(GobblinFilter, _Filter);
	
	  function GobblinFilter() {
	    (0, _classCallCheck3.default)(this, GobblinFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Gobblin());
	    return _this;
	  }
	
	  return GobblinFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	GobblinFilter.identifier = 'gobblin';
	
	GobblinFilter.displayName = 'Gobblin';
	
	exports.default = GobblinFilter;

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * K1 Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var K1Filter = function (_Filter) {
	  (0, _inherits3.default)(K1Filter, _Filter);
	
	  function K1Filter() {
	    (0, _classCallCheck3.default)(this, K1Filter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      controlPoints: [[0, 0], [53, 32], [91, 80], [176, 205], [255, 255]]
	    }));
	
	    // Saturation
	    _this._stack.push(new FilterPrimitives.Saturation({
	      saturation: 0.9
	    }));
	    return _this;
	  }
	
	  return K1Filter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	K1Filter.identifier = 'k1';
	
	K1Filter.displayName = 'K1';
	
	exports.default = K1Filter;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * K2 Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	
	var K2Filter = function (_Filter) {
	  (0, _inherits3.default)(K2Filter, _Filter);
	
	  function K2Filter() {
	    (0, _classCallCheck3.default)(this, K2Filter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      controlPoints: [[0, 0], [54, 33], [77, 82], [94, 103], [122, 126], [177, 193], [229, 232], [255, 255]]
	    }));
	
	    // Soft color overlay
	    _this._stack.push(new FilterPrimitives.SoftColorOverlay({
	      color: new _color2.default(40 / 255, 40 / 255, 40 / 255)
	    }));
	    return _this;
	  }
	
	  return K2Filter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	K2Filter.identifier = 'k2';
	
	K2Filter.displayName = 'K2';
	
	exports.default = K2Filter;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * K6 Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var K6Filter = function (_Filter) {
	  (0, _inherits3.default)(K6Filter, _Filter);
	
	  function K6Filter() {
	    (0, _classCallCheck3.default)(this, K6Filter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Saturation
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Saturation({
	      saturation: 0.5
	    }));
	    return _this;
	  }
	
	  return K6Filter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	K6Filter.identifier = 'k6';
	
	K6Filter.displayName = 'K6';
	
	exports.default = K6Filter;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * KDynamic Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var KDynamicFilter = function (_Filter) {
	  (0, _inherits3.default)(KDynamicFilter, _Filter);
	
	  function KDynamicFilter() {
	    (0, _classCallCheck3.default)(this, KDynamicFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      controlPoints: [[0, 0], [17, 27], [46, 69], [90, 112], [156, 200], [203, 243], [255, 255]]
	    }));
	
	    // Saturation
	    _this._stack.push(new FilterPrimitives.Saturation({
	      saturation: 0.7
	    }));
	    return _this;
	  }
	
	  return KDynamicFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	KDynamicFilter.identifier = 'kdynamic';
	
	KDynamicFilter.displayName = 'KDynamic';
	
	exports.default = KDynamicFilter;

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Lenin Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var LeninFilter = function (_Filter) {
	  (0, _inherits3.default)(LeninFilter, _Filter);
	
	  function LeninFilter() {
	    (0, _classCallCheck3.default)(this, LeninFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Desaturation
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Desaturation({
	      desaturation: 0.4
	    }));
	
	    // Tone curve
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 20], [40, 20], [106, 111], [129, 153], [190, 223], [255, 255]],
	        green: [[0, 20], [40, 20], [62, 41], [106, 108], [132, 159], [203, 237], [255, 255]],
	        blue: [[0, 40], [40, 40], [73, 60], [133, 160], [191, 297], [203, 237], [237, 239], [255, 255]]
	      }
	    }));
	    return _this;
	  }
	
	  return LeninFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	LeninFilter.identifier = 'lenin';
	
	LeninFilter.displayName = 'Lenin';
	
	exports.default = LeninFilter;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Lomo Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var LomoFilter = function (_Filter) {
	  (0, _inherits3.default)(LomoFilter, _Filter);
	
	  function LomoFilter() {
	    (0, _classCallCheck3.default)(this, LomoFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      controlPoints: [[0, 0], [87, 20], [131, 156], [183, 205], [255, 200]]
	    }));
	    return _this;
	  }
	
	  return LomoFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	LomoFilter.identifier = 'lomo';
	
	LomoFilter.displayName = 'Lomo';
	
	exports.default = LomoFilter;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Mellow Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var MellowFilter = function (_Filter) {
	  (0, _inherits3.default)(MellowFilter, _Filter);
	
	  function MellowFilter() {
	    (0, _classCallCheck3.default)(this, MellowFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [41, 84], [87, 134], [255, 255]],
	        green: [[0, 0], [255, 216]],
	        blue: [[0, 0], [255, 131]]
	      }
	    }));
	    return _this;
	  }
	
	  return MellowFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	MellowFilter.identifier = 'mellow';
	
	MellowFilter.displayName = 'Mellow';
	
	exports.default = MellowFilter;

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Morning Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var MorningFilter = function (_Filter) {
	  (0, _inherits3.default)(MorningFilter, _Filter);
	
	  function MorningFilter() {
	    (0, _classCallCheck3.default)(this, MorningFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 40], [255, 230]],
	        green: [[0, 10], [255, 225]],
	        blue: [[0, 20], [255, 181]]
	      }
	    }));
	
	    _this._stack.push(new FilterPrimitives.Glow());
	    return _this;
	  }
	
	  return MorningFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	MorningFilter.identifier = 'morning';
	
	MorningFilter.displayName = 'Morning';
	
	exports.default = MorningFilter;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Orchid Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var OrchidFilter = function (_Filter) {
	  (0, _inherits3.default)(OrchidFilter, _Filter);
	
	  function OrchidFilter() {
	    (0, _classCallCheck3.default)(this, OrchidFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Tone curve
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [115, 130], [195, 215], [255, 255]],
	        green: [[0, 0], [148, 153], [172, 215], [255, 255]],
	        blue: [[0, 46], [58, 75], [178, 205], [255, 255]]
	      }
	    }));
	
	    // Tone curve
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      controlPoints: [[0, 0], [117, 151], [189, 217], [255, 255]]
	    }));
	
	    // Desaturation
	    _this._stack.push(new FilterPrimitives.Desaturation({
	      desaturation: 0.65
	    }));
	    return _this;
	  }
	
	  return OrchidFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	OrchidFilter.identifier = 'orchid';
	
	OrchidFilter.displayName = 'Orchid';
	
	exports.default = OrchidFilter;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Pola Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var PolaFilter = function (_Filter) {
	  (0, _inherits3.default)(PolaFilter, _Filter);
	
	  function PolaFilter() {
	    (0, _classCallCheck3.default)(this, PolaFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [94, 74], [181, 205], [255, 255]],
	        green: [[0, 0], [34, 34], [99, 76], [176, 190], [255, 255]],
	        blue: [[0, 0], [102, 73], [227, 213], [255, 255]]
	      }
	    }));
	
	    _this._stack.push(new FilterPrimitives.Saturation({
	      saturation: 0.8
	    }));
	
	    _this._stack.push(new FilterPrimitives.Contrast({
	      contrast: 1.5
	    }));
	    return _this;
	  }
	
	  return PolaFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	PolaFilter.identifier = 'pola';
	
	PolaFilter.displayName = 'Pola SX';
	
	exports.default = PolaFilter;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Pola669 Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Pola669Filter = function (_Filter) {
	  (0, _inherits3.default)(Pola669Filter, _Filter);
	
	  function Pola669Filter() {
	    (0, _classCallCheck3.default)(this, Pola669Filter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [56, 18], [196, 209], [255, 255]],
	        green: [[0, 38], [71, 84], [255, 255]],
	        blue: [[0, 0], [131, 133], [204, 211], [255, 255]]
	      }
	    }));
	
	    _this._stack.push(new FilterPrimitives.Saturation({
	      saturation: 0.8
	    }));
	
	    _this._stack.push(new FilterPrimitives.Contrast({
	      contrast: 1.5
	    }));
	    return _this;
	  }
	
	  return Pola669Filter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	Pola669Filter.identifier = 'pola669';
	
	Pola669Filter.displayName = 'Pola 669';
	
	exports.default = Pola669Filter;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BlendFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(BlendFilter, _Engine$Filter);
	
	  function BlendFilter() {
	    (0, _classCallCheck3.default)(this, BlendFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(212);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {PhotoEditorSDK.Engine.CanvasRenderer} renderer
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} inputTarget
	   * @param  {PhotoEditorSDK.Engine.RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  BlendFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var outputContext = outputTarget.getContext();
	
	    var filteredCanvas = this._options.filteredCanvas;
	
	
	    outputContext.save();
	    outputContext.drawImage(canvas, 0, 0);
	    outputContext.globalAlpha = this._options.intensity;
	    outputContext.drawImage(filteredCanvas, 0, 0);
	    outputContext.restore();
	  };
	
	  return BlendFilter;
	}(_globals.Engine.Filter);
	
	BlendFilter.prototype.availableOptions = {
	  filteredImage: { type: 'number', default: 1, uniformType: 'i' },
	  filteredCanvas: { type: 'object', default: null },
	  intensity: { type: 'number', default: 1, uniformType: 'f' }
	};
	
	/**
	 * A helper class that can collect {@link Primitive} instances and render
	 * the stack
	 * @class
	 * @memberof PhotoEditorSDK.Filter
	 */
	
	var PrimitivesStack = function () {
	  function PrimitivesStack() {
	    var intensity = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
	    (0, _classCallCheck3.default)(this, PrimitivesStack);
	
	    this._intensity = intensity;
	
	    this._stack = [];
	    this._dirtiness = {};
	    this._renderTextures = {};
	    this._container = new _globals.Engine.Container();
	    this._sprite = new _globals.Engine.Sprite();
	    this._container.addChild(this._sprite);
	
	    this._blendFilter = new BlendFilter();
	  }
	
	  /**
	   * Adds the given primitive to the stack
	   * @param {PhotoEditorSDK.Filter.Primitive} primitive
	   */
	
	
	  PrimitivesStack.prototype.push = function push(primitive) {
	    this._stack.push(primitive);
	  };
	
	  /**
	   * Clears the stack
	   */
	
	
	  PrimitivesStack.prototype.clear = function clear() {
	    this._stack = [];
	  };
	
	  /**
	   * Renders this stack
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {PhotoEditorSDK.Engine.RenderTexture} outputTexture
	   * @return {Promise}
	   * @description This takes the output sprite's current texture and renders
	   *              it to this stack's internal render texture. It then uses the
	   *              internal texture as a uniform for a blend shader and renders
	   *              the sprite with the original texture and the blend shader to
	   *              the outputTexture
	   */
	
	
	  PrimitivesStack.prototype.render = function render(sdk, outputTexture) {
	    if (this._stack.length === 0) {
	      return _promise2.default.resolve();
	    }
	    var renderer = sdk.getRenderer();
	
	    var filteredRenderTexture = this._renderTextures[renderer.id];
	    if (!filteredRenderTexture) {
	      filteredRenderTexture = this._renderTextures[renderer.id] = sdk.createRenderTexture();
	    }
	
	    var outputSprite = sdk.getSprite();
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    // Resize both the output and temp texture
	    var spriteBounds = outputSprite.getBounds();
	    var spriteDimensions = new _globals.Vector2(spriteBounds.width, spriteBounds.height);
	    outputTexture.resizeTo(spriteDimensions);
	    filteredRenderTexture.resizeTo(spriteDimensions);
	
	    if (this.isDirtyForRenderer(renderer)) {
	      // Update primitives
	      this._stack.forEach(function (p) {
	        return p.update(sdk);
	      });
	
	      // Set filters
	      var filters = this._stack.map(function (p) {
	        return p.getFilter();
	      });
	      this._sprite.setFilters(filters);
	
	      // Render to RenderTexture
	      filteredRenderTexture.render(this._container);
	      this.setDirtyForRenderer(false, renderer);
	    }
	
	    // Use filteredRenderTexture as uniform for blend shader, blend the two
	    // to achieve intensity
	    this._blendFilter.setIntensity(this._intensity);
	    if (renderer.isOfType('canvas')) {
	      this._blendFilter.setFilteredCanvas(filteredRenderTexture.getRenderTarget().getCanvas());
	    }
	    this._sprite.setFilters([this._blendFilter]);
	
	    var baseTexture = filteredRenderTexture.getBaseTexture();
	    baseTexture.setGLUnit(1);
	
	    /* istanbul ignore next */
	    if (renderer.isOfType('webgl')) {
	      renderer.updateTexture(baseTexture, false);
	    }
	
	    outputTexture.render(this._container);
	
	    outputSprite.setTexture(outputTexture);
	    return _promise2.default.resolve();
	  };
	
	  PrimitivesStack.prototype.setIntensity = function setIntensity(intensity) {
	    this._intensity = intensity;
	  };
	
	  /**
	   * Checks if this operation is dirty for the given renderer
	   * @param  {PhotoEditorSDK.Engine.BaseRenderer}  renderer
	   * @return {Boolean}
	   */
	
	
	  PrimitivesStack.prototype.isDirtyForRenderer = function isDirtyForRenderer(renderer) {
	    if (!(renderer.id in this._dirtiness)) {
	      this._dirtiness[renderer.id] = true;
	    }
	    return this._dirtiness[renderer.id];
	  };
	
	  /**
	   * Sets the dirtiness for the given renderer
	   * @param {Boolean} dirty
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   */
	
	
	  PrimitivesStack.prototype.setDirtyForRenderer = function setDirtyForRenderer(dirty, renderer) {
	    this._dirtiness[renderer.id] = dirty;
	  };
	
	  /**
	   * Sets the dirtiness for all renderers
	   * @param {Boolean} dirty
	   */
	
	
	  PrimitivesStack.prototype.setDirty = function setDirty(dirty) {
	    for (var rendererId in this._dirtiness) {
	      this._dirtiness[rendererId] = dirty;
	    }
	  };
	
	  /**
	   * Cleans up this instance
	   */
	
	
	  PrimitivesStack.prototype.dispose = function dispose() {
	    for (var rendererId in this._renderTextures) {
	      this._renderTextures[rendererId].dispose();
	      delete this._renderTextures[rendererId];
	    }
	    this._stack.forEach(function (primitive) {
	      return primitive.dispose();
	    });
	    this._stack = [];
	    this._blendFilter.dispose();
	
	    this._sprite.dispose();
	  };
	
	  return PrimitivesStack;
	}();
	
	exports.default = PrimitivesStack;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BrightnessFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(BrightnessFilter, _Engine$Filter);
	
	  function BrightnessFilter() {
	    (0, _classCallCheck3.default)(this, BrightnessFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(214);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  BrightnessFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    var brightness = this._options.brightness;
	
	
	    if (brightness === 0) {
	      return;
	    }
	    brightness = brightness * 255;
	
	    for (var i = 0; i < canvas.width * canvas.height; i++) {
	      var index = i * 4;
	      imageData.data[index] += brightness;
	      imageData.data[index + 1] += brightness;
	      imageData.data[index + 2] += brightness;
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return BrightnessFilter;
	}(_globals.Engine.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	
	
	BrightnessFilter.prototype.availableOptions = {
	  brightness: { type: 'number', default: 0, uniformType: 'f' }
	};
	
	/**
	 * Brightness primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var Brightness = function (_Primitive) {
	  (0, _inherits3.default)(Brightness, _Primitive);
	
	  function Brightness() {
	    (0, _classCallCheck3.default)(this, Brightness);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new BrightnessFilter();
	    return _this2;
	  }
	
	  /**
	   * Updates the filter's uniforms
	   */
	
	
	  Brightness.prototype.update = function update() {
	    this._filter.setBrightness(this._options.brightness);
	  };
	
	  return Brightness;
	}(_primitive2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	
	
	Brightness.prototype.availableOptions = BrightnessFilter.prototype.availableOptions;
	
	exports.default = Brightness;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ContrastFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(ContrastFilter, _Engine$Filter);
	
	  function ContrastFilter() {
	    (0, _classCallCheck3.default)(this, ContrastFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(215);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  ContrastFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    var contrast = this._options.contrast;
	
	    if (contrast === 1) {
	      return;
	    }
	
	    for (var i = 0; i < canvas.width * canvas.height; i++) {
	      var index = i * 4;
	      imageData.data[index] = (imageData.data[index] - 127) * contrast + 127;
	      imageData.data[index + 1] = (imageData.data[index + 1] - 127) * contrast + 127;
	      imageData.data[index + 2] = (imageData.data[index + 2] - 127) * contrast + 127;
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return ContrastFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	
	
	ContrastFilter.prototype.availableOptions = {
	  contrast: { type: 'number', default: 1, uniformType: 'f' }
	};
	
	/**
	 * Contrast primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var Contrast = function (_Primitive) {
	  (0, _inherits3.default)(Contrast, _Primitive);
	
	  function Contrast() {
	    (0, _classCallCheck3.default)(this, Contrast);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new ContrastFilter();
	    return _this2;
	  }
	
	  /**
	   * Updates the filter's uniforms
	   */
	
	
	  Contrast.prototype.update = function update() {
	    this._filter.setContrast(this._options.contrast);
	  };
	
	  return Contrast;
	}(_primitive2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	
	
	Contrast.prototype.availableOptions = ContrastFilter.prototype.availableOptions;
	
	exports.default = Contrast;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var DesaturationFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(DesaturationFilter, _Engine$Filter);
	
	  function DesaturationFilter() {
	    (0, _classCallCheck3.default)(this, DesaturationFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(216);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  DesaturationFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    var desaturation = this._options.desaturation;
	
	
	    for (var i = 0; i < canvas.width * canvas.height; i++) {
	      var index = i * 4;
	      var luminance = imageData.data[index] * 0.3 + imageData.data[index + 1] * 0.59 + imageData.data[index + 2] * 0.11;
	      imageData.data[index] = luminance * (1 - desaturation) + imageData.data[index] * desaturation;
	      imageData.data[index + 1] = luminance * (1 - desaturation) + imageData.data[index + 1] * desaturation;
	      imageData.data[index + 2] = luminance * (1 - desaturation) + imageData.data[index + 2] * desaturation;
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return DesaturationFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	
	
	DesaturationFilter.prototype.availableOptions = {
	  desaturation: { type: 'number', default: 1, uniformType: 'f' }
	};
	
	/**
	 * Desaturation primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var Desaturation = function (_Primitive) {
	  (0, _inherits3.default)(Desaturation, _Primitive);
	
	  function Desaturation() {
	    (0, _classCallCheck3.default)(this, Desaturation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new DesaturationFilter();
	    return _this2;
	  }
	
	  /**
	   * Updates the filter's uniforms
	   */
	
	
	  Desaturation.prototype.update = function update() {
	    this._filter.setDesaturation(this._options.desaturation);
	  };
	
	  return Desaturation;
	}(_primitive2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	
	
	Desaturation.prototype.availableOptions = DesaturationFilter.prototype.availableOptions;
	
	exports.default = Desaturation;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var GlowFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(GlowFilter, _Engine$Filter);
	
	  function GlowFilter() {
	    (0, _classCallCheck3.default)(this, GlowFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(217);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  GlowFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    var color = this._options.color;
	
	
	    var d;
	    for (var x = 0; x < canvas.width; x++) {
	      for (var y = 0; y < canvas.height; y++) {
	        var index = (canvas.width * y + x) * 4;
	
	        var x01 = x / canvas.width;
	        var y01 = y / canvas.height;
	
	        var nx = (x01 - 0.5) / 0.75;
	        var ny = (y01 - 0.5) / 0.75;
	
	        var scalarX = nx * nx;
	        var scalarY = ny * ny;
	        d = 1 - (scalarX + scalarY);
	        d = Math.min(Math.max(d, 0.1), 1.0);
	
	        imageData.data[index] = imageData.data[index] * (d * color.r);
	        imageData.data[index + 1] = imageData.data[index + 1] * (d * color.g);
	        imageData.data[index + 2] = imageData.data[index + 2] * (d * color.b);
	        imageData.data[index + 3] = 255;
	      }
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return GlowFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	GlowFilter.prototype.availableOptions = {
	  color: { type: 'color', default: _color2.default.WHITE, uniformType: '3f' }
	};
	
	/**
	 * Glow primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var Glow = function (_Primitive) {
	  (0, _inherits3.default)(Glow, _Primitive);
	
	  function Glow() {
	    (0, _classCallCheck3.default)(this, Glow);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new GlowFilter();
	    return _this2;
	  }
	
	  /**
	   * Updates the filter's uniforms
	   */
	
	
	  Glow.prototype.update = function update() {
	    this._filter.setColor(this._options.color);
	  };
	
	  return Glow;
	}(_primitive2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	
	
	Glow.prototype.availableOptions = GlowFilter.prototype.availableOptions;
	
	exports.default = Glow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var GobblinFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(GobblinFilter, _Engine$Filter);
	
	  function GobblinFilter() {
	    (0, _classCallCheck3.default)(this, GobblinFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(218);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  GobblinFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    for (var x = 0; x < canvas.width; x++) {
	      for (var y = 0; y < canvas.height; y++) {
	        var index = (canvas.width * y + x) * 4;
	
	        imageData.data[index + 2] = imageData.data[index + 1] * 0.33;
	        imageData.data[index] = imageData.data[index] * 0.6;
	        imageData.data[index + 2] += imageData.data[index] * 0.33;
	        imageData.data[index + 1] = imageData.data[index + 1] * 0.7;
	        imageData.data[index + 3] = 255;
	      }
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return GobblinFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Gobblin primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	
	var Gobblin = function (_Primitive) {
	  (0, _inherits3.default)(Gobblin, _Primitive);
	
	  function Gobblin() {
	    (0, _classCallCheck3.default)(this, Gobblin);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new GobblinFilter();
	    return _this2;
	  }
	
	  return Gobblin;
	}(_primitive2.default);
	
	exports.default = Gobblin;

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var GrayscaleFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(GrayscaleFilter, _Engine$Filter);
	
	  function GrayscaleFilter() {
	    (0, _classCallCheck3.default)(this, GrayscaleFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(219);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  GrayscaleFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    for (var x = 0; x < canvas.width; x++) {
	      for (var y = 0; y < canvas.height; y++) {
	        var index = (canvas.width * y + x) * 4;
	
	        var luminance = imageData.data[index] * 0.2125 + imageData.data[index + 1] * 0.7154 + imageData.data[index + 2] * 0.0721;
	
	        imageData.data[index] = luminance;
	        imageData.data[index + 1] = luminance;
	        imageData.data[index + 2] = luminance;
	      }
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return GrayscaleFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Grayscale primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	
	var Grayscale = function (_Primitive) {
	  (0, _inherits3.default)(Grayscale, _Primitive);
	
	  function Grayscale() {
	    (0, _classCallCheck3.default)(this, Grayscale);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new GrayscaleFilter();
	    return _this2;
	  }
	
	  return Grayscale;
	}(_primitive2.default);
	
	exports.default = Grayscale;

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SaturationFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(SaturationFilter, _Engine$Filter);
	
	  function SaturationFilter() {
	    (0, _classCallCheck3.default)(this, SaturationFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(221);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  SaturationFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	    var saturation = this._options.saturation;
	
	
	    for (var x = 0; x < canvas.width; x++) {
	      for (var y = 0; y < canvas.height; y++) {
	        var index = (canvas.width * y + x) * 4;
	
	        var luminance = imageData.data[index] * 0.2125 + imageData.data[index + 1] * 0.7154 + imageData.data[index + 2] * 0.0721;
	        imageData.data[index] = luminance * (1 - saturation) + imageData.data[index] * saturation;
	        imageData.data[index + 1] = luminance * (1 - saturation) + imageData.data[index + 1] * saturation;
	        imageData.data[index + 2] = luminance * (1 - saturation) + imageData.data[index + 2] * saturation;
	      }
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return SaturationFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	
	
	SaturationFilter.prototype.availableOptions = {
	  saturation: { type: 'number', default: 0, uniformType: 'f' }
	};
	
	/**
	 * Saturation primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var Saturation = function (_Primitive) {
	  (0, _inherits3.default)(Saturation, _Primitive);
	
	  function Saturation() {
	    (0, _classCallCheck3.default)(this, Saturation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new SaturationFilter();
	    return _this2;
	  }
	
	  /**
	   * Updates the filter's uniforms
	   */
	
	
	  Saturation.prototype.update = function update() {
	    this._filter.setSaturation(this._options.saturation);
	  };
	
	  return Saturation;
	}(_primitive2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	
	
	Saturation.prototype.availableOptions = SaturationFilter.prototype.availableOptions;
	
	exports.default = Saturation;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	var _color = __webpack_require__(12);
	
	var _color2 = _interopRequireDefault(_color);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SoftColorOverlayFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(SoftColorOverlayFilter, _Engine$Filter);
	
	  function SoftColorOverlayFilter() {
	    (0, _classCallCheck3.default)(this, SoftColorOverlayFilter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(222);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  SoftColorOverlayFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    for (var x = 0; x < canvas.width; x++) {
	      for (var y = 0; y < canvas.height; y++) {
	        var index = (canvas.width * y + x) * 4;
	
	        imageData.data[index] = Math.max(this._options.color.r * 255, imageData.data[index]);
	        imageData.data[index + 1] = Math.max(this._options.color.g * 255, imageData.data[index + 1]);
	        imageData.data[index + 2] = Math.max(this._options.color.b * 255, imageData.data[index + 2]);
	      }
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return SoftColorOverlayFilter;
	}(_engine2.default.Filter);
	
	/**
	 * Specifies the available options for this filter
	 * @type {Object}
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	SoftColorOverlayFilter.prototype.availableOptions = {
	  color: { type: 'color', default: _color2.default.WHITE, uniformType: '3f' }
	};
	
	/**
	 * SoftColorOverlay primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var SoftColorOverlay = function (_Primitive) {
	  (0, _inherits3.default)(SoftColorOverlay, _Primitive);
	
	  function SoftColorOverlay() {
	    (0, _classCallCheck3.default)(this, SoftColorOverlay);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new SoftColorOverlayFilter();
	    return _this2;
	  }
	
	  /**
	   * Updates the filter's uniforms
	   */
	
	
	  SoftColorOverlay.prototype.update = function update() {
	    this._filter.setColor(this._options.color);
	  };
	
	  return SoftColorOverlay;
	}(_primitive2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	
	
	SoftColorOverlay.prototype.availableOptions = SoftColorOverlayFilter.prototype.availableOptions;
	
	exports.default = SoftColorOverlay;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _lookupTable = __webpack_require__(79);
	
	var _lookupTable2 = _interopRequireDefault(_lookupTable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Tone curve primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitives.LookupTable
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	var ToneCurve = function (_LookupTable) {
	  (0, _inherits3.default)(ToneCurve, _LookupTable);
	
	  function ToneCurve() {
	    (0, _classCallCheck3.default)(this, ToneCurve);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _LookupTable.call.apply(_LookupTable, [this].concat(args)));
	
	    if (!_this._options.rgbControlPoints) {
	      _this._options.rgbControlPoints = {
	        red: _this._options.controlPoints,
	        green: _this._options.controlPoints,
	        blue: _this._options.controlPoints
	      };
	    }
	
	    _this._updateLookupTable();
	    return _this;
	  }
	
	  /**
	   * Calculates the lookup table
	   * @private
	   */
	
	
	  ToneCurve.prototype._updateLookupTable = function _updateLookupTable() {
	    var r = this._calculateSplineCurve(this._options.rgbControlPoints.red);
	    var g = this._calculateSplineCurve(this._options.rgbControlPoints.green);
	    var b = this._calculateSplineCurve(this._options.rgbControlPoints.blue);
	
	    this._options.data = this._buildLookupTable(r, g, b);
	  };
	
	  /**
	   * Builds the lookup table
	   * @param  {Array} r
	   * @param  {Array} g
	   * @param  {Array} b
	   * @return {Array}
	   * @private
	   */
	
	
	  ToneCurve.prototype._buildLookupTable = function _buildLookupTable(r, g, b) {
	    var data = [];
	
	    for (var i = 0; i < 256; i++) {
	      data.push(Math.min(Math.max(i + r[i], 0), 255));
	      data.push(Math.min(Math.max(i + g[i], 0), 255));
	      data.push(Math.min(Math.max(i + b[i], 0), 255));
	      data.push(255);
	    }
	
	    return data;
	  };
	
	  /**
	   * Calculates the spline curve data for the given points
	   * @param  {Array.<Array.<Number>>} points
	   * @return {Array.<Number>}
	   */
	
	
	  ToneCurve.prototype._calculateSplineCurve = function _calculateSplineCurve(points) {
	    points = points.sort(function (a, b) {
	      return a[0] > b[0];
	    });
	
	    var splinePoints = this._getSplineCurve(points);
	    var firstSplinePoint = splinePoints[0];
	    var i;
	
	    if (firstSplinePoint[0] > 0) {
	      for (i = 0; i < firstSplinePoint[0]; i++) {
	        splinePoints.unshift([0, 0]);
	      }
	    }
	
	    var preparedPoints = [];
	    for (i = 0; i < splinePoints.length; i++) {
	      var newPoint = splinePoints[i];
	      var origPoint = [newPoint[0], newPoint[0]];
	
	      var distance = Math.sqrt(Math.pow(origPoint[0] - newPoint[0], 2) + Math.pow(origPoint[1] - newPoint[1], 2));
	
	      if (origPoint[1] > newPoint[1]) {
	        distance = -distance;
	      }
	
	      preparedPoints.push(distance);
	    }
	
	    return preparedPoints;
	  };
	
	  ToneCurve.prototype._getSplineCurve = function _getSplineCurve(points) {
	    var sdA = this._secondDerivative(points);
	
	    var n = sdA.length;
	    var sd = [];
	    var i;
	
	    for (i = 0; i < n; i++) {
	      sd[i] = sdA[i];
	    }
	
	    var output = [];
	
	    for (i = 0; i < n - 1; i++) {
	      var cur = points[i];
	      var next = points[i + 1];
	
	      for (var x = cur[0]; x < next[0]; x++) {
	        var t = (x - cur[0]) / (next[0] - cur[0]);
	
	        var a = 1 - t;
	        var b = t;
	        var h = next[0] - cur[0];
	
	        var y = a * cur[1] + b * next[1] + h * h / 6 * ((a * a * a - a) * sd[i] + (b * b * b - b) * sd[i + 1]);
	
	        if (y > 255) {
	          y = 255;
	        } else if (y < 0) {
	          y = 0;
	        }
	
	        output.push([x, y]);
	      }
	    }
	
	    if (output.length === 255) {
	      output.push(points[points.length - 1]);
	    }
	
	    return output;
	  };
	
	  ToneCurve.prototype._secondDerivative = function _secondDerivative(points) {
	    var n = points.length;
	    if (n <= 0 || n === 1) {
	      return null;
	    }
	
	    var matrix = [];
	    var result = [];
	    var i, k;
	
	    matrix[0] = [0, 1, 0];
	
	    for (i = 1; i < n - 1; i++) {
	      var P1 = points[i - 1];
	      var P2 = points[i];
	      var P3 = points[i + 1];
	
	      matrix[i] = matrix[i] || [];
	      matrix[i][0] = (P2[0] - P1[0]) / 6;
	      matrix[i][1] = (P3[0] - P1[0]) / 3;
	      matrix[i][2] = (P3[0] - P2[0]) / 6;
	      result[i] = (P3[1] - P2[1]) / (P3[0] - P2[0]) - (P2[1] - P1[1]) / (P2[0] - P1[0]);
	    }
	
	    result[0] = 0;
	    result[n - 1] = 0;
	
	    matrix[n - 1] = [0, 1, 0];
	
	    // Pass 1
	    for (i = 1; i < n; i++) {
	      k = matrix[1][0] / matrix[i - 1][1];
	      matrix[i][1] -= k * matrix[i - 1][2];
	      matrix[i][0] = 0;
	      result[i] -= k * result[i - 1];
	    }
	
	    // Pass 2
	    for (i = n - 2; i > 0; i--) {
	      k = matrix[i][2] / matrix[i + 1][1];
	      matrix[i][1] -= k * matrix[i + 1][0];
	      matrix[i][2] = 0;
	      result[i] -= k * result[i + 1];
	    }
	
	    var y2 = [];
	    for (i = 0; i < n; i++) {
	      y2[i] = result[i] / matrix[i][1];
	    }
	
	    return y2;
	  };
	
	  return ToneCurve;
	}(_lookupTable2.default);
	
	/**
	 * Specifies the available options for this primitive
	 * @type {Object}
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	ToneCurve.prototype.availableOptions = {
	  rgbControlPoints: { type: 'object' },
	  controlPoints: { type: 'array', default: [] }
	};
	
	exports.default = ToneCurve;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _engine = __webpack_require__(7);
	
	var _engine2 = _interopRequireDefault(_engine);
	
	var _primitive = __webpack_require__(10);
	
	var _primitive2 = _interopRequireDefault(_primitive);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var X400Filter = function (_Engine$Filter) {
	  (0, _inherits3.default)(X400Filter, _Engine$Filter);
	
	  function X400Filter() {
	    (0, _classCallCheck3.default)(this, X400Filter);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call(this));
	
	    _this._fragmentSource = __webpack_require__(223);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  X400Filter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var canvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var outputContext = outputTarget.getContext();
	
	    var imageData = inputContext.getImageData(0, 0, canvas.width, canvas.height);
	
	    for (var x = 0; x < canvas.width; x++) {
	      for (var y = 0; y < canvas.height; y++) {
	        var index = (canvas.width * y + x) * 4;
	
	        var gray = imageData.data[index] / 255 * 0.3 + imageData.data[index + 1] / 255 * 0.3 + imageData.data[index + 2] / 255 * 0.3;
	        gray -= 0.2;
	        gray = Math.max(0.0, Math.min(1.0, gray));
	        gray += 0.15;
	        gray *= 1.4;
	
	        gray *= 255;
	        imageData.data[index] = gray;
	        imageData.data[index + 1] = gray;
	        imageData.data[index + 2] = gray;
	      }
	    }
	
	    outputContext.putImageData(imageData, 0, 0);
	  };
	
	  return X400Filter;
	}(_engine2.default.Filter);
	
	/**
	 * X400 primitive
	 * @class
	 * @extends PhotoEditorSDK.Filters.Primitive
	 * @memberof PhotoEditorSDK.FilterPrimitives
	 */
	
	
	var X400 = function (_Primitive) {
	  (0, _inherits3.default)(X400, _Primitive);
	
	  function X400() {
	    (0, _classCallCheck3.default)(this, X400);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _Primitive.call.apply(_Primitive, [this].concat(args)));
	
	    _this2._filter = new X400Filter();
	    return _this2;
	  }
	
	  return X400;
	}(_primitive2.default);
	
	exports.default = X400;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Quozi Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var QuoziFilter = function (_Filter) {
	  (0, _inherits3.default)(QuoziFilter, _Filter);
	
	  function QuoziFilter() {
	    (0, _classCallCheck3.default)(this, QuoziFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    // Desaturation
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.Desaturation({
	      desaturation: 0.65
	    }));
	
	    // Tone curve
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 50], [40, 78], [118, 170], [181, 211], [255, 255]],
	        green: [[0, 27], [28, 45], [109, 157], [157, 195], [179, 208], [206, 212], [255, 240]],
	        blue: [[0, 50], [12, 55], [46, 103], [103, 162], [194, 182], [241, 201], [255, 219]]
	      }
	    }));
	    return _this;
	  }
	
	  return QuoziFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	QuoziFilter.identifier = 'quozi';
	
	QuoziFilter.displayName = 'Quozi';
	
	exports.default = QuoziFilter;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Semired Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SemiredFilter = function (_Filter) {
	  (0, _inherits3.default)(SemiredFilter, _Filter);
	
	  function SemiredFilter() {
	    (0, _classCallCheck3.default)(this, SemiredFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 129], [75, 153], [181, 227], [255, 255]],
	        green: [[0, 8], [111, 85], [212, 158], [255, 226]],
	        blue: [[0, 5], [75, 22], [193, 90], [255, 229]]
	      }
	    }));
	
	    _this._stack.push(new FilterPrimitives.Glow());
	    return _this;
	  }
	
	  return SemiredFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	SemiredFilter.identifier = 'semired';
	
	SemiredFilter.displayName = 'Semired';
	
	exports.default = SemiredFilter;

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Sunny Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SunnyFilter = function (_Filter) {
	  (0, _inherits3.default)(SunnyFilter, _Filter);
	
	  function SunnyFilter() {
	    (0, _classCallCheck3.default)(this, SunnyFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 0], [62, 82], [141, 154], [255, 255]],
	        green: [[0, 39], [56, 96], [192, 176], [255, 255]],
	        blue: [[0, 0], [174, 99], [255, 235]]
	      }
	    }));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      controlPoints: [[0, 0], [55, 20], [158, 191], [255, 255]]
	    }));
	    return _this;
	  }
	
	  return SunnyFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	SunnyFilter.identifier = 'sunny';
	
	SunnyFilter.displayName = 'Sunny';
	
	exports.default = SunnyFilter;

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Texas Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var TexasFilter = function (_Filter) {
	  (0, _inherits3.default)(TexasFilter, _Filter);
	
	  function TexasFilter() {
	    (0, _classCallCheck3.default)(this, TexasFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.ToneCurve({
	      rgbControlPoints: {
	        red: [[0, 72], [89, 99], [176, 212], [255, 237]],
	        green: [[0, 49], [255, 192]],
	        blue: [[0, 72], [255, 151]]
	      }
	    }));
	    return _this;
	  }
	
	  return TexasFilter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	TexasFilter.identifier = 'texas';
	
	TexasFilter.displayName = 'Texas';
	
	exports.default = TexasFilter;

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _filter = __webpack_require__(3);
	
	var _filter2 = _interopRequireDefault(_filter);
	
	var _primitives = __webpack_require__(4);
	
	var FilterPrimitives = _interopRequireWildcard(_primitives);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * X400 Filter
	 * @class
	 * @extends PhotoEditorSDK.Filter
	 * @memberof PhotoEditorSDK.Filters
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var X400Filter = function (_Filter) {
	  (0, _inherits3.default)(X400Filter, _Filter);
	
	  function X400Filter() {
	    (0, _classCallCheck3.default)(this, X400Filter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Filter.call.apply(_Filter, [this].concat(args)));
	
	    _this._stack.push(new FilterPrimitives.X400());
	    return _this;
	  }
	
	  return X400Filter;
	}(_filter2.default);
	
	/**
	 * This filter's identifier
	 * @type {String}
	 * @default
	 */
	
	
	X400Filter.identifier = 'x400';
	
	X400Filter.displayName = 'X400';
	
	exports.default = X400Filter;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _stackBlur = __webpack_require__(80);
	
	var _stackBlur2 = _interopRequireDefault(_stackBlur);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var LinearFocusFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(LinearFocusFilter, _Engine$Filter);
	
	  function LinearFocusFilter() {
	    (0, _classCallCheck3.default)(this, LinearFocusFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call.apply(_Engine$Filter, [this].concat(args)));
	
	    _this._fragmentSource = __webpack_require__(209);
	
	    _this._lastBlurRadius = null;
	    _this._lastGradientRadius = null;
	    _this._lastStart = new _globals.Vector2();
	    _this._lastEnd = new _globals.Vector2();
	
	    _this._blurredRenderTarget = new _globals.Engine.CanvasRenderTarget(100, 100, 1);
	
	    _this._maskRenderTarget = new _globals.Engine.CanvasRenderTarget(100, 100, 1);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  LinearFocusFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var inputDimensions = inputTarget.getDimensions();
	    var dimensionsChanged = !this._blurredRenderTarget.getDimensions().equals(inputDimensions);
	
	    this._blurredRenderTarget.setPixelRatio(inputTarget.getPixelRatio());
	    this._blurredRenderTarget.resizeTo(inputTarget.getDimensions());
	
	    this._maskRenderTarget.setPixelRatio(inputTarget.getPixelRatio());
	    this._maskRenderTarget.resizeTo(inputTarget.getDimensions());
	
	    if (!this._outputRenderTexture) {
	      this._outputRenderTexture = new _globals.Engine.RenderTexture(renderer, inputTarget.getWidth(), inputTarget.getHeight(), inputTarget.getPixelRatio());
	    }
	
	    if (!this._lastStart.equals(this._options.start) || !this._lastEnd.equals(this._options.end) || this._lastGradientRadius !== this._options.size || dimensionsChanged) {
	      this._renderMask();
	
	      this._lastStart = this._options.start.clone();
	      this._lastEnd = this._options.end.clone();
	      this._lastGradientRadius = this._options.size;
	    }
	
	    if (this._lastBlurRadius !== this._options.blurRadius || dimensionsChanged) {
	      this._blurImage(inputTarget);
	      this._lastBlurRadius = this._options.blurRadius;
	    }
	
	    this._applyMask(inputTarget, outputTarget);
	  };
	
	  /**
	   * Creates a blurred copy of the image
	   * @param  {CanvasRenderTarget} inputTarget
	   * @return {Canvas}
	   * @private
	   */
	
	
	  LinearFocusFilter.prototype._blurImage = function _blurImage(inputTarget) {
	    var inputCanvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	
	    var blurryImageData = inputContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height);
	    _stackBlur2.default.stackBlurCanvasRGBA(blurryImageData, 0, 0, inputCanvas.width, inputCanvas.height, this._options.blurRadius);
	
	    var blurryContext = this._blurredRenderTarget.getContext();
	    blurryContext.putImageData(blurryImageData, 0, 0);
	  };
	
	  /**
	   * Renders the mask canvas
	   * @private
	   */
	
	
	  LinearFocusFilter.prototype._renderMask = function _renderMask() {
	    var canvas = this._maskRenderTarget.getCanvas();
	    var context = this._maskRenderTarget.getContext();
	    var pixelRatio = this._maskRenderTarget.getPixelRatio();
	
	    var canvasDimensions = new _globals.Vector2(canvas.width, canvas.height);
	
	    var size = this._options.size * pixelRatio;
	    var gradientSize = this._options.gradientSize * pixelRatio;
	    var start = this._options.start.clone();
	    var end = this._options.end.clone();
	
	    start.multiply(canvasDimensions);
	    end.multiply(canvasDimensions);
	
	    var dist = end.clone().subtract(start);
	    var middle = start.clone().add(dist.clone().divide(2));
	
	    var totalDist = dist.len();
	    var factor = dist.clone().divide(totalDist);
	
	    var gradientStart = middle.clone().add((size + gradientSize) * factor.y, -(size + gradientSize) * factor.x);
	    var gradientEnd = middle.clone().add(-(size + gradientSize) * factor.y, (size + gradientSize) * factor.x);
	
	    // Build gradient
	    var gradient = context.createLinearGradient(gradientStart.x, gradientStart.y, gradientEnd.x, gradientEnd.y);
	    var fullGradientSize = gradientEnd.clone().subtract(gradientStart).len();
	    gradient.addColorStop(0, '#000000');
	    gradient.addColorStop(gradientSize / 2 / fullGradientSize, '#FFFFFF');
	    gradient.addColorStop(1.0 - gradientSize / 2 / fullGradientSize, '#FFFFFF');
	    gradient.addColorStop(1, '#000000');
	
	    // Draw gradient
	    context.fillStyle = gradient;
	    context.fillRect(0, 0, canvas.width, canvas.height);
	  };
	
	  /**
	   * Applies the blur and mask to the input canvas
	   * @param {CanvasRenderTarget} inputTarget
	   * @param {CanvasRenderTarget} outputTarget
	   * @private
	   */
	
	
	  LinearFocusFilter.prototype._applyMask = function _applyMask(inputTarget, outputTarget) {
	    var outputContext = outputTarget.getContext();
	    var inputCanvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var blurredContext = this._blurredRenderTarget.getContext();
	    var maskContext = this._maskRenderTarget.getContext();
	
	    var inputImageData = inputContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height);
	    var pixels = inputImageData.data;
	    var blurredPixels = blurredContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;
	    var maskPixels = maskContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;
	
	    var alpha = void 0;
	    for (var i = 0; i < inputCanvas.width * inputCanvas.height * 4; i += 4) {
	      alpha = maskPixels[i] / 255;
	
	      pixels[i] = alpha * pixels[i] + (1 - alpha) * blurredPixels[i];
	      pixels[i + 1] = alpha * pixels[i + 1] + (1 - alpha) * blurredPixels[i + 1];
	      pixels[i + 2] = alpha * pixels[i + 2] + (1 - alpha) * blurredPixels[i + 2];
	    }
	
	    outputContext.putImageData(inputImageData, 0, 0);
	  };
	
	  return LinearFocusFilter;
	}(_globals.Engine.Filter);
	
	LinearFocusFilter.prototype.availableOptions = {
	  blurRadius: { type: 'number', default: 30, uniformType: 'f' },
	  size: { type: 'number', default: 50, uniformType: 'f' },
	  gradientSize: { type: 'number', default: 50, uniformType: 'f' },
	  start: { type: 'vector2', default: new _globals.Vector2(0, 0.5), uniformType: '2f' },
	  end: { type: 'vector2', default: new _globals.Vector2(1, 0.5), uniformType: '2f' },
	  delta: { type: 'vector2', default: new _globals.Vector2(1, 1), uniformType: '2f' },
	  texSize: { type: 'vector2', default: new _globals.Vector2(100, 100), uniformType: '2f' }
	};
	
	exports.default = LinearFocusFilter;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _stackBlur = __webpack_require__(80);
	
	var _stackBlur2 = _interopRequireDefault(_stackBlur);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var RadialFocusFilter = function (_Engine$Filter) {
	  (0, _inherits3.default)(RadialFocusFilter, _Engine$Filter);
	
	  function RadialFocusFilter() {
	    (0, _classCallCheck3.default)(this, RadialFocusFilter);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Engine$Filter.call.apply(_Engine$Filter, [this].concat(args)));
	
	    _this._fragmentSource = __webpack_require__(210);
	
	    _this._lastBlurRadius = null;
	    _this._lastGradientRadius = null;
	    _this._lastPosition = new _globals.Vector2();
	
	    _this._blurredRenderTarget = new _globals.Engine.CanvasRenderTarget(100, 100, 1);
	
	    _this._maskRenderTarget = new _globals.Engine.CanvasRenderTarget(100, 100, 1);
	    return _this;
	  }
	
	  /**
	   * Applies this filter to the given inputTarget and renders it to
	   * the given outputTarget using the CanvasRenderer
	   * @param  {CanvasRenderer} renderer
	   * @param  {RenderTarget} inputTarget
	   * @param  {RenderTarget} outputTarget
	   * @param  {Boolean} clear = false
	   * @private
	   */
	
	
	  RadialFocusFilter.prototype._applyCanvas = function _applyCanvas(renderer, inputTarget, outputTarget) {
	    var clear = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	
	    var inputDimensions = inputTarget.getDimensions();
	    var dimensionsChanged = !this._blurredRenderTarget.getDimensions().equals(inputDimensions);
	
	    this._blurredRenderTarget.setPixelRatio(inputTarget.getPixelRatio());
	    this._blurredRenderTarget.resizeTo(inputTarget.getDimensions());
	
	    this._maskRenderTarget.setPixelRatio(inputTarget.getPixelRatio());
	    this._maskRenderTarget.resizeTo(inputTarget.getDimensions());
	
	    if (!this._outputRenderTexture) {
	      this._outputRenderTexture = new _globals.Engine.RenderTexture(renderer, inputTarget.getWidth(), inputTarget.getHeight(), inputTarget.getPixelRatio());
	    }
	
	    if (!this._lastPosition.equals(this._options.position) || this._lastGradientRadius !== this._options.gradientRadius || dimensionsChanged) {
	      this._renderMask();
	
	      this._lastPosition = this._options.position.clone();
	      this._lastGradientRadius = this._options.gradientRadius;
	    }
	
	    if (this._lastBlurRadius !== this._options.blurRadius || dimensionsChanged) {
	      this._blurImage(inputTarget);
	      this._lastBlurRadius = this._options.blurRadius;
	    }
	
	    this._applyMask(inputTarget, outputTarget);
	  };
	
	  /**
	   * Creates a blurred copy of the image
	   * @param  {CanvasRenderTarget} inputTarget
	   * @return {Canvas}
	   * @private
	   */
	
	
	  RadialFocusFilter.prototype._blurImage = function _blurImage(inputTarget) {
	    var inputCanvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	
	    var blurryImageData = inputContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height);
	    _stackBlur2.default.stackBlurCanvasRGBA(blurryImageData, 0, 0, inputCanvas.width, inputCanvas.height, this._options.blurRadius);
	
	    var blurryContext = this._blurredRenderTarget.getContext();
	    blurryContext.putImageData(blurryImageData, 0, 0);
	  };
	
	  /**
	   * Renders the mask canvas
	   * @private
	   */
	
	
	  RadialFocusFilter.prototype._renderMask = function _renderMask() {
	    var canvas = this._maskRenderTarget.getCanvas();
	    var context = this._maskRenderTarget.getContext();
	
	    var canvasDimensions = new _globals.Vector2(canvas.width, canvas.height);
	    var pixelRatio = this._maskRenderTarget.getPixelRatio();
	
	    var _options = this._options;
	    var radius = _options.radius;
	    var gradientRadius = _options.gradientRadius;
	
	    var position = this._options.position.clone().multiply(this._options.texSize).multiply(pixelRatio);
	
	    // Build gradient
	    var gradient = context.createRadialGradient(position.x, position.y, 0, position.x, position.y, (radius + gradientRadius) * pixelRatio);
	    gradient.addColorStop(0, '#FFFFFF');
	    gradient.addColorStop(radius / (radius + gradientRadius), '#FFFFFF');
	    gradient.addColorStop(1, '#000000');
	
	    // Draw gradient
	    context.fillStyle = gradient;
	    context.fillRect(0, 0, canvasDimensions.x, canvasDimensions.y);
	  };
	
	  /**
	   * Applies the blur and mask to the input canvas
	   * @param {CanvasRenderTarget} inputTarget
	   * @param {CanvasRenderTarget} outputTarget
	   * @private
	   */
	
	
	  RadialFocusFilter.prototype._applyMask = function _applyMask(inputTarget, outputTarget) {
	    var outputContext = outputTarget.getContext();
	    var inputCanvas = inputTarget.getCanvas();
	    var inputContext = inputTarget.getContext();
	    var blurredContext = this._blurredRenderTarget.getContext();
	    var maskContext = this._maskRenderTarget.getContext();
	
	    var inputImageData = inputContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height);
	    var pixels = inputImageData.data;
	    var blurredPixels = blurredContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;
	    var maskPixels = maskContext.getImageData(0, 0, inputCanvas.width, inputCanvas.height).data;
	
	    var alpha = void 0;
	    for (var i = 0; i < inputCanvas.width * inputCanvas.height * 4; i += 4) {
	      alpha = maskPixels[i] / 255;
	
	      pixels[i] = alpha * pixels[i] + (1 - alpha) * blurredPixels[i];
	      pixels[i + 1] = alpha * pixels[i + 1] + (1 - alpha) * blurredPixels[i + 1];
	      pixels[i + 2] = alpha * pixels[i + 2] + (1 - alpha) * blurredPixels[i + 2];
	    }
	
	    outputContext.putImageData(inputImageData, 0, 0);
	  };
	
	  return RadialFocusFilter;
	}(_globals.Engine.Filter);
	
	RadialFocusFilter.prototype.availableOptions = {
	  blurRadius: { type: 'number', default: 30, uniformType: 'f' },
	  radius: { type: 'number', default: 50, uniformType: 'f' },
	  gradientRadius: { type: 'number', default: 25, uniformType: 'f' },
	  position: { type: 'vector2', default: new _globals.Vector2(0.5, 0.5), uniformType: '2f' },
	  delta: { type: 'vector2', default: new _globals.Vector2(1, 1), uniformType: '2f' },
	  texSize: { type: 'vector2', default: new _globals.Vector2(100, 100), uniformType: '2f' }
	};
	
	exports.default = RadialFocusFilter;

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _linearFocusFilter = __webpack_require__(156);
	
	var _linearFocusFilter2 = _interopRequireDefault(_linearFocusFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can draw a linear focus
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var LinearFocusOperation = function (_Operation) {
	  (0, _inherits3.default)(LinearFocusOperation, _Operation);
	
	  /**
	   * Creates a new LinearFocusOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function LinearFocusOperation() {
	    (0, _classCallCheck3.default)(this, LinearFocusOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._lastBlurRadius = _this._options.blurRadius;
	    _this._lastSize = _this._options.size;
	    _this._lastGradientSize = _this._options.gradientSize;
	
	    _this._horizontalFilter = new _linearFocusFilter2.default();
	    _this._verticalFilter = new _linearFocusFilter2.default();
	    _this._sprite.setFilters([_this._horizontalFilter, _this._verticalFilter]);
	
	    _this._horizontalFilter.setDelta(new _globals.Vector2(1, 1));
	    _this._verticalFilter.setDelta(new _globals.Vector2(-1, 1));
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	    _this._sdk.on(_globals.Constants.Events.OPERATION_UPDATED, _this._onOperationUpdate);
	
	    _this._filter = new _linearFocusFilter2.default();
	    return _this;
	  }
	
	  /**
	   * Gets called when an operation is about to be updated. If the crop
	   * or rotation operation is updated, this will be recognized and the
	   * blur will be updated accordingly
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  LinearFocusOperation.prototype._onOperationUpdate = function _onOperationUpdate(operation, options) {
	    var identifier = operation.constructor.identifier;
	
	
	    if (identifier === 'orientation' && 'rotation' in options) {
	      this._applyRotation(operation, options);
	    }
	
	    if (identifier === 'orientation' && ('flipHorizontally' in options || 'flipVertically' in options)) {
	      this._applyFlip(operation, options);
	    }
	  };
	
	  /**
	   * Applies the given rotation change
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  LinearFocusOperation.prototype._applyRotation = function _applyRotation(operation, options) {
	    var oldRotation = operation.getRotation();
	    var newRotation = options.rotation;
	    var degreesDifference = newRotation - oldRotation;
	
	    var start = this._options.start;
	    var end = this._options.end;
	
	    if (degreesDifference === 90 || oldRotation === 270 && newRotation === 0) {
	      start.flip();
	      start.x = 1 - start.x;
	      end.flip();
	      end.x = 1 - end.x;
	    } else if (degreesDifference === -90 || oldRotation === -270 && newRotation === 0) {
	      start.flip();
	      start.y = 1 - start.y;
	      end.flip();
	      end.y = 1 - end.y;
	    }
	
	    this.set({ start: start, end: end });
	  };
	
	  /**
	   * Applies the given flip change
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  LinearFocusOperation.prototype._applyFlip = function _applyFlip(operation, options) {
	    if ('flipVertically' in options && operation.getFlipVertically() !== options.flipVertically) {
	      this._applyFlipDirection(operation, 'vertical');
	    }
	
	    if ('flipHorizontally' in options && operation.getFlipHorizontally() !== options.flipHorizontally) {
	      this._applyFlipDirection(operation, 'horizontal');
	    }
	  };
	
	  /**
	   * Applies a flip with the given direction
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {String} direction
	   * @private
	   */
	
	
	  LinearFocusOperation.prototype._applyFlipDirection = function _applyFlipDirection(operation, direction) {
	    var rotation = operation.getRotation();
	    if (rotation === 90 || rotation === 270) {
	      if (direction === 'vertical') {
	        direction = 'horizontal';
	      } else {
	        direction = 'vertical';
	      }
	    }
	
	    var start = this._options.start;
	    var end = this._options.end;
	
	    switch (direction) {
	      case 'horizontal':
	        start.x = 1 - start.x;
	        end.x = 1 - end.x;
	        break;
	      case 'vertical':
	        start.y = 1 - start.y;
	        end.y = 1 - end.y;
	        break;
	    }
	
	    this.set({ start: start, end: end });
	  };
	
	  /**
	   * Crops this image using WebGL
	   * @param  {PhotoEditorSDK} sdk
	   * @override
	   * @private
	   */
	  /* istanbul ignore next */
	
	
	  LinearFocusOperation.prototype._renderWebGL = function _renderWebGL(sdk) {
	    var renderer = sdk.getRenderer();
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    var spriteBounds = outputSprite.getBounds();
	    var outputDimensions = new _globals.Vector2(spriteBounds.width, spriteBounds.height);
	
	    var start = this._options.start.clone();
	    var end = this._options.end.clone();
	
	    start.multiply(outputDimensions);
	    end.multiply(outputDimensions);
	
	    var _options = this._options;
	    var blurRadius = _options.blurRadius;
	    var size = _options.size;
	    var gradientSize = _options.gradientSize;
	
	    var commonOptions = {
	      blurRadius: blurRadius, size: size, gradientSize: gradientSize,
	
	      start: start,
	      end: end,
	      texSize: outputDimensions
	    };
	
	    this._horizontalFilter.set(commonOptions);
	    this._verticalFilter.set(commonOptions);
	
	    var bounds = this._sprite.getBounds();
	    renderTexture.resizeTo(new _globals.Vector2(bounds.width, bounds.height));
	    renderTexture.render(this._container);
	
	    outputSprite.setTexture(renderTexture);
	    this.setDirtyForRenderer(false, renderer);
	
	    return _promise2.default.resolve();
	  };
	
	  /**
	   * Renders the radial blur using Canvas2D
	   * @param  {PhotoEditorSDK} sdk
	   * @override
	   * @private
	   */
	
	
	  LinearFocusOperation.prototype._renderCanvas = function _renderCanvas(sdk) {
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    var _options2 = this._options;
	    var blurRadius = _options2.blurRadius;
	    var size = _options2.size;
	    var gradientSize = _options2.gradientSize;
	    var start = _options2.start;
	    var end = _options2.end;
	
	    this._filter.set({
	      blurRadius: blurRadius, gradientSize: gradientSize, size: size, start: start, end: end,
	      texSize: sdk.getOutputDimensions()
	    });
	
	    this._sprite.setTexture(outputSprite.getTexture());
	    this._sprite.setFilters([this._filter]);
	
	    var bounds = this._sprite.getBounds();
	    renderTexture.resizeTo(new _globals.Vector2(bounds.width, bounds.height));
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	
	    return _promise2.default.resolve();
	  };
	
	  return LinearFocusOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	LinearFocusOperation.identifier = 'linear-focus';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	LinearFocusOperation.prototype.availableOptions = {
	  start: { type: 'vector2', default: new _globals.Vector2(0.0, 0.5) },
	  end: { type: 'vector2', default: new _globals.Vector2(1.0, 0.5) },
	  blurRadius: { type: 'number', default: 30 },
	  size: { type: 'number', default: 50 },
	  gradientSize: { type: 'number', default: 50 }
	};
	
	exports.default = LinearFocusOperation;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _vector = __webpack_require__(23);
	
	var _vector2 = _interopRequireDefault(_vector);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can rotate and flip an image
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var OrientationOperation = function (_Operation) {
	  (0, _inherits3.default)(OrientationOperation, _Operation);
	
	  /**
	   * Creates a new OrientationOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function OrientationOperation() {
	    (0, _classCallCheck3.default)(this, OrientationOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._sprite = new _globals.Engine.Sprite();
	    _this._container = new _globals.Engine.Container();
	    _this._container.addChild(_this._sprite);
	    return _this;
	  }
	
	  /**
	   * Rotates and/or flips the image
	   * @param  {PhotoEditorSDK} sdk
	   * @returns {Promise}
	   * @override
	   * @private
	   */
	
	
	  OrientationOperation.prototype._render = function _render(sdk) {
	    var renderer = sdk.getRenderer();
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    var actualDegrees = this._options.rotation % 360;
	    var radians = actualDegrees * (Math.PI / 180);
	
	    this._sprite.setScale(this._options.flipHorizontally ? -1 : 1, this._options.flipVertically ? -1 : 1);
	    this._sprite.setRotation(radians);
	    this._sprite.setAnchor(0.5, 0.5);
	    this._sprite.setTexture(outputSprite.getTexture());
	    this._sprite.updateTransform();
	
	    var bounds = this._sprite.getBounds();
	    renderTexture.resizeTo(new _vector2.default(bounds.width, bounds.height));
	
	    // Make sure we're rendering to top left corner
	    this._sprite.setPosition(renderTexture.getWidth() / 2, renderTexture.getHeight() / 2);
	
	    // Draw
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	    this.setDirtyForRenderer(false, renderer);
	
	    return _promise2.default.resolve();
	  };
	
	  /**
	   * Returns the dimensions the given dimensions will have after this operation
	   * has been applied
	   * @param {PhotoEditorSDK.Math.Vector2} dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   * @override
	   */
	
	
	  OrientationOperation.prototype.getNewDimensions = function getNewDimensions(dimensions) {
	    dimensions = dimensions.clone();
	    if (this._options.rotation % 180) {
	      dimensions.flip();
	    }
	    return dimensions;
	  };
	
	  return OrientationOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	OrientationOperation.identifier = 'orientation';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	OrientationOperation.prototype.availableOptions = {
	  rotation: { type: 'number', default: 0, validation: function validation(value) {
	      if (value % 90 !== 0) {
	        throw new Error('OrientationOperation: `rotation` has to be a multiple of 90.');
	      }
	    }, setter: function setter(value) {
	      return value % 360;
	    } },
	  flipVertically: { type: 'boolean', default: false },
	  flipHorizontally: { type: 'boolean', default: false }
	};
	
	exports.default = OrientationOperation;

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _promise = __webpack_require__(8);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _radialFocusFilter = __webpack_require__(157);
	
	var _radialFocusFilter2 = _interopRequireDefault(_radialFocusFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can draw a radial focus
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var RadialFocusOperation = function (_Operation) {
	  (0, _inherits3.default)(RadialFocusOperation, _Operation);
	
	  /**
	   * Creates a new RadialFocusOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function RadialFocusOperation() {
	    (0, _classCallCheck3.default)(this, RadialFocusOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._lastBlurRadius = _this._options.blurRadius;
	    _this._lastGradientRadius = _this._options.gradientRadius;
	
	    _this._horizontalFilter = new _radialFocusFilter2.default();
	    _this._verticalFilter = new _radialFocusFilter2.default();
	    _this._sprite.setFilters([_this._horizontalFilter, _this._verticalFilter]);
	
	    _this._horizontalFilter.setDelta(new _globals.Vector2(1, 1));
	    _this._verticalFilter.setDelta(new _globals.Vector2(-1, 1));
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	    _this._sdk.on(_globals.Constants.Events.OPERATION_UPDATED, _this._onOperationUpdate);
	
	    _this._filter = new _radialFocusFilter2.default();
	    return _this;
	  }
	
	  /**
	   * Gets called when an operation is about to be updated. If the crop
	   * or rotation operation is updated, this will be recognized and the
	   * blur will be updated accordingly
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  RadialFocusOperation.prototype._onOperationUpdate = function _onOperationUpdate(operation, options) {
	    var identifier = operation.constructor.identifier;
	
	
	    if (identifier === 'orientation' && 'rotation' in options) {
	      this._applyRotation(operation, options);
	    }
	
	    if (identifier === 'orientation' && ('flipHorizontally' in options || 'flipVertically' in options)) {
	      this._applyFlip(operation, options);
	    }
	  };
	
	  /**
	   * Applies the given rotation change
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  RadialFocusOperation.prototype._applyRotation = function _applyRotation(operation, options) {
	    var oldRotation = operation.getRotation();
	    var newRotation = options.rotation;
	    var degreesDifference = newRotation - oldRotation;
	
	    var position = this._options.position;
	
	    if (degreesDifference === 90 || oldRotation === 270 && newRotation === 0) {
	      position.flip();
	      position.x = 1 - position.x;
	    } else if (degreesDifference === -90 || oldRotation === -270 && newRotation === 0) {
	      position.flip();
	      position.y = 1 - position.y;
	    }
	
	    this.set({ position: position });
	  };
	
	  /**
	   * Applies the given flip change
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  RadialFocusOperation.prototype._applyFlip = function _applyFlip(operation, options) {
	    if ('flipVertically' in options && operation.getFlipVertically() !== options.flipVertically) {
	      this._applyFlipDirection(operation, 'vertical');
	    }
	
	    if ('flipHorizontally' in options && operation.getFlipHorizontally() !== options.flipHorizontally) {
	      this._applyFlipDirection(operation, 'horizontal');
	    }
	  };
	
	  /**
	   * Applies a flip with the given direction
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {String} direction
	   * @private
	   */
	
	
	  RadialFocusOperation.prototype._applyFlipDirection = function _applyFlipDirection(operation, direction) {
	    var rotation = operation.getRotation();
	    if (rotation === 90 || rotation === 270) {
	      if (direction === 'vertical') {
	        direction = 'horizontal';
	      } else {
	        direction = 'vertical';
	      }
	    }
	
	    var position = this._options.position;
	
	    switch (direction) {
	      case 'horizontal':
	        position.x = 1 - position.x;
	        break;
	      case 'vertical':
	        position.y = 1 - position.y;
	        break;
	    }
	
	    this.set({ position: position });
	  };
	
	  /**
	   * Renders the radial blur using WebGL
	   * @param  {PhotoEditorSDK} sdk
	   * @private
	   * @override
	   */
	  /* istanbul ignore next */
	
	
	  RadialFocusOperation.prototype._renderWebGL = function _renderWebGL(sdk) {
	    var renderer = sdk.getRenderer();
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    this._sprite.setTexture(outputSprite.getTexture());
	    var spriteBounds = outputSprite.getBounds();
	    var outputDimensions = new _globals.Vector2(spriteBounds.width, spriteBounds.height);
	
	    // Invert Y
	    var position = this._options.position.clone();
	    position.multiply(outputDimensions);
	
	    var _options = this._options;
	    var blurRadius = _options.blurRadius;
	    var radius = _options.radius;
	    var gradientRadius = _options.gradientRadius;
	
	    var commonOptions = {
	      blurRadius: blurRadius, radius: radius, gradientRadius: gradientRadius,
	      position: position,
	      texSize: outputDimensions
	    };
	
	    this._horizontalFilter.set(commonOptions);
	    this._verticalFilter.set(commonOptions);
	
	    var bounds = this._sprite.getBounds();
	    renderTexture.resizeTo(new _globals.Vector2(bounds.width, bounds.height));
	
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	    this.setDirtyForRenderer(false, renderer);
	
	    return _promise2.default.resolve();
	  };
	
	  /**
	   * Renders the radial blur using Canvas2D
	   * @param  {PhotoEditorSDK} sdk
	   * @private
	   * @override
	   */
	
	
	  RadialFocusOperation.prototype._renderCanvas = function _renderCanvas(sdk) {
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    var _options2 = this._options;
	    var blurRadius = _options2.blurRadius;
	    var radius = _options2.radius;
	    var gradientRadius = _options2.gradientRadius;
	    var position = _options2.position;
	
	    this._filter.set({
	      blurRadius: blurRadius, radius: radius, gradientRadius: gradientRadius, position: position,
	      texSize: sdk.getOutputDimensions()
	    });
	
	    this._sprite.setTexture(outputSprite.getTexture());
	    this._sprite.setFilters([this._filter]);
	
	    var bounds = this._sprite.getBounds();
	    renderTexture.resizeTo(new _globals.Vector2(bounds.width, bounds.height));
	    renderTexture.render(this._container);
	    outputSprite.setTexture(renderTexture);
	
	    return _promise2.default.resolve();
	  };
	
	  return RadialFocusOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	RadialFocusOperation.identifier = 'radial-focus';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	RadialFocusOperation.prototype.availableOptions = {
	  position: { type: 'vector2', default: new _globals.Vector2(0.5, 0.5) },
	  radius: { type: 'number', default: 50 },
	  gradientRadius: { type: 'number', default: 25 },
	  blurRadius: { type: 'number', default: 20 }
	};
	
	exports.default = RadialFocusOperation;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	var _sprite = __webpack_require__(47);
	
	var _sprite2 = _interopRequireDefault(_sprite);
	
	var _sticker = __webpack_require__(162);
	
	var _sticker2 = _interopRequireDefault(_sticker);
	
	var _text = __webpack_require__(163);
	
	var _text2 = _interopRequireDefault(_text);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can draw sprites (text and stickers) on the canvas
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	
	var SpriteOperation = function (_Operation) {
	  (0, _inherits3.default)(SpriteOperation, _Operation);
	
	  /**
	   * Creates a new SpriteOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function SpriteOperation() {
	    (0, _classCallCheck3.default)(this, SpriteOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._renderers = {};
	
	    _this._onOperationUpdate = _this._onOperationUpdate.bind(_this);
	    _this._onSpriteUpdate = _this._onSpriteUpdate.bind(_this);
	    _this._sdk.on(_globals.Constants.Events.OPERATION_UPDATED, _this._onOperationUpdate);
	
	    var sprites = _this._options.sprites.slice();
	    sprites.forEach(function (sprite) {
	      _this.removeSprite(sprite);
	      _this.addSprite(sprite);
	    });
	    return _this;
	  }
	
	  /**
	   * Returns the sprites that are instances of the given class
	   * @param  {Class} Klass
	   * @return {PhotoEditorSDK.Sprite[]}
	   * @todo   Do we still need this?
	   */
	
	
	  SpriteOperation.prototype.getSpritesOfType = function getSpritesOfType(Klass) {
	    return this._options.sprites.filter(function (sprite) {
	      return sprite instanceof Klass;
	    });
	  };
	
	  /**
	   * Gets called when an operation is about to be updated. If the crop
	   * or rotation operation is updated, this will be recognized and the
	   * stickers will be updated accordingly
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  SpriteOperation.prototype._onOperationUpdate = function _onOperationUpdate(operation, options) {
	    var identifier = operation.constructor.identifier;
	
	
	    if (identifier === 'crop' && 'start' in options && 'end' in options) {
	      this._applyCrop(operation, options);
	    }
	
	    if (identifier === 'orientation') {
	      if ('rotation' in options) {
	        this._applyRotation(operation, options);
	      }
	
	      if ('flipVertically' in options && operation.getFlipVertically() !== options.flipVertically) {
	        this._applyFlip(operation, 'vertical');
	      }
	
	      if ('flipHorizontally' in options && operation.getFlipHorizontally() !== options.flipHorizontally) {
	        this._applyFlip(operation, 'horizontal');
	      }
	    }
	  };
	
	  /**
	   * Applies a flip with the given direction
	   * @param  {PhotoEditorSDK.Operation} operation
	   * @param  {String} direction
	   * @private
	   */
	
	
	  SpriteOperation.prototype._applyFlip = function _applyFlip(operation, direction) {
	    var _this2 = this;
	
	    var rotation = operation.getRotation();
	    if (rotation === 90 || rotation === 270) {
	      if (direction === 'vertical') {
	        direction = 'horizontal';
	      } else {
	        direction = 'vertical';
	      }
	    }
	
	    this._options.sprites.forEach(function (sprite) {
	      sprite.applyFlip(_this2._sdk, direction);
	    });
	  };
	
	  /**
	   * Gets called when a sprite is flagged as dirty / its options changed
	   * @param  {PhotoEditorSDK.Sprite} sprite
	   * @param  {Object} options
	   * @private
	   */
	
	
	  SpriteOperation.prototype._onSpriteUpdate = function _onSpriteUpdate(sprite, options) {
	    this.setDirty(true);
	  };
	
	  /**
	   * Applies the given rotation change
	   * @param  {PhotoEditorSDK.Operations.RotationOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  SpriteOperation.prototype._applyRotation = function _applyRotation(operation, options) {
	    var oldRotation = operation.getRotation();
	    var newRotation = options.rotation;
	    var degreesDifference = newRotation - oldRotation;
	
	    var finalDimensions = this._sdk.getFinalDimensions();
	    this._options.sprites.forEach(function (sprite) {
	      // Update sprite rotation
	      var spriteDegrees = sprite.getRotation() * 180 / Math.PI;
	      spriteDegrees += degreesDifference;
	      sprite.setRotation(spriteDegrees * Math.PI / 180);
	
	      // Flip X and Y unless we're rotating by 180 degrees
	      var spritePosition = sprite.getPosition().clone();
	      if (degreesDifference === 90 || oldRotation === 270 && newRotation === 0) {
	        var tempX = spritePosition.x;
	        spritePosition.x = finalDimensions.y - spritePosition.y;
	        spritePosition.y = tempX;
	      } else if (degreesDifference === -90 || oldRotation === -270 && newRotation === 0) {
	        var tempY = spritePosition.y;
	        spritePosition.y = finalDimensions.x - spritePosition.x;
	        spritePosition.x = tempY;
	      }
	      sprite.setPosition(spritePosition);
	    });
	  };
	
	  /**
	   * Applies the given crop change
	   * @param  {PhotoEditorSDK.Operations.CropOperation} operation
	   * @param  {Object} options
	   * @private
	   */
	
	
	  SpriteOperation.prototype._applyCrop = function _applyCrop(operation, options) {
	    var inputDimensions = this._sdk.getInputDimensions();
	
	    var oldStart = operation.getStart();
	    var newStart = options.start;
	
	    this._options.sprites.forEach(function (sprite) {
	      var position = sprite.getPosition().clone();
	      sprite.set({
	        position: position.add(oldStart.clone().subtract(newStart).multiply(inputDimensions))
	      }, false);
	    });
	  };
	
	  /**
	   * Returns a serialized version of the given option
	   * @param {String} optionName
	   * @return {*} optionName
	   * @private
	   * @override
	   */
	
	
	  SpriteOperation.prototype._serializeOption = function _serializeOption(optionName) {
	    // Since `sprites` is an array of configurables, we need
	    // to serialize them as well
	    if (optionName === 'sprites') {
	      return this._options.sprites.map(function (sprite) {
	        return sprite.serializeOptions();
	      });
	    }
	    return _Operation.prototype._serializeOption.call(this, optionName);
	  };
	
	  /**
	   * Creates a new sticker object and returns it
	   * @param  {Object} options
	   * @return {PhotoEditorSDK.Operations.SpriteOperation.Sticker}
	   */
	
	
	  SpriteOperation.prototype.createSticker = function createSticker(options) {
	    return new _sticker2.default(this, options);
	  };
	
	  /**
	   * Creates a new sticker object and returns it
	   * @param  {Object} options
	   * @return {PhotoEditorSDK.Operations.SpriteOperation.Text}
	   */
	
	
	  SpriteOperation.prototype.createText = function createText(options) {
	    return new _text2.default(this, options);
	  };
	
	  /**
	   * Gets called when a sprite has been added
	   * @param {PhotoEditorSDK.Sprite} sprite
	   */
	
	
	  SpriteOperation.prototype.addSprite = function addSprite(sprite) {
	    this._options.sprites.push(sprite);
	    this._container.addChild(sprite.getDisplayObject());
	
	    // This operation needs to be rerendered
	    this.setDirty(true);
	
	    sprite.on('update', this._onSpriteUpdate);
	  };
	
	  /**
	   * Removes the given sprite from the list of sprites
	   * @param  {PhotoEditorSDK.Sprite} sprite
	   * @return {Boolean}
	   */
	
	
	  SpriteOperation.prototype.removeSprite = function removeSprite(sprite) {
	    var sprites = this._options.sprites;
	    var index = sprites.indexOf(sprite);
	    if (index !== -1) {
	      sprite.off('update', this._onSpriteUpdate);
	      this._container.removeChild(sprite.getDisplayObject());
	
	      sprites.splice(index, 1);
	      return true;
	    }
	    return false;
	  };
	
	  /**
	   * Renders this operation
	   * @param  {PhotoEditorSDK} sdk
	   * @returns {Promise}
	   * @override
	   * @private
	   */
	
	
	  SpriteOperation.prototype._render = function _render(sdk) {
	    var outputSprite = sdk.getSprite();
	    var renderTexture = this._getRenderTexture(sdk);
	
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    var container = this._container;
	    var sprites = this._options.sprites;
	
	    var outputBounds = outputSprite.getBounds();
	    renderTexture.resizeTo(new _globals.Vector2(outputBounds.width, outputBounds.height));
	
	    return _globals.Promise.all(sprites.map(function (s) {
	      return s.validateSettings();
	    })).then(function () {
	      sprites.forEach(function (sprite) {
	        sprite.update(sdk);
	      });
	
	      renderTexture.clear();
	      renderTexture.render(container);
	      outputSprite.setTexture(renderTexture);
	    });
	  };
	
	  /**
	   * Takes the given Sprite to front
	   * @param  {PhotoEditorSDK.Operations.SpriteOperation.Sprite} sprite
	   */
	
	
	  SpriteOperation.prototype.takeSpriteToFront = function takeSpriteToFront(sprite) {
	    var sprites = this._options.sprites;
	
	    var spriteIndex = sprites.indexOf(sprite);
	    if (spriteIndex === -1) return;
	
	    _globals.Utils.moveArrayItem(sprites, spriteIndex, sprites.length - 1);
	
	    var displayObject = sprite.getDisplayObject();
	    this._container.removeChild(displayObject);
	    this._container.addChild(displayObject);
	
	    this.setDirty(true);
	  };
	
	  /**
	   * Returns the sprite at the given position on the canvas
	   * @param  {PhotoEditorSDK.Math.Vector2} position
	   * @param  {Class} [type]
	   * @return {PhotoEditorSDK.Sprite}
	   */
	
	
	  SpriteOperation.prototype.getSpriteAtPosition = function getSpriteAtPosition(position, type) {
	    var _this3 = this;
	
	    this._options.sprites.forEach(function (s) {
	      return s.update(_this3._sdk);
	    });
	
	    // Translate canvas position to relative position on sprite by
	    // applying the inverse of our outputSprite's world transform matrix
	    var outputSprite = this._sdk.getSprite();
	    var actualPosition = outputSprite.getWorldTransform().applyInverseToVector(position);
	
	    // Apply anchor
	
	    var _outputSprite$getText = outputSprite.getTexture().getFrame();
	
	    var width = _outputSprite$getText.width;
	    var height = _outputSprite$getText.height;
	
	    var anchorOffset = outputSprite.getAnchor().clone().multiply(-width, -height);
	    actualPosition.subtract(anchorOffset);
	
	    // Find intersecting sprite
	    var intersectingSprite = null;
	    var sprites = this._options.sprites.slice(0).reverse();
	    for (var i = 0, c = sprites.length; i < c; i++) {
	      var sprite = sprites[i];
	      if (type && !(sprite instanceof type)) {
	        continue;
	      }
	      if (sprite.getDisplayObject().isAtPosition(actualPosition)) {
	        intersectingSprite = sprite;
	        break;
	      }
	    }
	    return intersectingSprite;
	  };
	
	  /**
	   * Disposes this operation
	   */
	
	
	  SpriteOperation.prototype.dispose = function dispose() {
	    this._sdk.off(_globals.Constants.Events.OPERATION_UPDATED, this._onOperationUpdate);
	  };
	
	  return SpriteOperation;
	}(_operation2.default); /*
	                         * This file is part of PhotoEditorSDK.
	                         *
	                         * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                         * All rights reserved.
	                         *
	                         * Redistribution and use in source and binary forms, without
	                         * modification, are permitted provided that the following license agreement
	                         * is approved and a legal/financial contract was signed by the user.
	                         * The license agreement can be found under following link:
	                         *
	                         * https://www.photoeditorsdk.com/LICENSE.txt
	                         */
	
	SpriteOperation.Sticker = _sticker2.default;
	SpriteOperation.Text = _text2.default;
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	SpriteOperation.identifier = 'sprite';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	SpriteOperation.prototype.availableOptions = {
	  sprites: {
	    type: 'array', default: [],
	    setter: function setter(sprites, initial) {
	      var _this4 = this;
	
	      sprites = sprites.map(function (sprite, i) {
	        if (sprite instanceof _sprite2.default) {
	          return sprite;
	        }
	
	        var type = sprite.type;
	
	        delete sprite.type;
	
	        // Create sprite from the given options
	        switch (type) {
	          case 'text':
	            return new _text2.default(_this4, sprite);
	          case 'sticker':
	            return new _sticker2.default(_this4, sprite);
	          default:
	            _globals.Log.error(_this4.constructor.name, 'Invalid sprite type: ' + sprite.type);
	        }
	      });
	
	      // Remove all sprites
	      if (!initial) {
	        if (this._options.sprites) {
	          var spritesToRemove = this._options.sprites.slice();
	          spritesToRemove.forEach(function (sprite) {
	            _this4.removeSprite(sprite);
	          });
	        }
	
	        // Add all sprites
	        sprites.forEach(function (sprite) {
	          _this4.addSprite(sprite);
	        });
	      }
	
	      return sprites;
	    }
	  }
	};
	
	exports.default = SpriteOperation;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _sprite = __webpack_require__(47);
	
	var _sprite2 = _interopRequireDefault(_sprite);
	
	var _adjustmentsFilter = __webpack_require__(76);
	
	var _adjustmentsFilter2 = _interopRequireDefault(_adjustmentsFilter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A sticker that can be drawn by SpriteOperation. Should only be created via {@link PhotoEditorSDK.Operations.SpriteOperation#createSticker}
	 * @class
	 * @memberof PhotoEditorSDK.Operations.SpriteOperation
	 */
	
	var Sticker = function (_Sprite) {
	  (0, _inherits3.default)(Sticker, _Sprite);
	
	  /**
	   * Creates a new Sticker
	   * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
	   * @param  {Object} [options]
	   */
	
	  function Sticker() {
	    (0, _classCallCheck3.default)(this, Sticker);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Sprite.call.apply(_Sprite, [this].concat(args)));
	
	    if (_this._options.image) {
	      _this._onImageUpdate();
	    }
	
	    _this._renderTextures = {};
	    _this._adjustmentsFilter = new _adjustmentsFilter2.default();
	    return _this;
	  }
	
	  /**
	   * Returns a serialized version of this configurable
	   * @return {Object}
	   */
	
	
	  Sticker.prototype.serializeOptions = function serializeOptions() {
	    var options = _Sprite.prototype.serializeOptions.call(this);
	    options.type = 'sticker';
	    return options;
	  };
	
	  /**
	   * Updates this sprite
	   * @param  {PhotoEditorSDK} sdk
	   * @returns {Promise}
	   */
	
	
	  Sticker.prototype.update = function update(sdk) {
	    _Sprite.prototype.update.call(this, sdk);
	
	    var renderer = sdk.getRenderer();
	
	    var renderTexture = this._getRenderTexture(renderer);
	    var hasAdjustments = this._hasAdjustments();
	
	    this._identitySprite.setFilters(hasAdjustments ? [this._adjustmentsFilter] : []);
	
	    // Stickers with adjustments are rendered to a render texture that
	    // can be re-used
	    if (hasAdjustments) {
	      this._identitySprite.setTexture(this._inputTexture);
	
	      var adjustments = this._options.adjustments;
	      this._adjustmentsFilter.set({
	        brightness: adjustments.getBrightness(),
	        saturation: adjustments.getSaturation(),
	        contrast: adjustments.getContrast()
	      });
	
	      var _options$image = this._options.image;
	      var width = _options$image.width;
	      var height = _options$image.height;
	
	      renderTexture.resizeTo(new _globals.Vector2(width, height));
	      renderTexture.clear();
	      renderTexture.render(this._identitySprite);
	      this._sprite.setTexture(renderTexture);
	    } else {
	      this._sprite.setTexture(this._inputTexture);
	    }
	
	    // Flip
	    var scale = this._sprite.getScale();
	    if (this._options.flipVertically) {
	      scale.y *= -1;
	    }
	    if (this._options.flipHorizontally) {
	      scale.x *= -1;
	    }
	    this._sprite.setScale(scale);
	
	    return _globals.Promise.resolve();
	  };
	
	  /**
	   * Creates and/or returns a RenderTexture
	   * @param {PhotoEditorSDK.Engine.BaseRenderer} renderer
	   * @return {PhotoEditorSDK.Engine.RenderTexture}
	   * @private
	   */
	
	
	  Sticker.prototype._getRenderTexture = function _getRenderTexture(renderer) {
	    if (!this._renderTextures[renderer.id]) {
	      var _options$image2 = this._options.image;
	      var width = _options$image2.width;
	      var height = _options$image2.height;
	
	      this._renderTextures[renderer.id] = new _globals.Engine.RenderTexture(renderer, width, height, 1);
	    }
	    return this._renderTextures[renderer.id];
	  };
	
	  /**
	   * Checks if this sticker has any adjustments and a filter is needed
	   * @return {Boolean}
	   * @private
	   */
	
	
	  Sticker.prototype._hasAdjustments = function _hasAdjustments() {
	    var adjustments = this._options.adjustments;
	    return adjustments.getBrightness() !== 0 || adjustments.getSaturation() !== 1 || adjustments.getContrast() !== 1;
	  };
	
	  /**
	   * Gets called when this sticker's image is updated
	   * @private
	   */
	
	
	  Sticker.prototype._onImageUpdate = function _onImageUpdate() {
	    this._inputTexture = _globals.Engine.Texture.fromImage(this._options.image);
	    this._identitySprite.setTexture(this._inputTexture);
	    this._sprite.setTexture(this._inputTexture);
	    this.setDirty(true);
	  };
	
	  /**
	   * Sets the value for the given option, validates it
	   * @param {String} optionName
	   * @param {*} value
	   * @param {Boolean} update = true
	   * @override
	   */
	
	
	  Sticker.prototype.setOption = function setOption(optionName, value) {
	    var update = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
	
	    _Sprite.prototype.setOption.call(this, optionName, value, update);
	
	    if (optionName === 'image' && this._identitySprite) {
	      this._onImageUpdate();
	    }
	  };
	
	  return Sticker;
	}(_sprite2.default); /*
	                      * This file is part of PhotoEditorSDK.
	                      *
	                      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                      * All rights reserved.
	                      *
	                      * Redistribution and use in source and binary forms, without
	                      * modification, are permitted provided that the following license agreement
	                      * is approved and a legal/financial contract was signed by the user.
	                      * The license agreement can be found under following link:
	                      *
	                      * https://www.photoeditorsdk.com/LICENSE.txt
	                      */
	
	Sticker.prototype.availableOptions = {
	  name: { type: 'string', default: '' },
	  image: { type: 'object', required: true },
	  position: { type: 'vector2', default: new _globals.Vector2(0, 0) },
	  scale: { type: 'vector2', default: new _globals.Vector2(1.0, 1.0) },
	  anchor: { type: 'vector2', default: new _globals.Vector2(0.0, 0.0) },
	  pivot: { type: 'vector2', default: new _globals.Vector2(0.5, 0.5) },
	  rotation: { type: 'number', default: 0 },
	  flipHorizontally: { type: 'boolean', default: false },
	  flipVertically: { type: 'boolean', default: false },
	  adjustments: { type: 'configurable', structure: {
	      brightness: { type: 'number', default: 0 },
	      saturation: { type: 'number', default: 1 },
	      contrast: { type: 'number', default: 1 }
	    } }
	};
	
	exports.default = Sticker;

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _sprite = __webpack_require__(47);
	
	var _sprite2 = _interopRequireDefault(_sprite);
	
	var _textRenderer = __webpack_require__(164);
	
	var _textRenderer2 = _interopRequireDefault(_textRenderer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * A text that can be drawn by SpriteOperation. Should only be created via {@link PhotoEditorSDK.Operations.SpriteOperation#createText}
	 * @class
	 * @memberof PhotoEditorSDK.Operations.SpriteOperation
	 */
	
	var Text = function (_Sprite) {
	  (0, _inherits3.default)(Text, _Sprite);
	
	  /**
	   * Creates a new Text
	   * @param  {PhotoEditorSDK.Operations.SpriteOperation} operation
	   * @param  {Object} [options]
	   */
	
	  function Text() {
	    (0, _classCallCheck3.default)(this, Text);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Sprite.call.apply(_Sprite, [this].concat(args)));
	
	    _this._textRenderer = new _textRenderer2.default(_this, _this._operation);
	    _this._sprite.setTexture(_this._textRenderer.getTexture());
	    return _this;
	  }
	
	  /**
	   * Returns a serialized version of this configurable
	   * @return {Object}
	   */
	
	
	  Text.prototype.serializeOptions = function serializeOptions() {
	    var options = _Sprite.prototype.serializeOptions.call(this);
	    options.type = 'text';
	    return options;
	  };
	
	  /**
	   * Returns a style object for this text
	   * @param {PhotoEditorSDK} SDK
	   * @param {PhotoEditorSDK.Math.Vector2} outputDimensions
	   * @return {Object}
	   */
	
	
	  Text.prototype.getDOMStyle = function getDOMStyle(sdk, outputDimensions) {
	    var textOptions = this._textRenderer.calculateFontStyles(sdk, true);
	
	    return {
	      fontWeight: this._options.fontWeight,
	      fontSize: textOptions.fontSize,
	      fontFamily: this._options.fontFamily,
	      lineHeight: textOptions.lineHeight + 'px',
	      color: this._options.color.toRGBA(),
	      backgroundColor: this._options.backgroundColor.toRGBA(),
	      textAlign: this._options.alignment
	    };
	  };
	
	  /**
	   * Returns the bounding box for this text
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Boolean} considerZoom = false
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Text.prototype.getBoundingBox = function getBoundingBox(sdk) {
	    var considerZoom = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    return this._textRenderer.getBoundingBox(sdk, considerZoom);
	  };
	
	  /**
	   * Applies a flip in the given direction
	   * @param  {String} direction
	   */
	
	
	  Text.prototype.applyFlip = function applyFlip(direction) {
	    _Sprite.prototype.applyFlip.call(this, direction);
	
	    var rotation = this._options.rotation;
	    switch (direction) {
	      case 'horizontal':
	        rotation += (Math.PI - rotation) * 2;
	        this.setRotation(rotation);
	        break;
	      case 'vertical':
	        rotation += (Math.PI / 2 - rotation) * 2;
	        this.setRotation(rotation);
	        break;
	    }
	  };
	
	  /**
	   * Updates this sprite
	   * @param  {PhotoEditorSDK} sdk
	   * @return {Promise}
	   */
	
	
	  Text.prototype.update = function update(sdk) {
	    // Re-render text
	    this._textRenderer.update(sdk);
	    var textTexture = this._textRenderer.getTexture();
	    var baseTexture = textTexture.getBaseTexture();
	    baseTexture.update();
	
	    // Upload texture
	    var renderer = sdk.getRenderer();
	
	    /* istanbul ignore next */
	    if (renderer.isOfType('webgl')) {
	      renderer.updateTexture(textTexture.getBaseTexture());
	    }
	
	    return _Sprite.prototype.update.call(this, sdk);
	  };
	
	  return Text;
	}(_sprite2.default); /*
	                      * This file is part of PhotoEditorSDK.
	                      *
	                      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                      * All rights reserved.
	                      *
	                      * Redistribution and use in source and binary forms, without
	                      * modification, are permitted provided that the following license agreement
	                      * is approved and a legal/financial contract was signed by the user.
	                      * The license agreement can be found under following link:
	                      *
	                      * https://www.photoeditorsdk.com/LICENSE.txt
	                      */
	
	Text.prototype.availableOptions = {
	  fontSize: { type: 'number', default: 30 },
	  lineHeight: { type: 'number', default: 1.1 },
	  fontFamily: { type: 'string', default: 'Times New Roman' },
	  fontWeight: { type: 'string', default: 'normal' },
	  alignment: { type: 'string', default: 'left', available: ['left', 'center', 'right'] },
	  verticalAlignment: { type: 'string', default: 'top', available: ['top', 'center', 'bottom'] },
	  color: { type: 'color', default: new _globals.Color(1, 0, 0, 1) },
	  backgroundColor: { type: 'color', default: new _globals.Color(0, 0, 0, 0) },
	  position: { type: 'vector2', default: new _globals.Vector2(0, 0) },
	  anchor: { type: 'vector2', default: new _globals.Vector2(0.5, 0.5) },
	  pivot: { type: 'vector2', default: new _globals.Vector2(0, 0) },
	  rotation: { type: 'number', default: 0 },
	  text: { type: 'string', required: true },
	  maxWidth: { type: 'number', default: 100 },
	  maxHeight: { type: 'number', default: 0 },
	  flipHorizontally: { type: 'boolean', default: false },
	  flipVertically: { type: 'boolean', default: false }
	};
	
	exports.default = Text;

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(5);
	
	var _textSplitter = __webpack_require__(165);
	
	var _textSplitter2 = _interopRequireDefault(_textSplitter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var TextRenderer = function () {
	  function TextRenderer(text, operation) {
	    (0, _classCallCheck3.default)(this, TextRenderer);
	
	    this._text = text;
	    this._operation = operation;
	
	    this._createCanvas();
	    this._createTexture();
	  }
	
	  /**
	   * Creates the canvas and initializes the text splitter
	   * @private
	   */
	
	
	  TextRenderer.prototype._createCanvas = function _createCanvas() {
	    this._canvas = _globals.Utils.createCanvas();
	    this._context = this._canvas.getContext('2d');
	    this._textSplitter = new _textSplitter2.default(this._context);
	  };
	
	  /**
	   * Creates the texture
	   * @private
	   */
	
	
	  TextRenderer.prototype._createTexture = function _createTexture() {
	    this._texture = _globals.Engine.Texture.fromCanvas(this._canvas);
	  };
	
	  /**
	   * Applies the text options on the given context
	   * @param  {Object} textOptions
	   * @private
	   */
	
	
	  TextRenderer.prototype._applyTextOptions = function _applyTextOptions(textOptions) {
	    this._context.font = this._text.getFontWeight() + ' ' + textOptions.fontSize + 'px ' + this._text.getFontFamily();
	    this._context.textBaseline = 'top';
	    this._context.textAlign = this._text.getAlignment();
	    this._context.fillStyle = this._text.getColor().toRGBA();
	  };
	
	  /**
	   * Iterate over all lines and split them into multiple lines, depending
	   * on the width they need
	   * @param {Number} maxWidth
	   * @return {Array.<string>}
	   * @private
	   */
	
	
	  TextRenderer.prototype._buildOutputLines = function _buildOutputLines(maxWidth) {
	    this._textSplitter.setText(this._text.getText());
	    this._textSplitter.setMaxWidth(maxWidth);
	    return this._textSplitter.getLines();
	  };
	
	  /**
	   * Draws the given line onto context at the given Y position
	   * @param  {String} text
	   * @param  {Number} y
	   * @private
	   */
	
	
	  TextRenderer.prototype._renderTextLine = function _renderTextLine(text, y) {
	    var textAlignment = this._text.getAlignment();
	    if (textAlignment === 'center') {
	      this._context.fillText(text, this._canvas.width / 2, y);
	    } else if (textAlignment === 'left') {
	      this._context.fillText(text, 0, y);
	    } else if (textAlignment === 'right') {
	      this._context.fillText(text, this._canvas.width, y);
	    }
	  };
	
	  /**
	   * Renders this sprite
	   * @param  {PhotoEditorSDK} sdk
	   * @returns {Promise}
	   */
	
	
	  TextRenderer.prototype.update = function update(sdk) {
	    var textOptions = this.calculateFontStyles(sdk);
	
	    var _calculateText2 = this._calculateText(sdk, textOptions);
	
	    var boundingBox = _calculateText2.boundingBox;
	    var lines = _calculateText2.lines;
	
	    return this._renderText(sdk, boundingBox, lines, textOptions);
	  };
	
	  /**
	   * Renders the text
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Vector2} boundingBox
	   * @param  {Array.<String>} lines
	   * @param  {Object} textOptions
	   * @return {Promise}
	   * @private
	   */
	
	
	  TextRenderer.prototype._renderText = function _renderText(sdk, boundingBox, lines, textOptions) {
	    var _this = this;
	
	    return new _globals.Promise(function (resolve, reject) {
	      // Resize the canvas
	      _this._canvas.width = boundingBox.x;
	      _this._canvas.height = boundingBox.y;
	
	      if (_this._text.getMaxHeight()) {
	        _this._canvas.height = Math.min(_this._text.getMaxHeight(), _this._canvas.height);
	      }
	
	      // Update the context
	      _this._context = _this._canvas.getContext('2d');
	
	      // Render background color
	      _this._context.fillStyle = _this._text.getBackgroundColor().toRGBA();
	      _this._context.fillRect(0, 0, boundingBox.x, boundingBox.y);
	
	      // Apply text options
	      _this._applyTextOptions(textOptions);
	
	      // Draw lines
	      for (var lineNum = 0; lineNum < lines.length; lineNum++) {
	        var line = lines[lineNum];
	        _this._renderTextLine(line, textOptions.lineHeight * lineNum);
	      }
	
	      resolve();
	    });
	  };
	
	  /**
	   * Calculates the actual font size and line height
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Boolean} considerZoom
	   */
	
	
	  TextRenderer.prototype.calculateFontStyles = function calculateFontStyles(sdk) {
	    var considerZoom = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    var fontSize = this._text.getFontSize();
	    var lineHeight = this._text.getLineHeight() * fontSize;
	
	    if (considerZoom) {
	      var zoom = sdk.getZoom();
	      fontSize *= zoom;
	      lineHeight *= zoom;
	    }
	
	    return { fontSize: fontSize, lineHeight: lineHeight };
	  };
	
	  /**
	   * Calculates the bounding box and new lines according to max width
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} textOptions
	   * @return {Object}
	   * @private
	   */
	
	
	  TextRenderer.prototype._calculateText = function _calculateText(sdk, textOptions) {
	    // Calculate max width
	    var maxWidth = this._text.getMaxWidth();
	
	    // Apply text options
	    this._applyTextOptions(textOptions);
	
	    // Calculate bounding box
	    var boundingBox = new _globals.Vector2();
	    var lines = this._text.getText().split('\n');
	    if (typeof maxWidth !== 'undefined') {
	      // Calculate the bounding box
	      boundingBox.x = maxWidth;
	      lines = this._buildOutputLines(maxWidth);
	    } else {
	      for (var lineNum = 0; lineNum < lines.length; lineNum++) {
	        var line = lines[lineNum];
	        boundingBox.x = Math.max(boundingBox.x, this._context.measureText(line).width);
	      }
	    }
	
	    // Calculate boundingbox height
	    boundingBox.y = textOptions.lineHeight * lines.length;
	
	    return { boundingBox: boundingBox, lines: lines };
	  };
	
	  /**
	   * Returns this renderer's texture
	   * @return {Engine.Texture}
	   */
	
	
	  TextRenderer.prototype.getTexture = function getTexture() {
	    return this._texture;
	  };
	
	  /**
	   * Returns the bounding box for this text
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Boolean} considerZoom = false
	   * @return {Vector2}
	   */
	
	
	  TextRenderer.prototype.getBoundingBox = function getBoundingBox(sdk) {
	    var considerZoom = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    var textOptions = this.calculateFontStyles(sdk);
	
	    var _calculateText3 = this._calculateText(sdk, textOptions);
	
	    var boundingBox = _calculateText3.boundingBox;
	
	    if (considerZoom) {
	      boundingBox.multiply(sdk.getZoom());
	    }
	    return boundingBox;
	  };
	
	  return TextRenderer;
	}();
	
	exports.default = TextRenderer;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var TextSplitter = function () {
	  function TextSplitter(context) {
	    (0, _classCallCheck3.default)(this, TextSplitter);
	
	    this._context = context;
	    this._lastFontStyle = {};
	    this._characterWidthCache = {};
	  }
	
	  /**
	   * Returns the lines that fit the maxWidth
	   * @return {Array.<String>}
	   */
	
	
	  TextSplitter.prototype.getLines = function getLines() {
	    if (this._fontStyleChanged()) {
	      this._characterWidthCache = {};
	    }
	
	    var lines = [];
	    var newLineWords = [];
	
	    // Iterate over lines
	    var linesCount = this._lines.length;
	    for (var l = 0; l < linesCount; l++) {
	      var line = this._lines[l];
	
	      // Iterate over words
	      var words = this._buildWords(line);
	      var wordsCount = words.length;
	      for (var w = 0; w < wordsCount; w++) {
	        var word = words[w];
	
	        // Check if line is too wide for the maxwidth
	        var currentLine = newLineWords.concat(word).join('').replace(/\s+$/i, '');
	        var width = this._getWidth(currentLine);
	        if (width > this._maxWidth) {
	          // If there have been words before this one, start
	          // a new line
	          if (newLineWords.length > 0) {
	            // Line too long -> line ended
	            lines.push(newLineWords.join(''));
	
	            // Start a new line with the word
	            newLineWords = [word];
	          }
	
	          // If the next word is too long (without trailing spaces), split it up
	          var _word = word.replace(/\s+$/i, '');
	          if (this._getWidth(_word) > this._maxWidth) {
	            var splitWord = this._splitWord(word);
	            lines = lines.concat(splitWord.lines);
	            if (splitWord.rest) {
	              newLineWords = [splitWord.rest];
	            }
	          }
	        } else {
	          newLineWords.push(word);
	        }
	      }
	
	      lines.push(newLineWords.join(''));
	      newLineWords = [];
	    }
	
	    return lines;
	  };
	
	  /**
	   * Builds an array of words from the given line
	   * @param  {String} line
	   * @return {Array.<String>}
	   * @private
	   */
	
	
	  TextSplitter.prototype._buildWords = function _buildWords(line) {
	    var words = [];
	    var word = '';
	
	    var len = line.length;
	    for (var i = 0; i < len; i++) {
	      var char = line[i];
	      word += char;
	      if (char === ' ' || char === '-' || i === len - 1) {
	        words.push(word);
	        word = '';
	      }
	    }
	
	    return words;
	  };
	
	  /**
	   * Splits up the given word to fit the max width
	   * @param  {String} word
	   * @return {Object}
	   * @private
	   */
	
	
	  TextSplitter.prototype._splitWord = function _splitWord(word) {
	    var response = {
	      lines: [],
	      rest: null
	    };
	
	    var wordLength = word.length;
	    var chars = [];
	    for (var c = 0; c < wordLength; c++) {
	      var char = word[c];
	      if (this._getWidth(chars.concat(char).join('')) > this._maxWidth) {
	        if (chars.length > 0) {
	          response.lines.push(chars.join(''));
	        }
	        chars = [char];
	      } else {
	        chars.push(char);
	      }
	
	      if (c === wordLength - 1 && chars.length > 0) {
	        response.rest = chars.join('');
	      }
	    }
	
	    return response;
	  };
	
	  /**
	   * Checks if the font style changed from the last call
	   * @return {Boolean}
	   * @private
	   */
	
	
	  TextSplitter.prototype._fontStyleChanged = function _fontStyleChanged() {
	    if (this._context.font !== this._lastFontStyle) {
	      this._lastFontStyle = this._context.font;
	      return true;
	    }
	    return false;
	  };
	
	  /**
	   * Returns the measured width for the given string
	   * @param  {String} string
	   * @return {Number}
	   * @private
	   */
	
	
	  TextSplitter.prototype._getWidth = function _getWidth(string) {
	    var width = 0;
	    var stringLength = string.length;
	    for (var c = 0; c < stringLength; c++) {
	      var char = string[c];
	      if (!this._characterWidthCache[char]) {
	        var charWidth = this._context.measureText(char).width;
	        this._characterWidthCache[char] = charWidth;
	      }
	      width += this._characterWidthCache[char];
	    }
	    return width;
	  };
	
	  /**
	   * Sets the text
	   * @param {String} text
	   */
	
	
	  TextSplitter.prototype.setText = function setText(text) {
	    this._text = text;
	    this._lines = text.split('\n');
	  };
	
	  /**
	   * Sets the max width
	   * @param {Number} maxWidth
	   */
	
	
	  TextSplitter.prototype.setMaxWidth = function setMaxWidth(maxWidth) {
	    this._maxWidth = maxWidth;
	  };
	
	  return TextSplitter;
	}();
	
	exports.default = TextSplitter;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(5);
	
	var _operation = __webpack_require__(9);
	
	var _operation2 = _interopRequireDefault(_operation);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * An operation that can draw a watermark on top of the image
	 * @class
	 * @extends PhotoEditorSDK.Operation
	 * @memberof PhotoEditorSDK.Operations
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var WatermarkOperation = function (_Operation) {
	  (0, _inherits3.default)(WatermarkOperation, _Operation);
	
	  /**
	   * Creates a new WatermarkOperation
	   * @param  {PhotoEditorSDK} sdk
	   * @param  {Object} [options]
	   */
	
	  function WatermarkOperation() {
	    (0, _classCallCheck3.default)(this, WatermarkOperation);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _Operation.call.apply(_Operation, [this].concat(args)));
	
	    _this._watermarkSprite = new _globals.Engine.Sprite();
	    _this._watermarkSprite.setAnchor(0.5, 0.5);
	    _this._container.addChild(_this._watermarkSprite);
	    return _this;
	  }
	
	  /**
	   * Renders the watermark
	   * @param  {PhotoEditorSDK} sdk
	   * @private
	   * @override
	   */
	
	
	  WatermarkOperation.prototype._render = function _render(sdk) {
	    if (!this._watermarkTexture) {
	      this._watermarkTexture = _globals.Engine.Texture.fromImage(this._options.image);
	      this._watermarkSprite.setTexture(this._watermarkTexture);
	    }
	
	    var outputSprite = sdk.getSprite();
	    var spriteBounds = outputSprite.getBounds();
	    var spriteDimensions = new _globals.Vector2(spriteBounds.width, spriteBounds.height);
	    var renderTexture = this._getRenderTexture(sdk);
	    renderTexture.resizeTo(spriteDimensions);
	    this._sprite.setTexture(outputSprite.getTexture());
	
	    var _options$image = this._options.image;
	    var width = _options$image.width;
	    var height = _options$image.height;
	
	    var dimensions = _globals.Utils.resizeVectorToFit(new _globals.Vector2(width, height), spriteDimensions);
	    this._watermarkSprite.setPosition(spriteDimensions.x / 2, spriteDimensions.y / 2);
	    this._watermarkSprite.setWidth(dimensions.x);
	    this._watermarkSprite.setHeight(dimensions.y);
	
	    renderTexture.render(this._container);
	
	    outputSprite.setTexture(renderTexture);
	    return _globals.Promise.resolve();
	  };
	
	  return WatermarkOperation;
	}(_operation2.default);
	
	/**
	 * A unique string that identifies this operation. Can be used to select
	 * operations.
	 * @type {String}
	 * @default
	 */
	
	
	WatermarkOperation.identifier = 'watermark';
	
	/**
	 * Specifies the available options for this operation
	 * @type {Object}
	 * @ignore
	 */
	WatermarkOperation.prototype.availableOptions = {
	  image: { type: 'object', required: true }
	};
	
	exports.default = WatermarkOperation;

/***/ },
/* 167 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*!
	 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
	 * requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
	 * MIT license
	 */
	var root = typeof window === 'undefined' ? global : window;
	var rAF = root.requestAnimationFrame;
	var cAF = root.cancelAnimationFrame;
	
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	for (var x = 0; x < vendors.length && !rAF; ++x) {
	  exports.requestAnimationFrame = rAF = root[vendors[x] + 'RequestAnimationFrame'];
	  exports.cancelAnimationFrame = cAF = root[vendors[x] + 'CancelAnimationFrame'] || root[vendors[x] + 'CancelRequestAnimationFrame'];
	}
	
	if (!rAF) {
	  exports.requestAnimationFrame = rAF = function rAF(callback, element) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	    var id = setTimeout(function () {
	      callback(currTime + timeToCall);
	    }, timeToCall);
	    lastTime = currTime + timeToCall;
	    return id;
	  };
	}
	
	if (!cAF) {
	  exports.cancelAnimationFrame = cAF = function cAF(id) {
	    clearTimeout(id);
	  };
	}
	
	exports.requestAnimationFrame = rAF;
	exports.cancelAnimationFrame = cAF;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(173), __esModule: true };

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(175), __esModule: true };

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(176), __esModule: true };

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(177), __esModule: true };

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(81);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(198);
	var $Object = __webpack_require__(18).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(199);
	var $Object = __webpack_require__(18).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(200);
	module.exports = __webpack_require__(18).Object.setPrototypeOf;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(203);
	__webpack_require__(201);
	__webpack_require__(204);
	__webpack_require__(205);
	module.exports = __webpack_require__(18).Symbol;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(202);
	__webpack_require__(206);
	module.exports = __webpack_require__(60).f('iterator');

/***/ },
/* 178 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 179 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(16)
	  , toLength  = __webpack_require__(195)
	  , toIndex   = __webpack_require__(194);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(34)
	  , gOPS    = __webpack_require__(90)
	  , pIE     = __webpack_require__(53);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(11).document && document.documentElement;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(83);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(83);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(52)
	  , descriptor     = __webpack_require__(35)
	  , setToStringTag = __webpack_require__(54)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(19)(IteratorPrototype, __webpack_require__(20)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 186 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(34)
	  , toIObject = __webpack_require__(16);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(36)('meta')
	  , isObject = __webpack_require__(27)
	  , has      = __webpack_require__(14)
	  , setDesc  = __webpack_require__(15).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(33)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(15)
	  , anObject = __webpack_require__(25)
	  , getKeys  = __webpack_require__(34);
	
	module.exports = __webpack_require__(13) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(16)
	  , gOPN      = __webpack_require__(89).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(14)
	  , toObject    = __webpack_require__(196)
	  , IE_PROTO    = __webpack_require__(55)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(27)
	  , anObject = __webpack_require__(25);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(84)(Function.call, __webpack_require__(88).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(57)
	  , defined   = __webpack_require__(48);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(57)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(57)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(48);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(179)
	  , step             = __webpack_require__(186)
	  , Iterators        = __webpack_require__(50)
	  , toIObject        = __webpack_require__(16);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(87)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(26)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(52)});

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(26);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(13), 'Object', {defineProperty: __webpack_require__(15).f});

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(26);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(192).set});

/***/ },
/* 201 */
/***/ function(module, exports) {



/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(193)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(87)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(11)
	  , has            = __webpack_require__(14)
	  , DESCRIPTORS    = __webpack_require__(13)
	  , $export        = __webpack_require__(26)
	  , redefine       = __webpack_require__(92)
	  , META           = __webpack_require__(188).KEY
	  , $fails         = __webpack_require__(33)
	  , shared         = __webpack_require__(56)
	  , setToStringTag = __webpack_require__(54)
	  , uid            = __webpack_require__(36)
	  , wks            = __webpack_require__(20)
	  , wksExt         = __webpack_require__(60)
	  , wksDefine      = __webpack_require__(59)
	  , keyOf          = __webpack_require__(187)
	  , enumKeys       = __webpack_require__(181)
	  , isArray        = __webpack_require__(184)
	  , anObject       = __webpack_require__(25)
	  , toIObject      = __webpack_require__(16)
	  , toPrimitive    = __webpack_require__(58)
	  , createDesc     = __webpack_require__(35)
	  , _create        = __webpack_require__(52)
	  , gOPNExt        = __webpack_require__(190)
	  , $GOPD          = __webpack_require__(88)
	  , $DP            = __webpack_require__(15)
	  , $keys          = __webpack_require__(34)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
	      configurable: true,
	      set: function(value){
	        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	        setSymbolDesc(this, tag, createDesc(1, value));
	      }
	    });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(89).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(53).f  = $propertyIsEnumerable;
	  __webpack_require__(90).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(51)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(19)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(59)('asyncIterator');

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(59)('observable');

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(197);
	var global        = __webpack_require__(11)
	  , hide          = __webpack_require__(19)
	  , Iterators     = __webpack_require__(50)
	  , TO_STRING_TAG = __webpack_require__(20)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 207 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nuniform sampler2D u_image;\nvarying vec2 v_texCoord;\nvarying vec4 v_color;\n\nvoid main() {\n  gl_FragColor = texture2D(u_image, v_texCoord) * v_color;\n}\n"

/***/ },
/* 208 */
/***/ function(module, exports) {

	module.exports = "attribute vec2 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec2 v_texCoord;\nvarying vec4 v_color;\nuniform mat3 u_projMatrix;\n\nvoid main() {\n  gl_Position = vec4((u_projMatrix * vec3(a_position, 1)).xy, 0, 1);\n  v_texCoord = a_texCoord;\n  v_color = vec4(a_color.rgb * a_color.a, a_color.a);\n}\n"

/***/ },
/* 209 */
/***/ function(module, exports) {

	module.exports = "/*!\n * Based on evanw's glfx.js tilt shift shader:\n * https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n */\n\nprecision mediump float;\nuniform sampler2D u_image;\nuniform float u_blurRadius;\nuniform float u_gradientSize;\nuniform float u_size;\nuniform vec2 u_start;\nuniform vec2 u_end;\nuniform vec2 u_delta;\nuniform vec2 u_texSize;\nvarying vec2 v_texCoord;\n\nfloat random(vec3 scale, float seed) {\n  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n\nvoid main() {\n    vec4 color = vec4(0.0);\n    float total = 0.0;\n\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n    vec2 normal = normalize(vec2(u_start.y - u_end.y, u_end.x - u_start.x));\n    float radius = smoothstep(0.0, 1.0,\n      (abs(\n        dot(v_texCoord * u_texSize - u_start, normal)\n      ) - u_size) / u_gradientSize\n    ) * u_blurRadius;\n\n    for (float t = -30.0; t <= 30.0; t++) {\n        float percent = (t + offset - 0.5) / 30.0;\n        float weight = 1.0 - abs(percent);\n        vec4 sample = texture2D(u_image, v_texCoord + u_delta * percent * radius / u_texSize);\n\n        sample.rgb *= sample.a;\n\n        color += sample * weight;\n        total += weight;\n    }\n\n    gl_FragColor = color / total;\n    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n}\n"

/***/ },
/* 210 */
/***/ function(module, exports) {

	module.exports = "/*!\n * Based on evanw's glfx.js tilt shift shader:\n * https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\n */\n\nprecision mediump float;\nuniform sampler2D u_image;\nuniform float u_radius;\nuniform float u_blurRadius;\nuniform float u_gradientRadius;\nuniform vec2 u_position;\nuniform vec2 u_delta;\nuniform vec2 u_texSize;\nvarying vec2 v_texCoord;\n\nfloat random(vec3 scale, float seed) {\n  return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n}\n\nvoid main() {\n    vec4 color = vec4(0.0);\n    float total = 0.0;\n\n    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n    float radius = smoothstep(\n      0.0, 1.0,\n      (abs(\n        distance(v_texCoord * u_texSize, u_position)\n      ) - u_radius) / (u_gradientRadius * 2.0)\n    ) * u_blurRadius;\n    for (float t = -30.0; t <= 30.0; t++) {\n        float percent = (t + offset - 0.5) / 30.0;\n        float weight = 1.0 - abs(percent);\n        vec4 sample = texture2D(u_image, v_texCoord + u_delta * percent * radius / u_texSize);\n\n        sample.rgb *= sample.a;\n\n        color += sample * weight;\n        total += weight;\n    }\n\n    gl_FragColor = color / total;\n    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n}\n"

/***/ },
/* 211 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform float u_brightness;\nuniform float u_saturation;\nuniform float u_contrast;\nconst vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n\n  vec4 color = texColor;\n\n  // Apply brightness\n  color.rgb = (color.rgb + u_brightness);\n\n  // Apply saturation\n  float luminance = dot(color.rgb, luminanceWeighting);\n  vec3 greyScaleColor = vec3(luminance);\n  color.rgb = mix(greyScaleColor, color.rgb, u_saturation);\n\n  // Apply contrast\n  color.rgb = (color.rgb - 0.5) * u_contrast + 0.5;\n\n  // Apply alpha\n  color = vec4(color.rgb * texColor.a, texColor.a);\n\n  gl_FragColor = color;\n}\n"

/***/ },
/* 212 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform sampler2D u_filteredImage;\nuniform float u_intensity;\n\nvoid main() {\n  vec4 color0 = texture2D(u_image, v_texCoord);\n  vec4 color1 = texture2D(u_filteredImage, v_texCoord);\n  gl_FragColor = mix(color0, color1, u_intensity);\n}\n"

/***/ },
/* 213 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform sampler2D u_frameImage;\nuniform vec4 u_color;\nuniform float u_thickness;\nuniform vec2 u_textureSize;\n\nvoid main() {\n  vec4 fragColor = texture2D(u_image, v_texCoord);\n  float scaledThicknessX = u_thickness / u_textureSize.x;\n  float scaledThicknessY = u_thickness / u_textureSize.y;\n  if (v_texCoord.x < scaledThicknessX ||\n    v_texCoord.x > 1.0 - scaledThicknessX ||\n    v_texCoord.y < scaledThicknessY || v_texCoord.y > 1.0 - scaledThicknessY) {\n      fragColor = mix(fragColor, u_color, u_color.a);\n    }\n\n  gl_FragColor = fragColor;\n}\n"

/***/ },
/* 214 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform float u_brightness;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  gl_FragColor = vec4((texColor.rgb + vec3(u_brightness) * texColor.a), texColor.a);;\n}\n"

/***/ },
/* 215 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform float u_contrast;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  gl_FragColor = vec4(((texColor.rgb - vec3(0.5)) * u_contrast + vec3(0.5) * texColor.a), texColor.a);\n}\n"

/***/ },
/* 216 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform float u_desaturation;\n\nconst vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  vec3 grayXfer = vec3(0.3, 0.59, 0.11);\n  vec3 gray = vec3(dot(grayXfer, texColor.xyz));\n  gl_FragColor = vec4(mix(texColor.xyz, gray, u_desaturation) * texColor.a, texColor.a);\n}\n"

/***/ },
/* 217 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\n\nuniform vec3 u_color;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n\n  vec2 textureCoord = v_texCoord - vec2(0.5, 0.5);\n  textureCoord /= 0.75;\n\n  float d = 1.0 - dot(textureCoord, textureCoord);\n  d = clamp(d, 0.2, 1.0);\n  vec3 newColor = texColor.rgb * d * u_color.rgb;\n  gl_FragColor = vec4(vec3(newColor) * texColor.a, texColor.a);\n}\n"

/***/ },
/* 218 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  texColor.b = texColor.g * 0.33;\n  texColor.r = texColor.r * 0.6;\n  texColor.b += texColor.r * 0.33;\n  texColor.g = texColor.g * 0.7;\n  gl_FragColor = texColor;\n}\n"

/***/ },
/* 219 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nvec3 W = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  float luminance = dot(texColor.rgb, W);\n  gl_FragColor = vec4(vec3(luminance) * texColor.a, texColor.a);\n}\n"

/***/ },
/* 220 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform sampler2D u_lookupTable;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  float r = texture2D(u_lookupTable, vec2(texColor.r, 0.0)).r;\n  float g = texture2D(u_lookupTable, vec2(texColor.g, 0.0)).g;\n  float b = texture2D(u_lookupTable, vec2(texColor.b, 0.0)).b;\n\n  gl_FragColor = vec4(vec3(r, g, b) * texColor.a, texColor.a);\n}\n"

/***/ },
/* 221 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform float u_saturation;\n\nconst vec3 luminanceWeighting = vec3(0.2125, 0.7154, 0.0721);\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  float luminance = dot(texColor.rgb, luminanceWeighting);\n\n  vec3 greyScaleColor = vec3(luminance);\n\n  gl_FragColor = vec4(mix(greyScaleColor, texColor.rgb, u_saturation) * texColor.a, texColor.a);\n}\n"

/***/ },
/* 222 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\nuniform vec3 u_color;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  vec4 overlayVec4 = vec4(u_color, texColor.a);\n  gl_FragColor = max(overlayVec4 * texColor.a, texColor);\n}\n"

/***/ },
/* 223 */
/***/ function(module, exports) {

	module.exports = "precision mediump float;\nvarying vec2 v_texCoord;\nuniform sampler2D u_image;\n\nvoid main() {\n  vec4 texColor = texture2D(u_image, v_texCoord);\n  float gray = texColor.r * 0.3 + texColor.g * 0.3 + texColor.b * 0.3;\n  gray -= 0.2;\n  gray = clamp(gray, 0.0, 1.0);\n  gray += 0.15;\n  gray *= 1.4;\n  gl_FragColor = vec4(vec3(gray) * texColor.a, texColor.a);\n}\n"

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,