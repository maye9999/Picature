(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("./PhotoEditorSDK"));
	else if(typeof define === 'function' && define.amd)
		define([["./PhotoEditorSDK"]], factory);
	else if(typeof exports === 'object')
		exports["PhotoEditorReactUI"] = factory(require("./PhotoEditorSDK"));
	else
		root["PhotoEditorReactUI"] = factory(root["PhotoEditorSDK"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_64__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 231);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(236);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(235);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(52);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(52);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.now = exports.Log = exports.cancelAnimationFrame = exports.requestAnimationFrame = exports.SDK = exports.EXIF = exports.ReactDOM = exports.RenderType = exports.Base64 = exports.Color = exports.SharedState = exports.Constants = exports.EventEmitter = exports.SDKUtils = exports.Vector2 = exports.ReactBEM = exports.BaseComponent = exports.Classnames = exports.BEM = exports.React = exports.Utils = exports.Promise = exports.PhotoEditorSDK = undefined;
	
	var _photoeditorsdk = __webpack_require__(64);
	
	var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);
	
	var _react = __webpack_require__(103);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(300);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _classnames = __webpack_require__(126);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _bem = __webpack_require__(111);
	
	var _bem2 = _interopRequireDefault(_bem);
	
	var _reactBem = __webpack_require__(112);
	
	var _reactBem2 = _interopRequireDefault(_reactBem);
	
	var _baseComponent = __webpack_require__(165);
	
	var _baseComponent2 = _interopRequireDefault(_baseComponent);
	
	var _utils = __webpack_require__(230);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _constants = __webpack_require__(222);
	
	var _constants2 = _interopRequireDefault(_constants);
	
	var _sharedState = __webpack_require__(229);
	
	var _sharedState2 = _interopRequireDefault(_sharedState);
	
	var _animationFrame = __webpack_require__(232);
	
	var _log = __webpack_require__(113);
	
	var _log2 = _interopRequireDefault(_log);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Promise = _photoeditorsdk2.default.Promise;
	var Color = _photoeditorsdk2.default.Color;
	var Vector2 = _photoeditorsdk2.default.Math.Vector2;
	var SDKUtils = _photoeditorsdk2.default.Utils;
	var EventEmitter = _photoeditorsdk2.default.EventEmitter;
	var Base64 = _photoeditorsdk2.default.Base64;
	var RenderType = _photoeditorsdk2.default.RenderType;
	var EXIF = _photoeditorsdk2.default.EXIF;
	var SDK = _photoeditorsdk2.default;
	
	var now = typeof window !== 'undefined' && window.performance ? window.performance.now.bind(window.performance) : __webpack_require__(295);
	
	exports.PhotoEditorSDK = _photoeditorsdk2.default;
	exports.Promise = Promise;
	exports.Utils = _utils2.default;
	exports.React = _react2.default;
	exports.BEM = _bem2.default;
	exports.Classnames = _classnames2.default;
	exports.BaseComponent = _baseComponent2.default;
	exports.ReactBEM = _reactBem2.default;
	exports.Vector2 = Vector2;
	exports.SDKUtils = SDKUtils;
	exports.EventEmitter = EventEmitter;
	exports.Constants = _constants2.default;
	exports.SharedState = _sharedState2.default;
	exports.Color = Color;
	exports.Base64 = Base64;
	exports.RenderType = RenderType;
	exports.ReactDOM = _reactDom2.default;
	exports.EXIF = EXIF;
	exports.SDK = SDK;
	exports.requestAnimationFrame = _animationFrame.requestAnimationFrame;
	exports.cancelAnimationFrame = _animationFrame.cancelAnimationFrame;
	exports.Log = _log2.default;
	exports.now = now;

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	'use strict';
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	}
	
	module.exports = assign;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(18);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function (condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(31);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactDOMFeatureFlags = __webpack_require__(140);
	var ReactElement = __webpack_require__(11);
	var ReactEmptyComponentRegistry = __webpack_require__(147);
	var ReactInstanceHandles = __webpack_require__(38);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactMarkupChecksum = __webpack_require__(150);
	var ReactPerf = __webpack_require__(13);
	var ReactReconciler = __webpack_require__(32);
	var ReactUpdateQueue = __webpack_require__(90);
	var ReactUpdates = __webpack_require__(15);
	
	var assign = __webpack_require__(6);
	var emptyObject = __webpack_require__(45);
	var containsNode = __webpack_require__(128);
	var instantiateReactComponent = __webpack_require__(97);
	var invariant = __webpack_require__(5);
	var setInnerHTML = __webpack_require__(63);
	var shouldUpdateReactComponent = __webpack_require__(100);
	var validateDOMNesting = __webpack_require__(102);
	var warning = __webpack_require__(7);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}
	
	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	
	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);
	
	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function () {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function (nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
	
	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function (container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }
	
	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function (id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function (id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function (node) {
	    return findFirstReactDOMImpl(node);
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function (ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },
	
	  _mountImageIntoNode: function (markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },
	
	  ownerDocumentContextKey: ownerDocumentContextKey,
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  getNodeFromInstance: getNodeFromInstance,
	
	  isValid: isValid,
	
	  purgeID: purgeID
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _backButtonComponent = __webpack_require__(164);
	
	var _backButtonComponent2 = _interopRequireDefault(_backButtonComponent);
	
	var _doneButtonComponent = __webpack_require__(210);
	
	var _doneButtonComponent2 = _interopRequireDefault(_doneButtonComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ControlsComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ControlsComponent, _BaseComponent);
	
	  function ControlsComponent() {
	    (0, _classCallCheck3.default)(this, ControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._hasBackButton = true;
	    _this._hasDoneButton = false;
	    _this._backButtonClicked = false;
	
	    _this._bindAll('_onBackClick', '_onDoneClick');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  ControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    this._backButtonClicked = true;
	    this.props.onSwitchControls('back');
	  };
	
	  /**
	   * Gets called when the user clicks the done button
	   * @param {Event} e
	   * @private
	   */
	
	
	  ControlsComponent.prototype._onDoneClick = function _onDoneClick(e) {
	    this.props.onSwitchControls('back');
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ControlsComponent.prototype.renderControls = function renderControls() {
	    return null;
	  };
	
	  /**
	   * Renders the overlay controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ControlsComponent.prototype.renderOverlayControls = function renderOverlayControls() {
	    return null;
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var backButton = this._hasBackButton ? _globals.ReactBEM.createElement(_backButtonComponent2.default, { onClick: this._onBackClick }) : null;
	
	    var doneButton = this._hasDoneButton ? _globals.ReactBEM.createElement(_doneButtonComponent2.default, { onClick: this._onDoneClick }) : null;
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:controls' },
	      this.renderOverlayControls(),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:table' },
	        backButton,
	        this.renderControls(),
	        doneButton
	      )
	    );
	  };
	
	  return ControlsComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = ControlsComponent;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(22);
	
	var assign = __webpack_require__(6);
	var canDefineProperty = __webpack_require__(61);
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }
	
	  return element;
	};
	
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
	
	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	
	  return newElement;
	};
	
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	/**
	 * The base class for all controls
	 * @class
	 * @memberof PhotoEditorSDK.UI.ReactUI
	 */
	
	var Control = function () {
	  function Control() {
	    (0, _classCallCheck3.default)(this, Control);
	  }
	
	  /**
	   * Returns the initial shared state for this control
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @param  {Object} additionalState = {}
	   * @return {Object}
	   * @override
	   */
	
	  Control.prototype.getInitialSharedState = function getInitialSharedState() {
	    return {};
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @override
	   */
	
	
	  Control.prototype.isAvailable = function isAvailable(editor) {
	    return false;
	  };
	
	  return Control;
	}();
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 */
	
	
	Control.controlsComponent = null;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 */
	Control.canvasControlsComponent = null;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	Control.identifier = null;
	
	/**
	 * This control's icon path
	 * @type {String}
	 */
	Control.iconPath = null;
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 */
	Control.languageKey = null;
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	Control.defaultOptions = {};
	
	exports.default = Control;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function (object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function (objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function () {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function (measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(114);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(84);
	var PooledClass = __webpack_require__(26);
	var ReactPerf = __webpack_require__(13);
	var ReactReconciler = __webpack_require__(32);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}
	
	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DraggableComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(DraggableComponent, _BaseComponent);
	
	  function DraggableComponent() {
	    (0, _classCallCheck3.default)(this, DraggableComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onDragStart', '_onDragMove', '_onDragEnd');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user stars dragging the child
	   * @param {Event} e
	   * @private
	   */
	
	
	  DraggableComponent.prototype._onDragStart = function _onDragStart(e) {
	    if (this.props.disabled) return;
	
	    e.preventDefault();
	    e.stopPropagation();
	
	    this._initialMousePosition = _globals.Utils.getEventPosition(e);
	
	    document.addEventListener('mousemove', this._onDragMove);
	    document.addEventListener('touchmove', this._onDragMove);
	    document.addEventListener('mouseup', this._onDragEnd);
	    document.addEventListener('touchend', this._onDragEnd);
	
	    var element = this.refs.element;
	
	    var boundingRect = element.getBoundingClientRect();
	    var elementOffset = new _globals.Vector2(boundingRect.left, boundingRect.top);
	
	    var relativePosition = this._initialMousePosition.clone().subtract(elementOffset);
	    this.props.onStart && this.props.onStart(relativePosition, e);
	  };
	
	  /**
	   * Gets called while the user drags the child
	   * @param {Event} e
	   * @private
	   */
	
	
	  DraggableComponent.prototype._onDragMove = function _onDragMove(e) {
	    e.preventDefault();
	    e.stopPropagation();
	
	    var mousePosition = _globals.Utils.getEventPosition(e);
	    var mouseDiff = mousePosition.clone().subtract(this._initialMousePosition);
	
	    this.props.onDrag && this.props.onDrag(mouseDiff, e);
	  };
	
	  /**
	   * Gets called when the user stops dragging the child
	   * @param {Event} e
	   * @private
	   */
	
	
	  DraggableComponent.prototype._onDragEnd = function _onDragEnd(e) {
	    e.preventDefault();
	    e.stopPropagation();
	    e.stopImmediatePropagation();
	
	    document.removeEventListener('mousemove', this._onDragMove);
	    document.removeEventListener('touchmove', this._onDragMove);
	    document.removeEventListener('mouseup', this._onDragEnd);
	    document.removeEventListener('touchend', this._onDragEnd);
	
	    this.props.onStop && this.props.onStop(e);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {React.Element}
	   */
	
	
	  DraggableComponent.prototype.render = function render() {
	    if (!this.props.children || this.props.children instanceof Array) {
	      throw new Error('DraggableComponent expects exactly one child.');
	    }
	
	    return _globals.React.cloneElement(this.props.children, {
	      onMouseDown: this._onDragStart,
	      onTouchStart: this._onDragStart,
	      ref: 'element'
	    });
	  };
	
	  return DraggableComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	
	exports.default = DraggableComponent;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(78)('wks')
	  , uid        = __webpack_require__(54)
	  , Symbol     = __webpack_require__(23).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 18 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	"use strict";
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var NATIVE_SCROLLBAR_HEIGHT = 25;
	
	var ScrollbarComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ScrollbarComponent, _BaseComponent);
	
	  function ScrollbarComponent() {
	    (0, _classCallCheck3.default)(this, ScrollbarComponent);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call(this));
	
	    _this._isDragging = false;
	    _this._bindAll('_onButtonDragStart', '_onButtonDrag', '_onButtonDragStop', '_onBarDragStart', '_onBarDrag', '_onBarDragStop', '_onListScroll');
	    _this.state = {
	      buttonWidth: 0,
	      buttonLeft: 0,
	      buttonVisible: false
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after the component has been mounted
	   */
	
	
	  ScrollbarComponent.prototype.componentDidMount = function componentDidMount() {
	    this.update();
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user scrolls the list
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onListScroll = function _onListScroll() {
	    if (this._isDragging) return;
	    var listScrollWidth = this._list.scrollWidth - this._list.offsetWidth;
	    var listScrollPosition = this._list.scrollLeft;
	
	    var backgroundScrollWidth = this._node.offsetWidth - this.state.buttonWidth;
	    var progress = listScrollPosition / listScrollWidth;
	
	    this.setState({
	      buttonLeft: backgroundScrollWidth * progress
	    });
	  };
	
	  /**
	   * Gets called when the user presses a mouse button on the bar
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onButtonDragStart = function _onButtonDragStart(e) {
	    this._isDragging = true;
	    this._initialButtonPosition = this.state.buttonLeft || 0;
	  };
	
	  /**
	   * Gets called while the user drags the button
	   * @param {Vector2} diff
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onButtonDrag = function _onButtonDrag(diff) {
	    var buttonLeft = this._initialButtonPosition + diff.x;
	    this._setButtonLeft(buttonLeft);
	  };
	
	  /**
	   * Gets called when the user releases the button
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onButtonDragStop = function _onButtonDragStop() {
	    this._isDragging = false;
	  };
	
	  /**
	   * Gets called when the user starts dragging the bar
	   * @param  {Event} e
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onBarDragStart = function _onBarDragStart(e) {
	    var mousePosition = _globals.Utils.getEventPosition(e);
	    this._initialPosition = mousePosition.clone();
	    var boundingRect = this._node.getBoundingClientRect();
	    var elementOffset = new _globals.Vector2(boundingRect.left, boundingRect.top);
	
	    var relativePosition = mousePosition.clone().subtract(elementOffset);
	    this._setButtonLeft(relativePosition.x - this.state.buttonWidth / 2);
	
	    document.addEventListener('mousemove', this._onBarDrag);
	    document.addEventListener('touchmove', this._onBarDrag);
	    document.addEventListener('mouseup', this._onBarDragStop);
	    document.addEventListener('touchend', this._onBarDragStop);
	  };
	
	  /**
	   * Gets called while the user drags the bar
	   * @param  {Event} e
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onBarDrag = function _onBarDrag(e) {
	    var mousePosition = _globals.Utils.getEventPosition(e);
	
	    var boundingRect = this._node.getBoundingClientRect();
	    var elementOffset = new _globals.Vector2(boundingRect.left, boundingRect.top);
	
	    var relativePosition = mousePosition.clone().subtract(elementOffset);
	    this._setButtonLeft(relativePosition.x - this.state.buttonWidth / 2);
	  };
	
	  /**
	   * Gets called when the user releases the bar
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._onBarDragStop = function _onBarDragStop() {
	    document.removeEventListener('mousemove', this._onBarDrag);
	    document.removeEventListener('touchmove', this._onBarDrag);
	    document.removeEventListener('mouseup', this._onBarDragStop);
	    document.removeEventListener('touchend', this._onBarDragStop);
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Sets the button position to the given value
	   * @param {Number} buttonLeft
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._setButtonLeft = function _setButtonLeft(buttonLeft) {
	    var scrollableButtonWidth = this._node.offsetWidth - this.state.buttonWidth;
	    var scrollableListWidth = this._list.scrollWidth - this._list.offsetWidth;
	
	    // Clamp button position
	    buttonLeft = Math.max(0, buttonLeft);
	    buttonLeft = Math.min(buttonLeft, scrollableButtonWidth);
	
	    // Set button position
	    this.setState({ buttonLeft: buttonLeft });
	
	    // Update list scroll position
	    var progress = buttonLeft / scrollableButtonWidth;
	    var scrollPosition = scrollableListWidth * progress;
	    this._list.scrollLeft = scrollPosition;
	  };
	
	  /**
	   * Updates the button position and size
	   * @param {Function} cb
	   * @private
	   */
	
	
	  ScrollbarComponent.prototype._updateButtonWidth = function _updateButtonWidth(cb) {
	    var buttonWidth = 0;
	    var buttonVisible = false;
	
	    var parentWidth = this._list.offsetWidth;
	    var parentScrollWidth = this._list.scrollWidth;
	    buttonWidth = parentWidth / parentScrollWidth * parentWidth;
	    buttonVisible = parentScrollWidth > parentWidth;
	
	    this.setState({ buttonWidth: buttonWidth, buttonVisible: buttonVisible }, cb);
	  };
	
	  // -------------------------------------------------------------------------- PUBLIC API
	
	  /**
	   * Updates the dimensions and stuff
	   */
	
	
	  ScrollbarComponent.prototype.update = function update() {
	    var _this2 = this;
	
	    var _refs = this.refs;
	    var root = _refs.root;
	    var list = _refs.list;
	
	    this._node = root;
	    this._list = list;
	    this._list.style.height = 'auto';
	    this._listDefaultHeight = this._list.clientHeight;
	
	    this._updateButtonWidth(function () {
	      var parentNodeHeight = _this2._listDefaultHeight;
	      if (_this2.state.buttonVisible) {
	        parentNodeHeight += NATIVE_SCROLLBAR_HEIGHT;
	      }
	      _this2._list.style.height = parentNodeHeight + 'px';
	    });
	
	    this._list.addEventListener('scroll', this._onListScroll);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ScrollbarComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var buttonStyle = {
	      left: this.state.buttonLeft,
	      width: this.state.buttonWidth
	    };
	    var scrollbarStyle = {
	      display: this.state.buttonVisible ? 'block' : 'none'
	    };
	
	    var child = _globals.React.cloneElement(this.props.children, {
	      ref: 'list'
	    });
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      null,
	      child,
	      _globals.ReactBEM.createElement(
	        'div',
	        {
	          bem: '$b:scrollbar',
	          ref: 'root',
	          style: scrollbarStyle,
	          onMouseDown: this._onBarDragStart,
	          onTouchStart: this._onBarDragStart },
	        _globals.ReactBEM.createElement(
	          _draggableComponent2.default,
	          {
	            onStart: this._onButtonDragStart,
	            onDrag: this._onButtonDrag },
	          _globals.ReactBEM.createElement('div', {
	            bem: 'e:bar',
	            style: buttonStyle,
	            onMouseDown: this._onButtonDown })
	        )
	      )
	    );
	  };
	
	  return ScrollbarComponent;
	}(_globals.BaseComponent);
	
	exports.default = ScrollbarComponent;

/***/ },
/* 20 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.3.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(55);
	
	var PropagationPhases = keyMirror({ bubbled: null, captured: null });
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;

/***/ },
/* 22 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 23 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(36)
	  , IE8_DOM_DEFINE = __webpack_require__(117)
	  , toPrimitive    = __webpack_require__(81)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(27) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";
	
	var keyOf = function (oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function (a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(40)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(23)
	  , core      = __webpack_require__(20)
	  , ctx       = __webpack_require__(70)
	  , hide      = __webpack_require__(37)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 29 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(118)
	  , defined = __webpack_require__(71);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	
	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function (nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(333);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(26);
	
	var assign = __webpack_require__(6);
	var emptyFunction = __webpack_require__(18);
	var warning = __webpack_require__(7);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass2 = __webpack_require__(115);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Modal = function (_EventEmitter) {
	  (0, _inherits3.default)(Modal, _EventEmitter);
	
	  function Modal(type, title, text) {
	    var overlay = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
	    (0, _classCallCheck3.default)(this, Modal);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this.type = type;
	    _this.title = title;
	    _this.text = text;
	    _this.overlay = overlay;
	    return _this;
	  }
	
	  /**
	   * Closes this modal
	   */
	
	
	  Modal.prototype.close = function close() {
	    this.emit('close');
	  };
	
	  return Modal;
	}(_globals.EventEmitter); /*
	                           * This file is part of PhotoEditorSDK.
	                           *
	                           * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                           * All rights reserved.
	                           *
	                           * Redistribution and use in source and binary forms, without
	                           * modification, are permitted provided that the following license agreement
	                           * is approved and a legal/financial contract was signed by the user.
	                           * The license agreement can be found under following link:
	                           *
	                           * https://www.photoeditorsdk.com/LICENSE.txt
	                           */
	
	var ModalManager = function (_EventEmitter2) {
	  (0, _inherits3.default)(ModalManager, _EventEmitter2);
	
	  function ModalManager() {
	    (0, _classCallCheck3.default)(this, ModalManager);
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _EventEmitter2.call(this));
	
	    _this2._modals = [];
	    return _this2;
	  }
	
	  /**
	   * Creates a loading modal
	   * @param  {String} text
	   * @return {Modal}
	   */
	
	
	  ModalManager.prototype.displayLoading = function displayLoading(text) {
	    var modal = new Modal('loading', null, text);
	    this.addModal(modal);
	    return modal;
	  };
	
	  /**
	   * Creats a warning modal
	   * @param  {String} title
	   * @param  {String} text
	   * @return {Modal}
	   */
	
	
	  ModalManager.prototype.displayWarning = function displayWarning(title, text) {
	    var modal = new Modal('warning', title, text);
	    this.addModal(modal);
	    return modal;
	  };
	
	  /**
	   * Creates an error modal
	   * @param  {String} title
	   * @param  {String} text
	   * @param  {Boolean} overlay = false
	   * @return {Modal}
	   */
	
	
	  ModalManager.prototype.displayError = function displayError(title, text) {
	    var overlay = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	
	    var modal = new Modal('error', title, text, overlay);
	    this.addModal(modal);
	    return modal;
	  };
	
	  /**
	   * Adds the given modal to the list of modals
	   * @param {Modal} modal
	   */
	
	
	  ModalManager.prototype.addModal = function addModal(modal) {
	    var _this3 = this;
	
	    this._modals.push(modal);
	    modal.on('close', function () {
	      _this3.removeModal(modal);
	    });
	    this.emit('update');
	  };
	
	  /**
	   * Removes the given modal from the list of modals
	   * @param  {Modal} modal
	   */
	
	
	  ModalManager.prototype.removeModal = function removeModal(modal) {
	    var index = this._modals.indexOf(modal);
	    this._modals.splice(index, 1);
	    this.emit('update');
	  };
	
	  /**
	   * Returns the modals
	   * @return {Array.<Modal>}
	   */
	
	
	  ModalManager.prototype.getModals = function getModals() {
	    return this._modals;
	  };
	
	  /**
	   * Returns the one and only instance of this class
	   * @return {ModalManager}
	   */
	
	
	  (0, _createClass3.default)(ModalManager, null, [{
	    key: 'instance',
	    get: function get() {
	      if (!this._instance) {
	        this._instance = new ModalManager();
	      }
	      return this._instance;
	    }
	  }]);
	  return ModalManager;
	}(_globals.EventEmitter);
	
	exports.default = ModalManager;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CanvasControlsComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(CanvasControlsComponent, _BaseComponent);
	
	  function CanvasControlsComponent() {
	    (0, _classCallCheck3.default)(this, CanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onCanvasZoomDone');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- HIT TEST
	
	  /**
	   * Checks if any other control reacts to a click at the given position
	   * @param  {Vector2} clickPosition
	   * @private
	   */
	
	
	  CanvasControlsComponent.prototype._performHitTest = function _performHitTest(clickPosition) {
	    var container = this.refs.container;
	
	    var containerRect = container.getBoundingClientRect();
	    var containerPosition = new _globals.Vector2(containerRect.left, containerRect.top);
	
	    var position = clickPosition.subtract(containerPosition);
	
	    var editor = this.context.editor;
	
	    var controls = editor.getAvailableControls();
	
	    // Check if any of the controls responds to a click
	    // at the given position
	    for (var identifier in controls) {
	      var control = controls[identifier];
	      var clickResponse = control.clickAtPosition && control.clickAtPosition(position, editor);
	
	      if (clickResponse) {
	        // Don't re-select an already selected item
	        if (clickResponse.selectedSprite === this.getSharedState('selectedSprite')) {
	          return true;
	        }
	
	        // Responds to click, switch to the controls
	        this.props.onSwitchControls(control, clickResponse);
	        return true;
	      }
	    }
	
	    return false;
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called after the canvas has been zoomed in or out
	   * @private
	   */
	
	
	  CanvasControlsComponent.prototype._onCanvasZoomDone = function _onCanvasZoomDone() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Binds the events in _events
	   * @protected
	   */
	
	
	  CanvasControlsComponent.prototype._bindEvents = function _bindEvents() {
	    _BaseComponent.prototype._bindEvents.call(this);
	    this.context.mediator.on(_globals.Constants.EVENTS.ZOOM_DONE, this._onCanvasZoomDone);
	  };
	
	  /**
	   * Unbinds the events in _events
	   * @protected
	   */
	
	
	  CanvasControlsComponent.prototype._unbindEvents = function _unbindEvents() {
	    _BaseComponent.prototype._unbindEvents.call(this);
	    this.context.mediator.off(_globals.Constants.EVENTS.ZOOM_DONE, this._onCanvasZoomDone);
	  };
	
	  return CanvasControlsComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = CanvasControlsComponent;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(41);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(24)
	  , createDesc = __webpack_require__(44);
	module.exports = __webpack_require__(27) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactRootIndex = __webpack_require__(155);
	
	var invariant = __webpack_require__(5);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function () {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function (rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function (id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function (leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function (targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function (targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(51);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SliderComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(SliderComponent, _BaseComponent);
	
	  function SliderComponent() {
	    (0, _classCallCheck3.default)(this, SliderComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onKnobDragStart', '_onKnobDrag', '_onBarDragStart', '_onBarDrag', '_onMiddleDotDragStart');
	
	    _this.state = {
	      value: _this.props.value || 0,
	      sliderPosition: 0,
	      foregroundLeft: 0,
	      foregroundWidth: 0
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after the component has been mounted
	   */
	
	
	  SliderComponent.prototype.componentDidMount = function componentDidMount() {
	    // Trigger a re-render to position the knob
	    this._setValue(this.state.value, false);
	  };
	
	  /**
	   * Gets called when this component receives new props
	   * @param  {Object} props
	   */
	
	
	  SliderComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (props.value !== this.state.value) {
	      this._setValue(props.value, false);
	    }
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user presses a mouse button on the middle dot
	   * @private
	   */
	
	
	  SliderComponent.prototype._onMiddleDotDragStart = function _onMiddleDotDragStart() {
	    var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) / 2;
	    this._setValue(newValue);
	  };
	
	  /**
	   * Gets called when the user starts dragging the knob
	   * @param  {Vector2} position
	   * @private
	   */
	
	
	  SliderComponent.prototype._onKnobDragStart = function _onKnobDragStart(position) {
	    this._initialSliderPosition = this.state.sliderPosition;
	    this._initialPosition = position;
	  };
	
	  /**
	   * Gets called while the user drags the knob
	   * @param  {Vector2} diff
	   * @private
	   */
	
	
	  SliderComponent.prototype._onKnobDrag = function _onKnobDrag(diff) {
	    var bar = this.refs.bar;
	
	    var barWidth = bar.offsetWidth;
	
	    var newSliderPosition = this._initialSliderPosition + diff.x;
	    newSliderPosition = Math.max(0, Math.min(newSliderPosition, barWidth));
	    var progress = newSliderPosition / barWidth;
	    var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) * progress;
	
	    this._setValue(newValue);
	  };
	
	  /**
	   * Gets called when the user starts dragging the bar
	   * @param  {Vector2} position
	   * @private
	   */
	
	
	  SliderComponent.prototype._onBarDragStart = function _onBarDragStart(position) {
	    this._initialPosition = position.clone();
	
	    var bar = this.refs.bar;
	
	    var barWidth = bar.offsetWidth;
	    var progress = position.x / barWidth;
	    var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) * progress;
	    this._setValue(newValue);
	  };
	
	  /**
	   * Gets called while the user drags the bar
	   * @param  {Vector2} diff
	   * @private
	   */
	
	
	  SliderComponent.prototype._onBarDrag = function _onBarDrag(diff) {
	    var position = this._initialPosition.clone().add(diff);
	
	    var bar = this.refs.bar;
	
	    var barWidth = bar.offsetWidth;
	    var progress = position.x / barWidth;
	    var newValue = this.props.minValue + (this.props.maxValue - this.props.minValue) * progress;
	    newValue = Math.max(this.props.minValue, Math.min(this.props.maxValue, newValue));
	    this._setValue(newValue);
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the style for the knob (position)
	   * @return {Object}
	   * @private
	   */
	
	
	  SliderComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    return { left: this.state.sliderPosition };
	  };
	
	  /**
	   * Returns the style for the foreground bar
	   * @return {Object}
	   * @private
	   */
	
	
	  SliderComponent.prototype._getForegroundStyle = function _getForegroundStyle() {
	    return {
	      left: this.state.foregroundLeft,
	      width: this.state.foregroundWidth
	    };
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Decides whether or not this slider should have a middle dot on the bar
	   * @private
	   */
	
	
	  SliderComponent.prototype._displayMiddleDot = function _displayMiddleDot() {
	    return this.props.middleDot !== false;
	  };
	
	  /**
	   * Sets the value to the given value, updates the slider position
	   * @param {Number} value
	   * @param {Boolean} emitChange = true
	   * @private
	   */
	
	
	  SliderComponent.prototype._setValue = function _setValue(value) {
	    var emitChange = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    value = Math.round(value);
	    var _props = this.props;
	    var minValue = _props.minValue;
	    var maxValue = _props.maxValue;
	
	    var progress = (value - minValue) / (maxValue - minValue);
	
	    // Calculate slider position
	    var bar = this.refs.bar;
	
	    var barWidth = bar.offsetWidth;
	    var sliderPosition = barWidth * progress;
	
	    // Calculate foreground position and width
	    var foregroundWidth = progress * barWidth;
	    var foregroundLeft = 0;
	    if (this._displayMiddleDot()) {
	      foregroundWidth = Math.abs(progress - 0.5) * barWidth;
	      foregroundLeft = progress < 0.5 ? barWidth * 0.5 - foregroundWidth : '50%';
	    }
	
	    this.setState({ value: value, sliderPosition: sliderPosition, foregroundWidth: foregroundWidth, foregroundLeft: foregroundLeft });
	
	    if (emitChange) {
	      this.props.onChange && this.props.onChange(value);
	    }
	  };
	
	  /**
	   * Builds a display value from the given props
	   * @param {Number} value
	   * @return {String}
	   * @private
	   */
	
	
	  SliderComponent.prototype._buildValue = function _buildValue(value) {
	    // Limit decimals to two digits, if present
	    if (value % 1 !== 0) {
	      value = value.toFixed(2);
	    }
	
	    // Add positive value prefix (+) if value is > 0
	    if (this.props.positiveValuePrefix && value >= 0) {
	      value = '' + this.props.positiveValuePrefix + value;
	    }
	
	    // Add unit if present
	    if (this.props.valueUnit) {
	      value += this.props.valueUnit;
	    }
	
	    return value;
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  SliderComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var middleDot = null;
	    if (this._displayMiddleDot()) {
	      middleDot = _globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onMiddleDotDragStart },
	        _globals.ReactBEM.createElement('div', { bem: 'e:middleDot' })
	      );
	    }
	
	    var foregroundProps = {
	      style: this._getForegroundStyle()
	    };
	
	    var componentBem = '$b:slider' + (this.props.style ? ' m:' + this.props.style : '');
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: componentBem },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:bar', ref: 'bar' },
	        _globals.ReactBEM.createElement(
	          _draggableComponent2.default,
	          {
	            onStart: this._onBarDragStart,
	            onDrag: this._onBarDrag },
	          _globals.ReactBEM.createElement(
	            'div',
	            null,
	            _globals.ReactBEM.createElement('div', { bem: '$e:background' }),
	            _globals.ReactBEM.createElement('div', (0, _extends3.default)({ bem: '$e:foreground' }, foregroundProps)),
	            _globals.ReactBEM.createElement(
	              _draggableComponent2.default,
	              {
	                onStart: this._onKnobDragStart,
	                onDrag: this._onKnobDrag },
	              _globals.ReactBEM.createElement('div', { bem: 'e:knob b:knob m:slider', style: this._getKnobStyle() })
	            )
	          )
	        ),
	        middleDot
	      ),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:labels' },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label m:lowerBoundary' },
	          this._buildValue(this.props.minValue)
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label m:value' },
	          this.props.label,
	          ' ',
	          this._buildValue(this.state.value)
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label m:upperBoundary' },
	          this._buildValue(this.props.maxValue)
	        )
	      )
	    );
	  };
	
	  return SliderComponent;
	}(_globals.BaseComponent);
	
	exports.default = SliderComponent;

/***/ },
/* 40 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 42 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(122)
	  , enumBugKeys = __webpack_require__(72);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 44 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var EventPluginRegistry = __webpack_require__(135);
	var EventPluginUtils = __webpack_require__(309);
	var ReactErrorUtils = __webpack_require__(148);
	
	var accumulateInto = __webpack_require__(157);
	var forEachAccumulated = __webpack_require__(158);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function (InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function () {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function (id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;
	
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function (id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }
	
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventPluginHub = __webpack_require__(46);
	
	var warning = __webpack_require__(7);
	
	var accumulateInto = __webpack_require__(157);
	var forEachAccumulated = __webpack_require__(158);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(33);
	
	var getEventTarget = __webpack_require__(95);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ScreenComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ScreenComponent, _BaseComponent);
	
	  function ScreenComponent() {
	    (0, _classCallCheck3.default)(this, ScreenComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  ScreenComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement('div', null);
	  };
	
	  return ScreenComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = ScreenComponent;
	
	
	ScreenComponent.propTypes = {
	  editor: _globals.React.PropTypes.any
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(234);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(238);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(237);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 53 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 54 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function (obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventPluginHub = __webpack_require__(46);
	var EventPluginRegistry = __webpack_require__(135);
	var ReactEventEmitterMixin = __webpack_require__(326);
	var ReactPerf = __webpack_require__(13);
	var ViewportMetrics = __webpack_require__(156);
	
	var assign = __webpack_require__(6);
	var isEventSupported = __webpack_require__(98);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(55);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(49);
	var ViewportMetrics = __webpack_require__(156);
	
	var getEventModifierState = __webpack_require__(94);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 62 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function (node, html) {
	  node.innerHTML = html;
	};
	
	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function (node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 64 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_64__;

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _overlayComponent = __webpack_require__(169);
	
	var _overlayComponent2 = _interopRequireDefault(_overlayComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ColorPickerComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ColorPickerComponent, _BaseComponent);
	
	  function ColorPickerComponent() {
	    (0, _classCallCheck3.default)(this, ColorPickerComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._value = _this.props.initialValue.clone();
	    _this._bindAll('_onButtonClick', '_onValueChange', '_onColorPickerOpen');
	
	    _this._events = (0, _defineProperty3.default)({}, _globals.Constants.EVENTS.COLORPICKER_OPEN, _this._onColorPickerOpen);
	
	    _this.state = {
	      overlayVisible: false
	    };
	
	    _this._transparentPatternCanvas = _globals.Utils.createTransparentPatternCanvas();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  ColorPickerComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	    this._renderColor();
	  };
	
	  /**
	   * Gets called after this component has been updated
	   */
	
	
	  ColorPickerComponent.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._renderColor();
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when a colorpicker has been opened. If it is not the same
	   * color picker as this, this one gets closed. This makes sure that there
	   * is only one color picker open at a time
	   * @param  {ColorPickerComponent} colorPicker
	   * @private
	   */
	
	
	  ColorPickerComponent.prototype._onColorPickerOpen = function _onColorPickerOpen(colorPicker) {
	    if (colorPicker === this) return;
	    this.setState({ overlayVisible: false });
	  };
	
	  /**
	   * Gets called when the color picker button has been clicked
	   * @param  {Event} e
	   * @private
	   */
	
	
	  ColorPickerComponent.prototype._onButtonClick = function _onButtonClick(e) {
	    e.preventDefault();
	    e.stopPropagation();
	
	    if (!this.state.overlayVisible) {
	      this._emitEvent(_globals.Constants.EVENTS.COLORPICKER_OPEN, this);
	    }
	
	    this.setState({ overlayVisible: !this.state.overlayVisible });
	  };
	
	  /**
	   * Gets called when the value changes
	   * @param  {Color} value
	   * @private
	   */
	
	
	  ColorPickerComponent.prototype._onValueChange = function _onValueChange(value) {
	    this._value = value;
	    this._renderColor();
	    this.forceUpdate();
	
	    this.props.onChange && this.props.onChange(value);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the current color on the preview canvas
	   * @private
	   */
	
	
	  ColorPickerComponent.prototype._renderColor = function _renderColor() {
	    var canvas = this.refs.canvas;
	    var context = canvas.getContext('2d');
	
	    canvas.width = canvas.offsetWidth;
	    canvas.height = canvas.offsetHeight;
	
	    var pattern = context.createPattern(this._transparentPatternCanvas, 'repeat');
	    context.fillStyle = pattern;
	    context.fillRect(0, 0, canvas.width, canvas.height);
	
	    context.fillStyle = this._value.toRGBA();
	    context.fillRect(0, 0, canvas.width, canvas.height);
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ColorPickerComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var Overlay = null;
	    if (this.state.overlayVisible) {
	      Overlay = _globals.ReactBEM.createElement(_overlayComponent2.default, {
	        initialValue: this._value,
	        onChange: this._onValueChange });
	    }
	
	    var className = this.state.overlayVisible ? 'is-active' : null;
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:controls' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:colorPicker', className: className, onClick: this._onButtonClick },
	        _globals.ReactBEM.createElement('canvas', { bem: 'e:preview', ref: 'canvas' }),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label' },
	          this.props.label || this._t('generic.color')
	        ),
	        Overlay
	      )
	    );
	  };
	
	  return ColorPickerComponent;
	}(_globals.BaseComponent);
	
	exports.default = ColorPickerComponent;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _sliderComponent = __webpack_require__(39);
	
	var _sliderComponent2 = _interopRequireDefault(_sliderComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SliderOverlayComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(SliderOverlayComponent, _BaseComponent);
	
	  function SliderOverlayComponent() {
	    (0, _classCallCheck3.default)(this, SliderOverlayComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onSliderValueChange');
	
	    _this.state = { value: _this.props.value };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component receives new props
	   * @param  {Object} props
	   */
	
	
	  SliderOverlayComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (props.value !== this.state.value) {
	      this.state.value = props.value;
	    }
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the slider value has changed
	   * @param  {Number} value
	   * @private
	   */
	
	
	  SliderOverlayComponent.prototype._onSliderValueChange = function _onSliderValueChange(value) {
	    this.props.onChange && this.props.onChange(value);
	    this.setState({ value: value });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  SliderOverlayComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var props = _globals.SDKUtils.defaults(this.props, {
	      style: '',
	      middleDot: false,
	      minValue: 1,
	      maxValue: 100,
	      label: 'Label',
	      onChange: this._onSliderValueChange,
	      value: this.state.value
	    });
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:controls e:overlay m:large m:dark' },
	      _globals.ReactBEM.createElement(_sliderComponent2.default, props)
	    );
	  };
	
	  return SliderOverlayComponent;
	}(_globals.BaseComponent);
	
	exports.default = SliderOverlayComponent;

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var HeaderComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(HeaderComponent, _BaseComponent);
	
	  function HeaderComponent() {
	    (0, _classCallCheck3.default)(this, HeaderComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onCloseClick');
	    return _this;
	  }
	
	  /**
	   * Gets called when the user clicks the close button
	   * @private
	   */
	
	
	  HeaderComponent.prototype._onCloseClick = function _onCloseClick() {
	    this.context.mediator.emit(_globals.Constants.EVENTS.CLOSE);
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  HeaderComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var closeButton = void 0;
	    if (this.context.options.showCloseButton) {
	      closeButton = _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:close', onClick: this._onCloseClick },
	        _globals.ReactBEM.createElement('img', { bem: 'e:image', src: this._getAssetPath('close.png', true) })
	      );
	    }
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:header' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:label' },
	        this.context.options.title
	      ),
	      closeButton
	    );
	  };
	
	  return HeaderComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	
	exports.default = HeaderComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SubHeaderButtonComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(SubHeaderButtonComponent, _BaseComponent);
	
	  function SubHeaderButtonComponent() {
	    (0, _classCallCheck3.default)(this, SubHeaderButtonComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  SubHeaderButtonComponent.prototype.renderWithBEM = function renderWithBEM() {
	    // Build BEM specifier
	    var bem = '$e:button';
	    if (this.props.style) {
	      bem += ' m:' + this.props.style;
	    }
	    if (this.props.icon) {
	      bem += ' m:withIcon';
	    }
	
	    // Build icon
	    var icon = null;
	    if (this.props.icon) {
	      icon = _globals.ReactBEM.createElement('img', {
	        bem: 'e:icon',
	        src: this._getAssetPath(this.props.icon, true) });
	    }
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:subHeader' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: bem, onClick: this.props.onClick },
	        icon,
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label' },
	          this.props.label || 'Button'
	        )
	      )
	    );
	  };
	
	  return SubHeaderButtonComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = SubHeaderButtonComponent;

/***/ },
/* 69 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(247);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 71 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 73 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(36)
	  , dPs         = __webpack_require__(263)
	  , enumBugKeys = __webpack_require__(72)
	  , IE_PROTO    = __webpack_require__(77)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(116)('iframe')
	    , i      = enumBugKeys.length
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(253).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 75 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(24).f
	  , has = __webpack_require__(29)
	  , TAG = __webpack_require__(17)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(78)('keys')
	  , uid    = __webpack_require__(54);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(23)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 79 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(71);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(41);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(23)
	  , core           = __webpack_require__(20)
	  , LIBRARY        = __webpack_require__(73)
	  , wksExt         = __webpack_require__(83)
	  , defineProperty = __webpack_require__(24).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(17);

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(26);
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function (callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function () {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function () {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function () {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(31);
	var ReactPerf = __webpack_require__(13);
	
	var quoteAttributeValueForBrowser = __webpack_require__(356);
	var warning = __webpack_require__(7);
	
	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function (name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(154);
	var ReactPropTypeLocations = __webpack_require__(58);
	
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(89);
	var ReactMount = __webpack_require__(9);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function (rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(134);
	var DOMPropertyOperations = __webpack_require__(85);
	var ReactMount = __webpack_require__(9);
	var ReactPerf = __webpack_require__(13);
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function (id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
	
	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function (id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactUpdates = __webpack_require__(15);
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },
	
	  enqueueSetPropsInternal: function (internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },
	
	  enqueueReplacePropsInternal: function (internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  enqueueElementInternal: function (internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
	
	'use strict';
	
	module.exports = '0.14.8';

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactMount = __webpack_require__(9);
	
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 93 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 94 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 96 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCompositeComponent = __webpack_require__(315);
	var ReactEmptyComponent = __webpack_require__(146);
	var ReactNativeComponent = __webpack_require__(152);
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function () {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : invariant(false) : undefined;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }
	
	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = (eventName in document);
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	var escapeTextContentForBrowser = __webpack_require__(62);
	var setInnerHTML = __webpack_require__(63);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 100 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceHandles = __webpack_require__(38);
	
	var getIteratorFn = __webpack_require__(96);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	var didWarnAboutMaps = false;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
	
	'use strict';
	
	var assign = __webpack_require__(6);
	var emptyFunction = __webpack_require__(18);
	var warning = __webpack_require__(7);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    parentTag: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.parentTag = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };
	
	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(312);


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ButtonComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ButtonComponent, _BaseComponent);
	
	  function ButtonComponent() {
	    (0, _classCallCheck3.default)(this, ButtonComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  ButtonComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'button',
	      { bem: 'b:button', className: this.props.className, onClick: this.props.onClick },
	      this.props.children
	    );
	  };
	
	  return ButtonComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = ButtonComponent;
	
	
	ButtonComponent.propTypes = {
	  onClick: _globals.React.PropTypes.func,
	  children: _globals.React.PropTypes.any.isRequired,
	  className: _globals.React.PropTypes.string
	};

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _overlayComponent = __webpack_require__(166);
	
	var _overlayComponent2 = _interopRequireDefault(_overlayComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var CategoryDropdownComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(CategoryDropdownComponent, _BaseComponent);
	
	  function CategoryDropdownComponent() {
	    (0, _classCallCheck3.default)(this, CategoryDropdownComponent);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call(this));
	
	    _this._bindAll('_onButtonClick');
	
	    _this.state = {
	      overlayVisible: false
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the color picker button has been clicked
	   * @param  {Event} e
	   * @private
	   */
	
	
	  CategoryDropdownComponent.prototype._onButtonClick = function _onButtonClick(e) {
	    e.preventDefault();
	    e.stopPropagation();
	
	    this.setState({ overlayVisible: !this.state.overlayVisible });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  CategoryDropdownComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var Overlay = null;
	
	    if (this.state.overlayVisible) {
	      Overlay = _globals.ReactBEM.createElement(_overlayComponent2.default, {
	        items: this.props.items,
	        selectedItem: this.props.selectedItem,
	        onChange: this.props.onChange });
	    }
	
	    var className = this.state.overlayVisible ? 'is-active' : null;
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:controls' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:categoryDropdown', className: className, onClick: this._onButtonClick },
	        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this.props.selectedItem.icon }),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label' },
	          this.props.selectedItem.label
	        ),
	        Overlay
	      )
	    );
	  };
	
	  return CategoryDropdownComponent;
	}(_globals.BaseComponent);
	
	exports.default = CategoryDropdownComponent;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var OverviewControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(OverviewControlsComponent, _ControlsComponent);
	
	  function OverviewControlsComponent() {
	    (0, _classCallCheck3.default)(this, OverviewControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._hasBackButton = false;
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an item has been clicked
	   * @param  {Event} e
	   * @private
	   */
	
	
	  OverviewControlsComponent.prototype._onItemClick = function _onItemClick(controls) {
	    this.props.onSwitchControls(controls);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the list items for this control
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  OverviewControlsComponent.prototype._renderListItems = function _renderListItems() {
	    var _this2 = this;
	
	    var editor = this.context.editor;
	
	
	    var items = [];
	    var makeItem = function makeItem(identifier) {
	      var control = editor.getControl(identifier);
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: control.identifier,
	          onClick: _this2._onItemClick.bind(_this2, control) },
	        _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: '$b:controls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: '$e:button m:withLabel' },
	            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath(control.iconPath, true) }),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:label' },
	              _this2._t(control.languageKey)
	            )
	          )
	        )
	      );
	    };
	
	    var controlsOrder = this.context.options.controlsOrder;
	
	    controlsOrder.forEach(function (groupOrIdentifier) {
	      if (Array.isArray(groupOrIdentifier)) {
	        (function () {
	          var group = groupOrIdentifier;
	
	          var groupItems = [];
	          group.forEach(function (identifier) {
	            if (!editor.isControlEnabled(identifier)) return;
	            groupItems.push(makeItem(identifier));
	          });
	
	          if (groupItems.length) {
	            items.push(groupItems);
	          }
	        })();
	      } else {
	        var identifier = groupOrIdentifier;
	        if (!editor.isControlEnabled(identifier)) return;
	        items.push(makeItem(identifier));
	      }
	    });
	
	    var finalItems = [];
	    items.forEach(function (itemOrGroup) {
	      finalItems = finalItems.concat(itemOrGroup);
	      if (itemOrGroup !== items[items.length - 1]) {
	        finalItems.push(_globals.ReactBEM.createElement('li', { bem: 'e:separator' }));
	      }
	    });
	
	    return finalItems;
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  OverviewControlsComponent.prototype.renderControls = function renderControls() {
	    var listItems = this._renderListItems();
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        null,
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    );
	  };
	
	  return OverviewControlsComponent;
	}(_controlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = OverviewControlsComponent;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ItemComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ItemComponent, _BaseComponent);
	
	  function ItemComponent() {
	    (0, _classCallCheck3.default)(this, ItemComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onRemoveClick', '_onItemDragStart', '_onItemDragStop', '_onItemDrag', '_onSpriteUpdate');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- CALCULATIONS
	
	  /**
	   * Returns the absolute position of the sprite
	   * @return {Vector2}
	   * @private
	   */
	
	
	  ItemComponent.prototype._getAbsoluteSpritePosition = function _getAbsoluteSpritePosition() {
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    return this.props.sprite.getPosition().clone().multiply(zoom);
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  ItemComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	    this.props.sprite.on('update', this._onSpriteUpdate);
	  };
	
	  /**
	   * Gets called when this component is about to be unmounted
	   */
	
	
	  ItemComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	    _BaseComponent.prototype.componentWillUnmount.call(this);
	    this.props.sprite.off('update', this._onSpriteUpdate);
	  };
	
	  /**
	   * Gets called when this component will receive new props
	   * @param  {Object} nextProps
	   */
	
	
	  ItemComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    this.props.sprite.off('update', this._onSpriteUpdate);
	    nextProps.sprite.on('update', this._onSpriteUpdate);
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when this component's sprite has been updated
	   * @private
	   */
	
	
	  ItemComponent.prototype._onSpriteUpdate = function _onSpriteUpdate() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the user starts dragging this item
	   * @private
	   */
	
	
	  ItemComponent.prototype._onItemDragStart = function _onItemDragStart() {
	    var sprite = this.props.sprite;
	
	    this._initialPosition = sprite.getPosition();
	
	    this.props.onDragStart && this.props.onDragStart();
	  };
	
	  /**
	   * Gets called while the user drags this item
	   * @param  {Vector2} offset
	   * @private
	   */
	
	
	  ItemComponent.prototype._onItemDrag = function _onItemDrag(offset) {
	    var sprite = this.props.sprite;
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    var newPosition = this._initialPosition.clone().add(offset.divide(zoom));
	
	    sprite.setPosition(newPosition);
	  };
	
	  /**
	   * Gets called when the user stops dragging this item
	   * @private
	   */
	
	
	  ItemComponent.prototype._onItemDragStop = function _onItemDragStop() {
	    this.props.onDragStop && this.props.onDragStop();
	  };
	
	  /**
	   * Gets called when the user clicks the remove button
	   * @private
	   */
	
	
	  ItemComponent.prototype._onRemoveClick = function _onRemoveClick(e) {
	    e.stopPropagation();
	
	    var _props = this.props;
	    var operation = _props.operation;
	    var sprite = _props.sprite;
	    var onRemove = _props.onRemove;
	
	    operation.removeSprite(sprite);
	
	    onRemove && onRemove();
	  };
	
	  return ItemComponent;
	}(_globals.BaseComponent); /*
	                            * This file is part of PhotoEditorSDK.
	                            *
	                            * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                            * All rights reserved.
	                            *
	                            * Redistribution and use in source and binary forms, without
	                            * modification, are permitted provided that the following license agreement
	                            * is approved and a legal/financial contract was signed by the user.
	                            * The license agreement can be found under following link:
	                            *
	                            * https://www.photoeditorsdk.com/LICENSE.txt
	                            */
	
	exports.default = ItemComponent;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _textItemComponent = __webpack_require__(203);
	
	var _textItemComponent2 = _interopRequireDefault(_textItemComponent);
	
	var _stickerItemComponent = __webpack_require__(202);
	
	var _stickerItemComponent2 = _interopRequireDefault(_stickerItemComponent);
	
	var _canvasControlsComponent = __webpack_require__(35);
	
	var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);
	
	var _stickerControlsOverlayComponent = __webpack_require__(206);
	
	var _stickerControlsOverlayComponent2 = _interopRequireDefault(_stickerControlsOverlayComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var _SDK$Operations$Sprit = _globals.SDK.Operations.SpriteOperation; /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Sticker = _SDK$Operations$Sprit.Sticker;
	var Text = _SDK$Operations$Sprit.Text;
	
	var SpritesCanvasControlsComponent = function (_CanvasControlsCompon) {
	  (0, _inherits3.default)(SpritesCanvasControlsComponent, _CanvasControlsCompon);
	
	  function SpritesCanvasControlsComponent() {
	    var _this$_events;
	
	    (0, _classCallCheck3.default)(this, SpritesCanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _CanvasControlsCompon.call.apply(_CanvasControlsCompon, [this].concat(args)));
	
	    _this._bindAll('_onCanvasClick', '_onSpriteDragStart', '_onSpriteDragStop', '_onOperationUpdated', '_onOperationRemoved', '_onSpriteFlip', '_onSpriteTakeToFront', '_onSpriteRemove');
	
	    _this._canvasClickDisabled = false;
	    _this._operation = _this.getSharedState('operation');
	
	    _this._events = (_this$_events = {}, (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation has been removed
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onOperationRemoved = function _onOperationRemoved(operation) {
	    var selectedSprite = this.getSharedState('selectedSprite');
	    if (operation !== this._operation || !selectedSprite) return;
	
	    // Operation can be removed by the undo button. We need
	    // to make sure we re-create the operation for the lifetime
	    // of this control
	    var editor = this.context.editor;
	
	    var newOperation = editor.getOrCreateOperation('sprite', {
	      sprites: [selectedSprite],
	      enabled: false
	    });
	    this._operation = newOperation;
	    this.setSharedState({
	      operation: newOperation,
	      operationExistedBefore: false,
	      initialOptions: {}
	    });
	  };
	
	  /**
	   * Gets called when an operation has been updated
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onOperationUpdated = function _onOperationUpdated(operation) {
	    var selectedSprite = this.getSharedState('selectedSprite');
	    if (operation !== this._operation || !selectedSprite) return;
	
	    // If the currently selected sprite is no longer existent,
	    // re-add it
	    var sprites = operation.getSprites();
	    if (sprites.indexOf(selectedSprite) === -1) {
	      sprites.push(selectedSprite);
	    }
	
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the user clicks somewhere on the canvas
	   * @param  {Event} e
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onCanvasClick = function _onCanvasClick(e) {
	    if (this._canvasClickDisabled) return;
	
	    var hitTest = this._performHitTest(_globals.Utils.getEventPosition(e));
	    if (!hitTest) {
	      this.props.onSwitchControls('home');
	    }
	  };
	
	  /**
	   * Gets called when the user flips the selected sprite
	   * @param  {String} direction
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onSpriteFlip = function _onSpriteFlip(direction) {
	    var selectedSprite = this.getSharedState('selectedSprite');
	    switch (direction) {
	      case 'h':
	        selectedSprite.setFlipHorizontally(!selectedSprite.getFlipHorizontally());
	        break;
	      case 'v':
	        selectedSprite.setFlipVertically(!selectedSprite.getFlipVertically());
	        break;
	    }
	  };
	
	  /**
	   * Gets called when the user takes the selected sprite to front
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onSpriteTakeToFront = function _onSpriteTakeToFront(direction) {
	    var operation = this.getSharedState('operation');
	    operation.takeSpriteToFront(this.getSharedState('selectedSprite'));
	    this.forceSharedUpdate();
	  };
	
	  /**
	   * Gets called when the user removes the selected sprite
	   * @param  {String} direction
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onSpriteRemove = function _onSpriteRemove() {
	    var operation = this.getSharedState('operation');
	    var selectedSprite = this.getSharedState('selectedSprite');
	    operation.removeSprite(selectedSprite);
	
	    this.setSharedState({
	      selectedSprite: null
	    });
	  };
	
	  // -------------------------------------------------------------------------- DRAGGING
	
	  /**
	   * Gets called when a sprite has received a dragging event. Blocks the `_onCanvasClick`
	   * handler until `_onSpriteDragStop`
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onSpriteDragStart = function _onSpriteDragStart() {
	    this._canvasClickDisabled = true;
	  };
	
	  /**
	   * Since `_onCanvasClick` is triggered right after the drag end event for knobs is triggered,
	   * we need to wait a short amount of time until we re-enabale the canvas click
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._onSpriteDragStop = function _onSpriteDragStop() {
	    var _this2 = this;
	
	    setTimeout(function () {
	      _this2._canvasClickDisabled = false;
	    }, 100);
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the container style
	   * @return {Object}
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._getContainerStyle = function _getContainerStyle() {
	    var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds();
	
	    var x = _context$editor$getSD.x;
	    var y = _context$editor$getSD.y;
	    var width = _context$editor$getSD.width;
	    var height = _context$editor$getSD.height;
	
	    return {
	      left: x,
	      top: y,
	      width: width, height: height
	    };
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the sprite items
	   * @return {Array.<SpriteItemComponent>}
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._renderSpriteItems = function _renderSpriteItems() {
	    var _this3 = this;
	
	    var sprites = this._operation.getSprites();
	    var selectedSprite = this.getSharedState('selectedSprite');
	
	    return sprites.map(function (s) {
	      var isSelected = s === selectedSprite;
	      var ComponentClass = null;
	      if (s instanceof Text) {
	        ComponentClass = _textItemComponent2.default;
	      } else if (s instanceof Sticker) {
	        ComponentClass = _stickerItemComponent2.default;
	      }
	
	      return _globals.ReactBEM.createElement(ComponentClass, {
	        operation: _this3._operation,
	        sprite: s,
	        selected: isSelected,
	        onDragStart: _this3._onSpriteDragStart,
	        onDragStop: _this3._onSpriteDragStop,
	        onRemove: _this3._onSpriteRemove.bind(_this3, s) });
	    });
	  };
	
	  /**
	   * If the selected sprite is a sticker, this renders the sticker controls
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  SpritesCanvasControlsComponent.prototype._renderStickerControls = function _renderStickerControls() {
	    var selectedSprite = this.getSharedState('selectedSprite');
	    if (!(selectedSprite instanceof Sticker)) return;
	
	    return _globals.ReactBEM.createElement(_stickerControlsOverlayComponent2.default, {
	      onFlip: this._onSpriteFlip,
	      onTakeToFront: this._onSpriteTakeToFront,
	      onRemove: this._onSpriteRemove });
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  SpritesCanvasControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      {
	        bem: '$b:canvasControls e:container m:full',
	        ref: 'container' },
	      _globals.ReactBEM.createElement(
	        'div',
	        {
	          bem: 'b:canvasControls e:innerContainer',
	          ref: 'root',
	          style: this._getContainerStyle(),
	          onClick: this._onCanvasClick },
	        _globals.ReactBEM.createElement(
	          'div',
	          {
	            bem: '$b:spritesCanvasControls',
	            ref: 'container' },
	          this._renderSpriteItems(),
	          this._renderStickerControls()
	        )
	      )
	    );
	  };
	
	  return SpritesCanvasControlsComponent;
	}(_canvasControlsComponent2.default);
	
	exports.default = SpritesCanvasControlsComponent;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FontPreviewComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(FontPreviewComponent, _BaseComponent);
	
	  function FontPreviewComponent() {
	    (0, _classCallCheck3.default)(this, FontPreviewComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after the component has been mounted
	   */
	
	  FontPreviewComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	    this._renderCanvas();
	  };
	
	  /**
	   * Gets called after this component has been updated
	   */
	
	
	  FontPreviewComponent.prototype.componentDidUpdate = function componentDidUpdate() {
	    this._renderCanvas();
	  };
	
	  // -------------------------------------------------------------------------- CANVAS RENDERING
	
	  /**
	   * Renders the current font family onto the canvas
	   * @private
	   */
	
	
	  FontPreviewComponent.prototype._renderCanvas = function _renderCanvas() {
	    var canvas = this.refs.canvas;
	    var editor = this.context.editor;
	
	    var sdk = editor.getSDK();
	
	    var pixelRatio = sdk.getPixelRatio();
	    canvas.width = canvas.offsetWidth * pixelRatio;
	    canvas.height = canvas.offsetHeight * pixelRatio;
	
	    canvas.style.width = canvas.offsetWidth + 'px';
	    canvas.style.height = canvas.offsetHeight + 'px';
	
	    var context = canvas.getContext('2d');
	
	    context.fillStyle = 'red';
	    context.clearRect(0, 0, canvas.width, canvas.height);
	
	    context.font = this.props.fontWeight + ' ' + 24 * pixelRatio + 'px ' + this.props.fontFamily;
	    context.textBaseline = 'middle';
	    context.textAlign = 'center';
	    context.fillStyle = 'white';
	
	    context.fillText('Abc', canvas.width / 2, canvas.height / 2);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  FontPreviewComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement('canvas', { bem: 'b:fontFamily e:canvas', ref: 'canvas' });
	  };
	
	  return FontPreviewComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = FontPreviewComponent;

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SubHeaderComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(SubHeaderComponent, _BaseComponent);
	
	  function SubHeaderComponent() {
	    (0, _classCallCheck3.default)(this, SubHeaderComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders the content of this SubHeaderComponent
	   * @return {ReactBEM.Element}
	   */
	
	  SubHeaderComponent.prototype.renderContent = function renderContent() {
	    return null;
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  SubHeaderComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:subHeader e:row' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:cell' },
	        this.renderContent()
	      )
	    );
	  };
	
	  return SubHeaderComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = SubHeaderComponent;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(115);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var elementSeparator = '__';
	var modifierSeparator = '--';
	var blockPrefix = 'pesdk-react-';
	
	var BEMObject = function () {
	  function BEMObject(parent, type, name) {
	    (0, _classCallCheck3.default)(this, BEMObject);
	
	    this._parent = parent;
	    this._type = type;
	    this._name = name;
	  }
	
	  /**
	   * Creates a BEMObject of type "element" that has this element as parent
	   * @param  {String} name
	   * @return {BEMObject}
	   */
	
	
	  BEMObject.prototype.element = function element(name) {
	    return new BEMObject(this, 'element', name);
	  };
	
	  /**
	   * Creates a BEMObject of type "modifier" that has this element as parent
	   * @param  {String} name
	   * @return {BEMObject}
	   */
	
	
	  BEMObject.prototype.modifier = function modifier(name) {
	    return new BEMObject(this, 'modifier', name);
	  };
	
	  /**
	   * Builds the class name for this BEMObject
	   * @return {String}
	   */
	
	
	  (0, _createClass3.default)(BEMObject, [{
	    key: 'str',
	    get: function get() {
	      var response = this._parent ? this._parent.str : '';
	      switch (this._type) {
	        case 'block':
	          response += '' + blockPrefix + this._name;
	          break;
	        case 'element':
	          response += '' + elementSeparator + this._name;
	          break;
	        case 'modifier':
	          response += '' + modifierSeparator + this._name;
	          break;
	      }
	      return response;
	    }
	  }]);
	  return BEMObject;
	}();
	
	exports.default = {
	  /**
	   * Creates a BEMObject of type "block" that has this element as parent
	   * @param  {String} name
	   * @return {BEMObject}
	   */
	
	  block: function block(name) {
	    return new BEMObject(null, 'block', name);
	  }
	};

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(239);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	var _typeof2 = __webpack_require__(52);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _react = __webpack_require__(103);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _classnames = __webpack_require__(126);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _bem = __webpack_require__(111);
	
	var _bem2 = _interopRequireDefault(_bem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function flatten(arr) {
	  var result = [];
	  for (var i = 0; i < arr.length; i++) {
	    if (arr[i] instanceof Array) {
	      result = result.concat(flatten(arr[i]));
	    } else {
	      result.push(arr[i]);
	    }
	  }
	  return result;
	} /*
	   * This file is part of PhotoEditorSDK.
	   *
	   * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	   * All rights reserved.
	   *
	   * Redistribution and use in source and binary forms, without
	   * modification, are permitted provided that the following license agreement
	   * is approved and a legal/financial contract was signed by the user.
	   * The license agreement can be found under following link:
	   *
	   * https://www.photoeditorsdk.com/LICENSE.txt
	   */
	
	var BEM_TYPES = {
	  b: 'block',
	  e: 'element',
	  m: 'modifier'
	};
	var ReactBEM = {
	  /**
	   * Parses the given ReactBEM specifier and returns an array of
	   * BEM information (type, name, pass)
	   * @param  {string} specifier
	   * @return {Array.<Object>}
	   * @private
	   */
	
	  _parseBemSpecifier: function _parseBemSpecifier(specifier) {
	    if (!specifier) return [];
	
	    var parts = specifier.split(' ');
	    var data = parts.map(function (part) {
	      var match = part.match(/^(\$)?([bem])\:(.*)$/i);
	      if (!match) {
	        throw new Error('Invalid BEM specifier: ' + part);
	      }
	
	      var pass = typeof match[1] !== 'undefined';
	      var type = BEM_TYPES[match[2]];
	      var name = match[3];
	      return { type: type, name: name, pass: pass };
	    });
	    return data;
	  },
	
	
	  /**
	   * Returns the BEM info for the given node
	   * @param  {Object} node
	   * @return {Object}
	   * @private
	   */
	  _getBemInfoForNode: function _getBemInfoForNode(node) {
	    var isBemNode = node.type === 'bem';
	    var specifier = isBemNode ? node.props.specifier : node.props.bem;
	
	    if (isBemNode && !specifier) {
	      throw new Error('<bem> elements should always have a `specifier` property');
	    }
	
	    var data = this._parseBemSpecifier(specifier);
	
	    // <bem> nodes pass all bem information to the children
	    if (isBemNode) {
	      data.forEach(function (obj) {
	        obj.pass = true;
	      });
	    }
	
	    return { data: data, isBemNode: isBemNode };
	  },
	
	
	  /**
	   * Used in React.Component's `render` method
	   *
	   * @param  {String} type
	   * @param  {Object} props
	   * @param  {Array.<Object>} [...children]
	   * @return {Object}
	   */
	  createElement: function createElement(type, props) {
	    for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      children[_key - 2] = arguments[_key];
	    }
	
	    props = props || {};
	    children = children.filter(function (child) {
	      return child !== null && typeof child !== 'undefined';
	    });
	    return { type: type, props: props, children: children };
	  },
	
	
	  /**
	   * Checks whether we can apply a bem class to the given node
	   * @param  {?}  node
	   * @return {Boolean}
	   * @private
	   */
	  _isNodeBEMable: function _isNodeBEMable(node) {
	    return node !== null && (typeof node === 'undefined' ? 'undefined' : (0, _typeof3.default)(node)) === 'object' && !_react2.default.isValidElement(node);
	  },
	
	
	  /**
	   * Sets the BEM class for the given node. Iterates through its
	   * children and sets their BEM class as well
	   * @param  {Object} node
	   * @return {Object}
	   * @private
	   */
	  _applyBEMClasses: function _applyBEMClasses(node) {
	    var _this = this;
	
	    if (!this._isNodeBEMable(node)) return node;
	
	    var classNames = node.props.className ? [node.props.className] : [];
	
	    // Prepare BEM objects
	    var bemInfo = this._getBemInfoForNode(node);
	    var ownBemObject = node.props.__bemObject;
	    var childrenBemObject = node.props.__bemObject;
	    bemInfo.data.forEach(function (obj) {
	      if (obj.type === 'block') {
	        ownBemObject = _bem2.default.block(obj.name);
	        if (obj.pass) {
	          childrenBemObject = _bem2.default.block(obj.name);
	        }
	        classNames.push(ownBemObject.str);
	      } else if (obj.type === 'element') {
	        if (!ownBemObject) {
	          throw new Error('Tried to create an element, but no parent block has been found.');
	        }
	
	        ownBemObject = ownBemObject.element(obj.name);
	        if (obj.pass) {
	          childrenBemObject = childrenBemObject.element(obj.name);
	        }
	        classNames.push(ownBemObject.str);
	      } else if (obj.type === 'modifier') {
	        if (!ownBemObject) {
	          throw new Error('Tried to create a modifier, but no parent block has been found.');
	        }
	
	        if (obj.pass) {
	          childrenBemObject = childrenBemObject.modifier(obj.name);
	        }
	        classNames.push(ownBemObject.modifier(obj.name).str);
	      }
	    });
	
	    // Apply classname (if necessary)
	    var className = (0, _classnames2.default)(classNames);
	    if (className) {
	      node.props.className = className;
	    }
	
	    node.children = flatten(node.children);
	
	    // Pass `childrenBemObject` to child nodes
	    node.children.forEach(function (child) {
	      if (!_this._isNodeBEMable(child)) return;
	      child.props.__bemObject = childrenBemObject;
	    });
	
	    // Apply BEM objects to children
	    node.children = node.children.map(function (child) {
	      return _this._applyBEMClasses(child);
	    });
	
	    node.children = flatten(node.children);
	
	    // Remove unnecessary props
	    delete node.props.__bemObject;
	
	    if (bemInfo.isBemNode) {
	      if (node.children instanceof Array && node.children.length === 1) {
	        node = node.children[0];
	      } else {
	        node = node.children;
	      }
	    }
	
	    return node;
	  },
	
	
	  /**
	   * Transforms the given ReactBEM element and its children into
	   * actual ReactJS elements
	   * @param  {Object} node
	   * @return {React.Element}
	   */
	  _transformToReact: function _transformToReact(node) {
	    var _this2 = this;
	
	    if (!this._isNodeBEMable(node)) return node;
	
	    node.children = node.children.map(function (child) {
	      return _this2._transformToReact(child);
	    });
	
	    return _react2.default.createElement.apply(_react2.default, [node.type, node.props].concat((0, _toConsumableArray3.default)(node.children)));
	  },
	
	
	  /**
	   * Transforms the given ReactBEM object and its children
	   * @param  {Object} root
	   * @return {React.Element}
	   */
	  transform: function transform(root) {
	    root = this._applyBEMClasses(root);
	
	    // Root node should be a single node, not an array. Returning the array
	    // here will cause React to throw an error saying that this is a no-go
	    if (root instanceof Array) {
	      return root;
	    }
	
	    root = this._transformToReact(root);
	    return root;
	  }
	};
	
	exports.default = ReactBEM;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var maxLogLevel = 'warn';
	
	var LEVELS = [{ type: 'trace', background: '#EEEEEE', color: '#AAAAAA' }, { type: 'info', background: '#BDE5F8', color: '#00529B' }, { type: 'warn', background: '#FEEFB3', color: '#9F6000' }, { type: 'error', background: '#FFBABA', color: '#D8000C' }, { type: 'log', background: '#EEEEEE', color: '#1f4f6b' }];
	var LEVEL_TYPES = LEVELS.map(function (l) {
	  return l.type;
	});
	
	var Log = {};
	
	Log.setLevel = function (_level) {
	  maxLogLevel = _level;
	};
	Log.canLog = function (type) {
	  if (maxLogLevel === null) return false;
	  var currentLevelIndex = LEVEL_TYPES.indexOf(type);
	  var maxLevelIndex = LEVEL_TYPES.indexOf(maxLogLevel);
	  if (currentLevelIndex < maxLevelIndex) return false;
	  return true;
	};
	Log.hasColorfulOutput = function () {
	  return (!process || process && process.browser) && typeof navigator !== 'undefined' && navigator.userAgent.match(/Gecko|WebKit/i) && !navigator.userAgent.match(/Trident/);
	};
	
	Log.printError = function (e) {
	  var lines = e.stack.split('\n');
	  lines.forEach(function (line) {
	    Log.error('Error', line);
	  });
	};
	
	LEVELS.forEach(function (level) {
	  var type = level.type;
	  var background = level.background;
	  var color = level.color;
	
	  Log[type] = function (tag) {
	    if (!Log.canLog(type)) return;
	
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    var output = args.map(function (a) {
	      return typeof a === 'string' ? a : a.toString();
	    }).join(' ');
	    if (!Log.hasColorfulOutput()) {
	      return console.log('PhotoEditorSDK | ' + tag + ' | ' + output);
	    }
	    console.log('%c  %c PhotoEditorSDK %c  %c ' + tag + ' %c  ' + output + '  %c  ', 'background: #43ADEB; padding: 5px 0', 'background: #2B2B2B; color: white; padding: 5px 0', 'background: #43ADEB; padding: 5px 0', 'background: ' + background + '; color: ' + color + '; padding: 5px 0; font-weight: bold', 'background: #2B2B2B; color: white; padding: 5px 0', 'background: #43ADEB; padding: 5px 0');
	  };
	});
	
	exports.default = Log;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(243), __esModule: true };

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(114);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(41)
	  , document = __webpack_require__(23).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(27) && !__webpack_require__(40)(function(){
	  return Object.defineProperty(__webpack_require__(116)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(69);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(73)
	  , $export        = __webpack_require__(28)
	  , redefine       = __webpack_require__(123)
	  , hide           = __webpack_require__(37)
	  , has            = __webpack_require__(29)
	  , Iterators      = __webpack_require__(42)
	  , $iterCreate    = __webpack_require__(257)
	  , setToStringTag = __webpack_require__(76)
	  , getPrototypeOf = __webpack_require__(265)
	  , ITERATOR       = __webpack_require__(17)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(53)
	  , createDesc     = __webpack_require__(44)
	  , toIObject      = __webpack_require__(30)
	  , toPrimitive    = __webpack_require__(81)
	  , has            = __webpack_require__(29)
	  , IE8_DOM_DEFINE = __webpack_require__(117)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(27) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(122)
	  , hiddenKeys = __webpack_require__(72).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(29)
	  , toIObject    = __webpack_require__(30)
	  , arrayIndexOf = __webpack_require__(249)(false)
	  , IE_PROTO     = __webpack_require__(77)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(37);

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(79)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(267)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(119)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2016 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					classes.push(classNames.apply(null, arg));
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(18);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function () {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function (target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function () {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function () {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isTextNode = __webpack_require__(289);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;
	
	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;
	
	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 130 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';
	
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var Danger = __webpack_require__(306);
	var ReactMultiChildUpdateTypes = __webpack_require__(151);
	var ReactPerf = __webpack_require__(13);
	
	var setInnerHTML = __webpack_require__(63);
	var setTextContent = __webpack_require__(99);
	var invariant = __webpack_require__(5);
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	
	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
	
	  parentNode.insertBefore(childNode, beforeChild);
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: setTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function (updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(26);
	var ReactElement = __webpack_require__(11);
	
	var emptyFunction = __webpack_require__(18);
	var traverseAllChildren = __webpack_require__(101);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var ReactComponent = __webpack_require__(138);
	var ReactElement = __webpack_require__(11);
	var ReactPropTypeLocations = __webpack_require__(58);
	var ReactPropTypeLocationNames = __webpack_require__(57);
	var ReactNoopUpdateQueue = __webpack_require__(153);
	
	var assign = __webpack_require__(6);
	var emptyObject = __webpack_require__(45);
	var invariant = __webpack_require__(5);
	var keyMirror = __webpack_require__(55);
	var keyOf = __webpack_require__(25);
	var warning = __webpack_require__(7);
	
	var MIXINS_KEY = keyOf({ mixins: null });
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	var injectedMixins = [];
	
	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };
	
	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = (name in RESERVED_SPEC_KEYS);
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
	
	    var isInherited = (name in Constructor);
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function (partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function (newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};
	
	var ReactClassComponent = function () {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    var Constructor = function (props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var ReactNoopUpdateQueue = __webpack_require__(153);
	
	var canDefineProperty = __webpack_require__(61);
	var emptyObject = __webpack_require__(45);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactDOMTextComponent = __webpack_require__(142);
	var ReactDefaultInjection = __webpack_require__(144);
	var ReactInstanceHandles = __webpack_require__(38);
	var ReactMount = __webpack_require__(9);
	var ReactPerf = __webpack_require__(13);
	var ReactReconciler = __webpack_require__(32);
	var ReactUpdates = __webpack_require__(15);
	var ReactVersion = __webpack_require__(91);
	
	var findDOMNode = __webpack_require__(92);
	var renderSubtreeIntoContainer = __webpack_require__(357);
	var warning = __webpack_require__(7);
	
	ReactDefaultInjection.inject();
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(8);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,
	
	    // shams
	    Object.create, Object.freeze];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 140 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(86);
	var ReactMount = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(15);
	
	var assign = __webpack_require__(6);
	var warning = __webpack_require__(7);
	
	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,
	
	  getNativeProps: function (inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },
	
	  processChildContext: function (inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(134);
	var DOMPropertyOperations = __webpack_require__(85);
	var ReactComponentBrowserEnvironment = __webpack_require__(87);
	var ReactMount = __webpack_require__(9);
	
	var assign = __webpack_require__(6);
	var escapeTextContentForBrowser = __webpack_require__(62);
	var setTextContent = __webpack_require__(99);
	var validateDOMNesting = __webpack_require__(102);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (props) {
	  // This constructor and its argument is currently used by mocks.
	};
	
	assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function (text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;
	
	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },
	
	  unmountComponent: function () {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var ReactUpdates = __webpack_require__(15);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(6);
	var emptyFunction = __webpack_require__(18);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(302);
	var ChangeEventPlugin = __webpack_require__(304);
	var ClientReactRootIndex = __webpack_require__(305);
	var DefaultEventPluginOrder = __webpack_require__(307);
	var EnterLeaveEventPlugin = __webpack_require__(308);
	var ExecutionEnvironment = __webpack_require__(8);
	var HTMLDOMPropertyConfig = __webpack_require__(311);
	var ReactBrowserComponentMixin = __webpack_require__(313);
	var ReactComponentBrowserEnvironment = __webpack_require__(87);
	var ReactDefaultBatchingStrategy = __webpack_require__(143);
	var ReactDOMComponent = __webpack_require__(317);
	var ReactDOMTextComponent = __webpack_require__(142);
	var ReactEventListener = __webpack_require__(327);
	var ReactInjection = __webpack_require__(328);
	var ReactInstanceHandles = __webpack_require__(38);
	var ReactMount = __webpack_require__(9);
	var ReactReconcileTransaction = __webpack_require__(332);
	var SelectEventPlugin = __webpack_require__(338);
	var ServerReactRootIndex = __webpack_require__(339);
	var SimpleEventPlugin = __webpack_require__(340);
	var SVGDOMPropertyConfig = __webpack_require__(337);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(324);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(11);
	var ReactPropTypeLocations = __webpack_require__(58);
	var ReactPropTypeLocationNames = __webpack_require__(57);
	var ReactCurrentOwner = __webpack_require__(22);
	
	var canDefineProperty = __webpack_require__(61);
	var getIteratorFn = __webpack_require__(96);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	
	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;
	
	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  return addenda;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(11);
	var ReactEmptyComponentRegistry = __webpack_require__(147);
	var ReactReconciler = __webpack_require__(32);
	
	var assign = __webpack_require__(6);
	
	var placeholderElement;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function (component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};
	
	function registerNullComponentID() {
	  ReactEmptyComponentRegistry.registerNullComponentID(this._rootNodeID);
	}
	
	var ReactEmptyComponent = function (instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function (element) {},
	  mountComponent: function (rootID, transaction, context) {
	    transaction.getReactMountReady().enqueue(registerNullComponentID, this);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function () {},
	  unmountComponent: function (rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 147 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */
	
	'use strict';
	
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}
	
	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};
	
	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(321);
	
	var containsNode = __webpack_require__(128);
	var focusNode = __webpack_require__(129);
	var getActiveElement = __webpack_require__(130);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(349);
	
	var TAG_END = /\/?>/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(55);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function (componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
	
	'use strict';
	
	var warning = __webpack_require__(7);
	
	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function (publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function (publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }
	
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(11);
	var ReactPropTypeLocationNames = __webpack_require__(57);
	
	var emptyFunction = __webpack_require__(18);
	var getIteratorFn = __webpack_require__(96);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function (_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;

/***/ },
/* 156 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function (arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 160 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _splashScreenComponent = __webpack_require__(217);
	
	var _splashScreenComponent2 = _interopRequireDefault(_splashScreenComponent);
	
	var _webcamScreenComponent = __webpack_require__(221);
	
	var _webcamScreenComponent2 = _interopRequireDefault(_webcamScreenComponent);
	
	var _editorScreenComponent = __webpack_require__(216);
	
	var _editorScreenComponent2 = _interopRequireDefault(_editorScreenComponent);
	
	var _screenComponent = __webpack_require__(50);
	
	var _screenComponent2 = _interopRequireDefault(_screenComponent);
	
	var _modalContainerComponent = __webpack_require__(211);
	
	var _modalContainerComponent2 = _interopRequireDefault(_modalContainerComponent);
	
	var _modalManager = __webpack_require__(34);
	
	var _modalManager2 = _interopRequireDefault(_modalManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AppComponent = function (_React$Component) {
	  (0, _inherits3.default)(AppComponent, _React$Component);
	
	  function AppComponent() {
	    (0, _classCallCheck3.default)(this, AppComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args)));
	
	    _this._screens = {
	      splash: _splashScreenComponent2.default,
	      webcam: _webcamScreenComponent2.default,
	      editor: _editorScreenComponent2.default,
	      empty: _screenComponent2.default
	    };
	
	    var initialScreen = void 0;
	    if (_this.props.options.image) {
	      initialScreen = _this._screens.editor;
	    } else {
	      initialScreen = _this._screens.splash;
	    }
	
	    _this.state = { screen: initialScreen };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Switches to the webcam screen
	   */
	
	
	  AppComponent.prototype.switchToWebcamScreen = function switchToWebcamScreen() {
	    this.setState({ screen: this._screens.webcam });
	  };
	
	  /**
	   * Switches to the splash screen
	   */
	
	
	  AppComponent.prototype.switchToSplashScreen = function switchToSplashScreen() {
	    this.setState({ screen: this._screens.splash });
	  };
	
	  /**
	   * Gets called when an image is ready for editing
	   * @param {Image} image
	   */
	
	
	  AppComponent.prototype.setImage = function setImage(image) {
	    var options = this.props.options;
	
	    options.image = image;
	    if (this.state.screen === this._screens.editor) {
	      // Update screen
	      this.refs.screen._editor.setImage(image);
	    } else {
	      this.setState({ screen: this._screens.editor });
	    }
	  };
	
	  /**
	   * Returns the context passed to all children
	   * @return {Object}
	   */
	
	
	  AppComponent.prototype.getChildContext = function getChildContext() {
	    return {
	      ui: this.props.ui,
	      options: this.props.options,
	      mediator: this.props.mediator
	    };
	  };
	
	  /**
	   * Renders this component
	   * @return {React.Component}
	   */
	
	
	  AppComponent.prototype.render = function render() {
	    var Screen = this.state.screen;
	    if (!Screen) {
	      return _globals.ReactBEM.transform(_globals.ReactBEM.createElement('div', null));
	    }
	
	    return _globals.ReactBEM.transform(_globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:editor' },
	      _globals.ReactBEM.createElement(_modalContainerComponent2.default, {
	        modalManager: _modalManager2.default.instance }),
	      _globals.ReactBEM.createElement(Screen, { ref: 'screen', app: this })
	    ));
	  };
	
	  return AppComponent;
	}(_globals.React.Component); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = AppComponent;
	
	
	AppComponent.childContextTypes = {
	  ui: _globals.React.PropTypes.object.isRequired,
	  mediator: _globals.React.PropTypes.object.isRequired,
	  options: _globals.React.PropTypes.object.isRequired
	};
	
	AppComponent.propTypes = {
	  ui: _globals.React.PropTypes.object.isRequired,
	  mediator: _globals.React.PropTypes.object.isRequired,
	  options: _globals.React.PropTypes.object.isRequired
	};

/***/ },
/* 162 */
/***/ function(module, exports) {

	module.exports = {
		"controls": {
			"overview": {
				"filters": "Filter",
				"orientation": "Ausrichtung",
				"adjustments": "Korrekturen",
				"crop": "Zuschneiden",
				"blur": "Weichzeichnen",
				"border": "Rahmen",
				"sticker": "Sticker",
				"text": "Text",
				"brush": "Malen"
			},
			"border": {
				"color": "Farbe",
				"thickness": "Dicke"
			},
			"text": {
				"foreground": "Vordergrund",
				"background": "Hintergrund",
				"size": "Größe",
				"font": "Schriftart",
				"alignment": "Ausrichtung",
				"takeToFront": "Nach oben"
			},
			"orientation": {
				"rotate-l": "Drehen -90°",
				"rotate-r": "Drehen +90°",
				"flip-h": "Spiegeln (H)",
				"flip-v": "Spiegeln (V)"
			},
			"adjustments": {
				"brightness": "Helligkeit",
				"contrast": "Kontrast",
				"saturation": "Sättigung"
			},
			"crop": {
				"custom": "Manuell",
				"square": "Quadratisch",
				"4-3": "4:3",
				"16-9": "16:9"
			},
			"focus": {
				"radial": "Kreisförmig",
				"linear": "Linear",
				"blurRadius": "Radius"
			},
			"filters": {
				"intensity": "Intensität",
				"categories": {
					"all": "Alle",
					"retro": "Retro",
					"bw": "Schwarz & Weiß",
					"summer": "Sommer",
					"winter": "Winter",
					"special": "Spezial"
				}
			},
			"sticker": {
				"brightness": "Helligkeit",
				"contrast": "Kontrast",
				"saturation": "Sättigung",
				"blur": "Weichzeichnen",
				"flip": "Spiegeln",
				"flip-v": "Spiegeln (V)",
				"flip-h": "Spiegeln (H)",
				"takeToFront": "Nach oben",
				"categories": {
					"all": "Alle",
					"glasses": "Brillen",
					"hats": "Hüte",
					"beards": "Bärte",
					"misc": "Gemischt"
				}
			},
			"brush": {
				"thickness": "Dicke",
				"color": "Farbe"
			}
		},
		"webcam": {
			"headline": "Mache ein Foto!"
		},
		"editor": {
			"headline": "Foto editieren",
			"new": "Neu",
			"undo": "Rückgängig",
			"export": "Speichern"
		},
		"splash": {
			"upload": {
				"button": "Lade ein Foto hoch",
				"description": "Klicke hier, um ein Foto von deinem Rechner hochzuladen oder lade es per Drag-and-Drop hoch"
			},
			"or": "or",
			"webcam": {
				"button": "Mache ein Foto",
				"description": "Klicke hier, um ein Foto mit deiner Webcam zu machen"
			}
		},
		"generic": {
			"back": "Zurück",
			"cancel": "Abbrechen",
			"color": "Farbe"
		},
		"loading": {
			"resizing": "Bild wird bearbeitet...",
			"exporting": "Exportiere...",
			"loading": "Lade..."
		},
		"warnings": {
			"imageResized_maxMegaPixels": {
				"title": "Bild verkleinert",
				"text": "Da dein Bild die maximale Größe von ${maxMegaPixels} Megapixeln überschreitet, wurde es auf ${width}x${height} Pixel verkleinert."
			},
			"imageResized_maxDimensions": {
				"title": "Bild verkleinert",
				"text": "Aufgrund von Hardware-Beschränkungen wurde das Bild auf ${width}x${height} Pixel verkleinert."
			}
		},
		"errors": {
			"imageLoadFail": {
				"title": "Bild konnte nicht geladen werden",
				"text": "Beim Laden des Bildes unter ${path} ist ein Fehler aufgetreten."
			},
			"webcamUnavailable": {
				"title": "Webcam nicht verfügbar",
				"text": "Webcam-Bild kann nicht dargestellt werden. (Fehler: ${error})"
			},
			"webcamNotSupported": {
				"title": "Webcam nicht unterstützt",
				"text": "Dein Browser unterstützt das Webcam-Feature leider noch nicht."
			},
			"renderingError": {
				"title": "Rendering-Fehler",
				"text": "Beim Rendern des Bildes ist ein Fehler aufgetreten."
			},
			"context_lost": {
				"title": "Es ist ein Fehler aufgetreten",
				"text": "Dein Browser hat zu lange gebraucht, um das Bild zu generieren. Bitte versuche es noch einmal."
			},
			"context_lost_limit": {
				"title": "Es ist ein Fehler aufgetreten",
				"text": "Bild-Generierung ist mehrmals fehlgeschlagen."
			},
			"loadingStickersFailed": {
				"title": "Laden der Sticker fehlgeschlagen"
			}
		}
	};

/***/ },
/* 163 */
/***/ function(module, exports) {

	module.exports = {
		"controls": {
			"overview": {
				"filters": "Filters",
				"orientation": "Orientation",
				"adjustments": "Adjust",
				"crop": "Crop",
				"focus": "Focus",
				"border": "Border",
				"sticker": "Sticker",
				"text": "Text",
				"brush": "Brush"
			},
			"border": {
				"color": "Color",
				"thickness": "Thickness"
			},
			"text": {
				"foreground": "Foreground",
				"background": "Background",
				"size": "Size",
				"font": "Font",
				"alignment": "Alignment",
				"takeToFront": "To Front"
			},
			"orientation": {
				"rotate-l": "Rotate -90°",
				"rotate-r": "Rotate +90°",
				"flip-h": "Flip (H)",
				"flip-v": "Flip (V)"
			},
			"adjustments": {
				"brightness": "Brightness",
				"contrast": "Contrast",
				"saturation": "Saturation"
			},
			"crop": {
				"custom": "Custom",
				"square": "Square",
				"4-3": "4:3",
				"16-9": "16:9"
			},
			"focus": {
				"radial": "Radial",
				"linear": "Linear",
				"blurRadius": "Blur radius"
			},
			"filters": {
				"intensity": "Intensity",
				"categories": {
					"all": "All",
					"retro": "Retro",
					"bw": "Black & White",
					"summer": "Summer",
					"winter": "Winter",
					"special": "Special"
				}
			},
			"sticker": {
				"brightness": "Brightness",
				"contrast": "Contrast",
				"saturation": "Saturation",
				"blur": "Blur",
				"flip": "Flip",
				"flip-v": "Flip (V)",
				"flip-h": "Flip (H)",
				"takeToFront": "To Front",
				"categories": {
					"all": "All",
					"glasses": "Glasses",
					"hats": "Hats",
					"beards": "Beards",
					"misc": "Misc"
				}
			},
			"brush": {
				"thickness": "Thickness",
				"color": "Color"
			}
		},
		"webcam": {
			"headline": "Take a photo!"
		},
		"editor": {
			"headline": "Edit Photo",
			"new": "New",
			"undo": "Undo",
			"export": "Export"
		},
		"splash": {
			"upload": {
				"button": "Upload a picture",
				"description": "Click here to upload a picture from your library or just drag and drop"
			},
			"or": "or",
			"webcam": {
				"button": "Take a picture",
				"description": "Click here to take a picture with your webcam or phone"
			}
		},
		"generic": {
			"back": "Back",
			"cancel": "Cancel",
			"color": "Color"
		},
		"loading": {
			"resizing": "Resizing...",
			"exporting": "Exporting...",
			"loading": "Loading..."
		},
		"warnings": {
			"imageResized_maxMegaPixels": {
				"title": "Image resized",
				"text": "Your image exceeds the maximum size of ${maxMegaPixels} megapixels and has therefore been resized to ${width}x${height} pixels."
			},
			"imageResized_maxDimensions": {
				"title": "Image resized",
				"text": "Due to hardware limitations your image has been resized to ${width}x${height} pixels."
			}
		},
		"errors": {
			"imageLoadFail": {
				"title": "Failed to load image",
				"text": "Failed to load the image at ${path}"
			},
			"webcamUnavailable": {
				"title": "Webcam unavailable",
				"text": "Unable to display webcam image (Error: ${error})"
			},
			"webcamNotSupported": {
				"title": "Webcam not supported",
				"text": "The webcam feature is not supported by your browser."
			},
			"renderingError": {
				"title": "Error while rendering",
				"text": "An error has occurred while rendering the image."
			},
			"context_lost": {
				"title": "An error has occurred",
				"text": "Your browser took too long to render the image. Please try applying less operations."
			},
			"context_lost_limit": {
				"title": "An error has occurred",
				"text": "Your browser failed multiple times while rendering the image."
			},
			"loadingStickersFailed": {
				"title": "Failed to load stickers"
			}
		}
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BackButtonComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(BackButtonComponent, _BaseComponent);
	
	  function BackButtonComponent() {
	    (0, _classCallCheck3.default)(this, BackButtonComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  BackButtonComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:controls' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:cell m:largeButton' },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: '$e:largeButton', onClick: this.props.onClick },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/back.png', true) })
	        )
	      )
	    );
	  };
	
	  return BackButtonComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = BackButtonComponent;

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(103);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactBem = __webpack_require__(112);
	
	var _reactBem2 = _interopRequireDefault(_reactBem);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BaseComponent = function (_React$Component) {
	  (0, _inherits3.default)(BaseComponent, _React$Component);
	
	  function BaseComponent() {
	    (0, _classCallCheck3.default)(this, BaseComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args)));
	
	    _this._events = {};
	
	    _this._bindAll('_onSharedStateUpdate');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  BaseComponent.prototype.componentDidMount = function componentDidMount() {
	    this._bindEvents();
	    if (this.props.sharedState) {
	      this.props.sharedState.on('update', this._onSharedStateUpdate);
	    }
	  };
	
	  /**
	   * Gets called before this component is unmounted
	   */
	
	
	  BaseComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._unbindEvents();
	
	    if (this.props.sharedState) {
	      this.props.sharedState.off('update', this._onSharedStateUpdate);
	    }
	  };
	
	  /**
	   * Gets called when this component is about to receive new properties
	   * @param  {Object} nextProps
	   */
	
	
	  BaseComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    if (nextProps.sharedState) {
	      if (this.props.sharedState) {
	        this.props.sharedState.off('update', this._onSharedStateUpdate);
	      }
	      nextProps.sharedState.on('update', this._onSharedStateUpdate);
	    }
	  };
	
	  // -------------------------------------------------------------------------- HELPER FUNCTIONS
	
	  /**
	   * Binds the instance methods with the given names
	   * to the class context
	   * @param  {Array.<String>} ...fnNames
	   * @protected
	   */
	
	
	  BaseComponent.prototype._bindAll = function _bindAll() {
	    var _this2 = this;
	
	    for (var _len2 = arguments.length, fnNames = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      fnNames[_key2] = arguments[_key2];
	    }
	
	    fnNames.forEach(function (name) {
	      if (typeof _this2[name] !== 'function') {
	        throw new Error('_bindAll: ' + _this2.constructor.name + '.' + name + ' is not a function.');
	      }
	      _this2[name] = _this2[name].bind(_this2);
	    });
	  };
	
	  /**
	   * Returns the translation for `key`
	   * @param  {String} key
	   * @param  {Object} [interpolationOptions]
	   * @return {String}
	   */
	
	
	  BaseComponent.prototype._t = function _t(key, interpolationOptions) {
	    return this.context.ui.translate(key, interpolationOptions);
	  };
	
	  /**
	   * A helper method for UI.helpers.assetPath
	   * @param {?} ...args
	   * @protected
	   */
	
	
	  BaseComponent.prototype._getAssetPath = function _getAssetPath() {
	    var _context$ui;
	
	    return (_context$ui = this.context.ui).getAssetPath.apply(_context$ui, arguments);
	  };
	
	  // -------------------------------------------------------------------------- SHARED STATE
	
	  /**
	   * Gets called when the shared state did change
	   * @param  {Object} newState
	   * @private
	   */
	
	
	  BaseComponent.prototype._onSharedStateUpdate = function _onSharedStateUpdate(newState) {
	    this.sharedStateDidChange(newState);
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the shared state did change
	   * @param {Object} newState
	   */
	
	
	  BaseComponent.prototype.sharedStateDidChange = function sharedStateDidChange(newState) {};
	
	  /**
	   * Sets the given state on the shared state
	   * @param {Object} state
	   * @param {Boolean} update
	   */
	
	
	  BaseComponent.prototype.setSharedState = function setSharedState(state, update) {
	    this.props.sharedState.set(state, update);
	  };
	
	  /**
	   * Returns the shared state value for the given property
	   * @param {String} prop
	   * @return {*}
	   */
	
	
	  BaseComponent.prototype.getSharedState = function getSharedState(prop) {
	    return this.props.sharedState.get(prop);
	  };
	
	  /**
	   * Forces an update of the shared state
	   */
	
	
	  BaseComponent.prototype.forceSharedUpdate = function forceSharedUpdate() {
	    this.props.sharedState.broadcastUpdate();
	  };
	
	  // -------------------------------------------------------------------------- EVENT HANDLING
	
	  /**
	   * Binds the events in _events
	   * @protected
	   */
	
	
	  BaseComponent.prototype._bindEvents = function _bindEvents() {
	    for (var eventName in this._events) {
	      var handler = this._events[eventName];
	      this.context.mediator.on(eventName, handler);
	    }
	  };
	
	  /**
	   * Unbinds the events in _events
	   * @protected
	   */
	
	
	  BaseComponent.prototype._unbindEvents = function _unbindEvents() {
	    for (var eventName in this._events) {
	      var handler = this._events[eventName];
	      this.context.mediator.off(eventName, handler);
	    }
	  };
	
	  /**
	   * Emits an event with the given event name and arguments through
	   * the mediator
	   * @param  {String} eventName
	   * @param  {Array.<*>} ...args
	   * @protected
	   */
	
	
	  BaseComponent.prototype._emitEvent = function _emitEvent(eventName) {
	    var _context$mediator;
	
	    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
	      args[_key3 - 1] = arguments[_key3];
	    }
	
	    (_context$mediator = this.context.mediator).emit.apply(_context$mediator, [eventName].concat(args));
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this element
	   * @return {ReactBEM.element}
	   */
	
	
	  BaseComponent.prototype.renderWithBEM = function renderWithBEM() {};
	
	  /**
	   * Transforms the ReactBEM.element returned by `renderWithBEM` into
	   * React.Element objects with proper class names
	   * @return {React.Element}
	   */
	
	
	  BaseComponent.prototype.render = function render() {
	    return _reactBem2.default.transform(this.renderWithBEM());
	  };
	
	  return BaseComponent;
	}(_react2.default.Component);
	
	exports.default = BaseComponent;
	
	
	BaseComponent.contextTypes = {
	  editor: _react2.default.PropTypes.object,
	  ui: _react2.default.PropTypes.object,
	  options: _react2.default.PropTypes.object,
	  mediator: _react2.default.PropTypes.object,
	  editorScreen: _react2.default.PropTypes.object
	};
	
	BaseComponent.propTypes = {
	  sharedState: _react2.default.PropTypes.any
	};

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CategoryDropdownOverlayComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(CategoryDropdownOverlayComponent, _BaseComponent);
	
	  function CategoryDropdownOverlayComponent() {
	    (0, _classCallCheck3.default)(this, CategoryDropdownOverlayComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks on an item
	   * @param  {Object} item
	   * @private
	   */
	
	  CategoryDropdownOverlayComponent.prototype._onItemClick = function _onItemClick(item) {
	    this.props.onChange && this.props.onChange(item);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the list items
	   * @return {Array.<React.Element>}
	   * @private
	   */
	
	
	  CategoryDropdownOverlayComponent.prototype._renderListItems = function _renderListItems() {
	    var _this2 = this;
	
	    return this.props.items.map(function (item) {
	      var active = item.name === _this2.props.selectedItem.name;
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: '$e:item',
	          className: active ? ' is-active' : '',
	          onClick: _this2._onItemClick.bind(_this2, item) },
	        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: item.icon }),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label' },
	          item.label
	        )
	      );
	    });
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  CategoryDropdownOverlayComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:categoryDropdown $e:overlay' },
	      _globals.ReactBEM.createElement(
	        'ul',
	        { bem: '$e:list' },
	        this._renderListItems()
	      )
	    );
	  };
	
	  return CategoryDropdownOverlayComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = CategoryDropdownOverlayComponent;

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var AlphaComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(AlphaComponent, _BaseComponent);
	
	  function AlphaComponent() {
	    (0, _classCallCheck3.default)(this, AlphaComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onKnobDrag', '_onKnobDragStart');
	
	    _this._value = _this.props.initialValue.clone();
	    _this._transparentPatternCanvas = _globals.Utils.createTransparentPatternCanvas();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after this component has been mounted
	   */
	
	
	  AlphaComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	    this._renderCanvas();
	  };
	
	  /**
	   * Gets called when this component receives new props or state
	   * @param  {Object} newProps
	   * @return {Boolean}
	   */
	
	
	  AlphaComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(newProps) {
	    var initialValue = newProps.initialValue;
	
	    if (initialValue !== this._value) {
	      this._value = initialValue.clone();
	      this._renderCanvas();
	      return true;
	    }
	    return false;
	  };
	
	  // -------------------------------------------------------------------------- DRAG EVENTS
	
	  /**
	   * Gets called when the user starts dragging the knob
	   * @param  {Vector2} position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  AlphaComponent.prototype._onKnobDragStart = function _onKnobDragStart(position, e) {
	    if (e.target === this.refs.knob) {
	      this._initialAlpha = this._value.a;
	    } else {
	      this._setAlphaFromPosition(position);
	    }
	  };
	
	  /**
	   * Gets called while the user drags the knob
	   * @param  {Vector2} offset
	   * @param  {Event} e
	   * @private
	   */
	
	
	  AlphaComponent.prototype._onKnobDrag = function _onKnobDrag(offset, e) {
	    var canvas = this.refs.canvas;
	    var canvasWidth = canvas.offsetWidth;
	
	    var alphaChange = offset.x / canvasWidth;
	    this._setAlpha(this._initialAlpha + alphaChange);
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the style object for the knob
	   * @return {Object}
	   * @private
	   */
	
	
	  AlphaComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    return {
	      left: (this._value.a * 100).toFixed(2) + '%',
	      top: '50%'
	    };
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Sets the alpha value of the color to the given one
	   * @param {Number} a
	   * @private
	   */
	
	
	  AlphaComponent.prototype._setAlpha = function _setAlpha(a) {
	    this._value.a = a;
	    this._value.a = Math.min(1, Math.max(0, this._value.a));
	    this.forceUpdate();
	    this.props.onChange && this.props.onChange(this._value);
	  };
	
	  /**
	   * Sets the alpha from the given cursor position
	   * @param {Vector2} position
	   * @private
	   */
	
	
	  AlphaComponent.prototype._setAlphaFromPosition = function _setAlphaFromPosition(position) {
	    var canvas = this.refs.canvas;
	    this._initialAlpha = position.x / canvas.offsetWidth;
	    this._setAlpha(this._initialAlpha);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the canvas with the current color
	   * @private
	   */
	
	
	  AlphaComponent.prototype._renderCanvas = function _renderCanvas() {
	    var canvas = this.refs.canvas;
	    var context = canvas.getContext('2d');
	
	    canvas.width = canvas.offsetWidth;
	    canvas.height = canvas.offsetHeight;
	
	    // Fill with pattern
	    var pattern = context.createPattern(this._transparentPatternCanvas, 'repeat');
	    context.fillStyle = pattern;
	    context.fillRect(0, 0, canvas.width, canvas.height);
	
	    // Create gradient
	    var gradient = context.createLinearGradient(0, 0, canvas.width, canvas.height);
	    var color = this._value.clone();
	    color.a = 0;
	    gradient.addColorStop(0, color.toRGBA());
	    gradient.addColorStop(1, this._value.toHex());
	
	    // Draw gradient
	    context.fillStyle = gradient;
	    context.fillRect(0, 0, canvas.width, canvas.height);
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  AlphaComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:colorPicker $e:alpha' },
	      _globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onKnobDragStart,
	          onDrag: this._onKnobDrag },
	        _globals.ReactBEM.createElement(
	          'div',
	          null,
	          _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
	          _globals.ReactBEM.createElement('div', {
	            bem: 'e:knob $b:knob m:transparent',
	            ref: 'knob',
	            style: this._getKnobStyle() })
	        )
	      )
	    );
	  };
	
	  return AlphaComponent;
	}(_globals.BaseComponent);
	
	exports.default = AlphaComponent;

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var HueComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(HueComponent, _BaseComponent);
	
	  function HueComponent() {
	    (0, _classCallCheck3.default)(this, HueComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onKnobDrag', '_onKnobDragStart');
	
	    _this._value = _this.props.initialValue.clone();
	    var hsvArr = _this._value.toHSV();
	    var h = hsvArr[0];
	    var s = hsvArr[1];
	    var v = hsvArr[2];
	    _this._hsvColor = { h: h, s: s, v: v };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after this component has been mounted
	   */
	
	
	  HueComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	    this._renderCanvas();
	  };
	
	  /**
	   * Gets called when this component receives new props or state
	   * @param  {Object} newProps
	   * @return {Boolean}
	   */
	
	
	  HueComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(newProps) {
	    var initialValue = newProps.initialValue;
	
	    if (initialValue !== this._value) {
	      this._value = initialValue.clone();
	      var hsvArr = this._value.toHSV();
	      var h = hsvArr[0];
	      var s = hsvArr[1];
	      var v = hsvArr[2];
	      this._hsvColor = { h: h, s: s, v: v };
	      this._renderCanvas();
	      return true;
	    }
	    return false;
	  };
	
	  // -------------------------------------------------------------------------- DRAG EVENTS
	
	  /**
	   * Gets called when the user starts dragging the knob
	   * @param  {Vector2} position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  HueComponent.prototype._onKnobDragStart = function _onKnobDragStart(position, e) {
	    if (e.target === this.refs.knob) {
	      this._initialHue = this._hsvColor.h;
	    } else {
	      this._setValueFromPosition(position);
	    }
	  };
	
	  /**
	   * Gets called while the user drags the knob
	   * @param  {Vector2} offset
	   * @param  {Event} e
	   * @private
	   */
	
	
	  HueComponent.prototype._onKnobDrag = function _onKnobDrag(offset, e) {
	    var canvas = this.refs.canvas;
	
	    var canvasHeight = canvas.offsetHeight;
	
	    var hueChange = offset.y / canvasHeight;
	    this._setHue(this._initialHue + hueChange);
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the style object for the knob
	   * @return {Object}
	   * @private
	   */
	
	
	  HueComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    return {
	      left: '50%',
	      top: (this._hsvColor.h * 100).toFixed(2) + '%'
	    };
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Sets the hue value of the color to the given one
	   * @param {Number} h
	   * @private
	   */
	
	
	  HueComponent.prototype._setHue = function _setHue(h) {
	    var _hsvColor = this._hsvColor;
	    var s = _hsvColor.s;
	    var v = _hsvColor.v;
	
	    h = Math.min(1, Math.max(0, h));
	    s = Math.max(0.01, Math.min(s, 0.99));
	    v = Math.max(0.01, Math.min(v, 0.99));
	
	    this._value = _globals.Color.fromHSV(h, s, v, this._value.a);
	    this._hsvColor = { h: h, s: s, v: v };
	    this.forceUpdate();
	    this.props.onChange && this.props.onChange(this._value);
	  };
	
	  /**
	   * Sets the value from the given cursor position
	   * @param {Vector2} position
	   * @private
	   */
	
	
	  HueComponent.prototype._setValueFromPosition = function _setValueFromPosition(position) {
	    var canvas = this.refs.canvas;
	
	    this._initialHue = position.y / canvas.offsetHeight;
	    this._setHue(this._initialHue);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the hue colors to the canvas
	   * @private
	   */
	
	
	  HueComponent.prototype._renderCanvas = function _renderCanvas() {
	    var canvas = this.refs.canvas;
	
	    var context = canvas.getContext('2d');
	
	    canvas.width = canvas.offsetWidth;
	    canvas.height = canvas.offsetHeight;
	
	    for (var y = 0; y < canvas.height; y++) {
	      var ratio = y / canvas.height;
	      var color = _globals.Color.fromHSV(ratio, 1, 1);
	
	      context.strokeStyle = color.toRGBA();
	      context.beginPath();
	      context.moveTo(0, y);
	      context.lineTo(canvas.width, y);
	      context.stroke();
	    }
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  HueComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:colorPicker $e:hue' },
	      _globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onKnobDragStart,
	          onDrag: this._onKnobDrag },
	        _globals.ReactBEM.createElement(
	          'div',
	          null,
	          _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
	          _globals.ReactBEM.createElement('div', {
	            bem: 'e:knob $b:knob m:transparent',
	            ref: 'knob',
	            style: this._getKnobStyle() })
	        )
	      )
	    );
	  };
	
	  return HueComponent;
	}(_globals.BaseComponent);
	
	exports.default = HueComponent;

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _alphaComponent = __webpack_require__(167);
	
	var _alphaComponent2 = _interopRequireDefault(_alphaComponent);
	
	var _saturationComponent = __webpack_require__(170);
	
	var _saturationComponent2 = _interopRequireDefault(_saturationComponent);
	
	var _hueComponent = __webpack_require__(168);
	
	var _hueComponent2 = _interopRequireDefault(_hueComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ColorPickerOverlayComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ColorPickerOverlayComponent, _BaseComponent);
	
	  function ColorPickerOverlayComponent() {
	    (0, _classCallCheck3.default)(this, ColorPickerOverlayComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._value = _this.props.initialValue.clone();
	    var hsvArr = _this._value.toHSV();
	    var h = hsvArr[0];
	    var s = hsvArr[1];
	    var v = hsvArr[2];
	    _this._hsv = { h: h, s: s, v: v };
	
	    _this._bindAll('_onElementClick', '_onColorChange');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Catches clicks on the element and makes sure that no click event is triggered
	   * on the parent element
	   * @param  {Event} e
	   * @private
	   */
	
	
	  ColorPickerOverlayComponent.prototype._onElementClick = function _onElementClick(e) {
	    e.stopPropagation();
	  };
	
	  /**
	   * Gets called when the color changes
	   * @param  {Color} color
	   * @private
	   */
	
	
	  ColorPickerOverlayComponent.prototype._onColorChange = function _onColorChange(color) {
	    this._value = color;
	    this.props.onChange && this.props.onChange(color);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ColorPickerOverlayComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:colorPicker $e:overlay', onClick: this._onElementClick },
	      _globals.ReactBEM.createElement(_alphaComponent2.default, {
	        initialValue: this._value,
	        onChange: this._onColorChange
	      }),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:bottom' },
	        _globals.ReactBEM.createElement(_saturationComponent2.default, {
	          initialValue: this._value,
	          onChange: this._onColorChange
	        }),
	        _globals.ReactBEM.createElement(_hueComponent2.default, {
	          initialValue: this._value,
	          onChange: this._onColorChange
	        })
	      )
	    );
	  };
	
	  return ColorPickerOverlayComponent;
	}(_globals.BaseComponent);
	
	exports.default = ColorPickerOverlayComponent;

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var SaturationComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(SaturationComponent, _BaseComponent);
	
	  function SaturationComponent() {
	    (0, _classCallCheck3.default)(this, SaturationComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onKnobDrag', '_onKnobDragStart');
	
	    _this._value = _this.props.initialValue.clone();
	    var hsvArr = _this._value.toHSV();
	    var h = hsvArr[0];
	    var s = hsvArr[1];
	    var v = hsvArr[2];
	    _this._hsvColor = { h: h, s: s, v: v };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after this component has been mounted
	   */
	
	
	  SaturationComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	    this._renderCanvas();
	  };
	
	  /**
	   * Gets called when this component receives new props or state
	   * @param  {Object} newProps
	   * @return {Boolean}
	   */
	
	
	  SaturationComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(newProps) {
	    var initialValue = newProps.initialValue;
	
	    if (initialValue !== this._value) {
	      this._value = initialValue.clone();
	      var hsvArr = this._value.toHSV();
	      var h = hsvArr[0];
	      var s = hsvArr[1];
	      var v = hsvArr[2];
	      this._hsvColor = { h: h, s: s, v: v };
	      this._renderCanvas();
	      return true;
	    }
	    return false;
	  };
	
	  // -------------------------------------------------------------------------- DRAG EVENTS
	
	  /**
	   * Gets called when the user starts dragging the knob
	   * @param  {Vector} position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  SaturationComponent.prototype._onKnobDragStart = function _onKnobDragStart(position, e) {
	    if (e.target === this.refs.knob) {
	      this._initialValue = this._hsvColor.v;
	      this._initialSaturation = this._hsvColor.s;
	    } else {
	      this._setValuesFromPosition(position);
	    }
	  };
	
	  /**
	   * Gets called while the user drags the knob
	   * @param  {Vector2} offset
	   * @param  {Event} e
	   * @private
	   */
	
	
	  SaturationComponent.prototype._onKnobDrag = function _onKnobDrag(offset, e) {
	    var canvas = this.refs.canvas;
	
	    var canvasWidth = canvas.offsetWidth;
	    var canvasHeight = canvas.offsetHeight;
	
	    var saturationChange = offset.x / canvasWidth;
	    var valueChange = offset.y / canvasHeight * -1;
	
	    var h = this._hsvColor.h;
	
	    this._setHSV(h, this._initialSaturation + saturationChange, this._initialValue + valueChange);
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the style object for the knob
	   * @return {Object}
	   * @private
	   */
	
	
	  SaturationComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    var _hsvColor = this._hsvColor;
	    var s = _hsvColor.s;
	    var v = _hsvColor.v;
	
	
	    return {
	      left: (s * 100).toFixed(2) + '%',
	      top: ((1 - v) * 100).toFixed(2) + '%'
	    };
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Sets the HSV values of the color to the given values
	   * @param {Number} h
	   * @param {Number} s
	   * @param {Number} v
	   * @private
	   */
	
	
	  SaturationComponent.prototype._setHSV = function _setHSV(h, s, v) {
	    s = Math.max(0.01, Math.min(s, 0.99));
	    v = Math.max(0.01, Math.min(v, 0.99));
	    this._value = _globals.Color.fromHSV(h, s, v, this._value.a);
	    this._hsvColor = { h: h, s: s, v: v };
	
	    this.forceUpdate();
	    this.props.onChange && this.props.onChange(this._value);
	  };
	
	  /**
	   * Sets the values from the given cursor position
	   * @param {Vector2} position
	   * @private
	   */
	
	
	  SaturationComponent.prototype._setValuesFromPosition = function _setValuesFromPosition(position) {
	    var canvas = this.refs.canvas;
	
	    this._initialSaturation = position.x / canvas.offsetWidth;
	    this._initialValue = 1 - position.y / canvas.offsetHeight;
	
	    var h = this._hsvColor.h;
	
	    this._setHSV(h, this._initialSaturation, this._initialValue);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the current color to the canvas
	   * @private
	   */
	
	
	  SaturationComponent.prototype._renderCanvas = function _renderCanvas() {
	    var canvas = this.refs.canvas;
	
	    var context = canvas.getContext('2d');
	
	    canvas.width = canvas.offsetWidth;
	    canvas.height = canvas.offsetHeight;
	
	    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
	
	    for (var y = 0; y < canvas.height; y++) {
	      var value = (canvas.height - y) / canvas.height;
	      for (var x = 0; x < canvas.width; x++) {
	        var saturation = x / canvas.width;
	        var color = _globals.Color.fromHSV(this._hsvColor.h, saturation, value);
	        var r = color.r;
	        var g = color.g;
	        var b = color.b;
	        var a = color.a;
	
	
	        var index = (y * canvas.width + x) * 4;
	
	        imageData.data[index] = r * 255;
	        imageData.data[index + 1] = g * 255;
	        imageData.data[index + 2] = b * 255;
	        imageData.data[index + 3] = a * 255;
	      }
	    }
	
	    context.putImageData(imageData, 0, 0);
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  SaturationComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:colorPicker $e:saturation' },
	      _globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onKnobDragStart,
	          onDrag: this._onKnobDrag },
	        _globals.ReactBEM.createElement(
	          'div',
	          null,
	          _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' }),
	          _globals.ReactBEM.createElement('div', {
	            bem: 'e:knob $b:knob m:transparent',
	            ref: 'knob',
	            style: this._getKnobStyle() })
	        )
	      )
	    );
	  };
	
	  return SaturationComponent;
	}(_globals.BaseComponent);
	
	exports.default = SaturationComponent;

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	var _sliderOverlayComponent = __webpack_require__(66);
	
	var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);
	
	var _miniSliderComponent = __webpack_require__(192);
	
	var _miniSliderComponent2 = _interopRequireDefault(_miniSliderComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ITEMS = [{
	  identifier: 'brightness',
	  isAvailable: function isAvailable(editor) {
	    return editor.isToolEnabled('brightness');
	  },
	  defaultValue: 0,
	  valueMultiplier: 100,
	  valueOffset: 0
	}, {
	  identifier: 'saturation',
	  isAvailable: function isAvailable(editor) {
	    return editor.isToolEnabled('saturation');
	  },
	  defaultValue: 1,
	  valueMultiplier: 100,
	  valueOffset: -100
	}, {
	  identifier: 'contrast',
	  isAvailable: function isAvailable(editor) {
	    return editor.isToolEnabled('contrast');
	  },
	  defaultValue: 1,
	  valueMultiplier: 100,
	  valueOffset: -100
	}]; /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var AdjustmentsControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(AdjustmentsControlsComponent, _ControlsComponent);
	
	  function AdjustmentsControlsComponent() {
	    (0, _classCallCheck3.default)(this, AdjustmentsControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._bindAll('_onSliderValueChange');
	
	    var editor = _this.context.editor;
	
	    _this._operation = editor.getOrCreateOperation('adjustments');
	
	    _this.state = { selectedControls: null };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  AdjustmentsControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = this.getSharedState('operationExistedBefore');
	    var initialOptions = this.getSharedState('initialOptions');
	
	    if (!this._operation.optionsEqual(initialOptions)) {
	      editor.addHistory(this._operation, initialOptions, operationExistedBefore);
	    }
	
	    var defaultOptions = this._operation.getDefaultOptions();
	    if (this._operation.optionsEqual(defaultOptions)) {
	      editor.removeOperation(this._operation);
	    }
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the user changes the slider value
	   * @param  {Number} value
	   * @private
	   */
	
	
	  AdjustmentsControlsComponent.prototype._onSliderValueChange = function _onSliderValueChange(value) {
	    var selectedControls = this.state.selectedControls;
	    var identifier = selectedControls.identifier;
	    var valueMultiplier = selectedControls.valueMultiplier;
	    var valueOffset = selectedControls.valueOffset;
	
	    value = (value - valueOffset) / valueMultiplier;
	    this._operation.setOption(identifier, value);
	
	    var editor = this.context.editor;
	
	    editor.render();
	  };
	
	  /**
	   * Gets called when the user clicks one of the three buttons
	   * @param {Object} controlsItem
	   * @param {Event} e
	   * @private
	   */
	
	
	  AdjustmentsControlsComponent.prototype._onButtonClick = function _onButtonClick(controlsItem, e) {
	    this.setState({ selectedControls: controlsItem });
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Builds the props hash passed to the sliders
	   * @return {Object}
	   */
	
	
	  AdjustmentsControlsComponent.prototype._buildSliderProps = function _buildSliderProps(controls) {
	    var identifier = controls.identifier;
	    var defaultValue = controls.defaultValue;
	    var valueMultiplier = controls.valueMultiplier;
	    var valueOffset = controls.valueOffset;
	
	
	    var minValue = -1 * valueMultiplier;
	    var maxValue = 1 * valueMultiplier;
	    var value = this._operation ? this._operation.getOption(identifier) : defaultValue;
	
	    value *= valueMultiplier;
	    value += valueOffset;
	
	    return {
	      minValue: minValue, maxValue: maxValue, value: value,
	      valueUnit: '%',
	      positiveValuePrefix: '+',
	      label: this._t('controls.adjustments.' + identifier),
	      middleDot: true,
	      onChange: this._onSliderValueChange
	    };
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  AdjustmentsControlsComponent.prototype.renderOverlayControls = function renderOverlayControls() {
	    var selectedControls = this.state.selectedControls;
	
	    if (!selectedControls) return;
	
	    var sliderProps = this._buildSliderProps(selectedControls);
	    return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, sliderProps);
	  };
	
	  /**
	   * Renders the list items
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  AdjustmentsControlsComponent.prototype._renderListItems = function _renderListItems() {
	    var _this2 = this;
	
	    return ITEMS.filter(function (item) {
	      return item.isAvailable(_this2.context.editor);
	    }).map(function (item) {
	      var isSelected = _this2.state.selectedControls === item;
	      var className = isSelected ? 'is-active' : null;
	
	      var miniSlider = void 0;
	      if (!isSelected && false) {
	        // Mini sliders temporarily disabled
	        var sliderProps = _this2._buildSliderProps(item);
	        miniSlider = _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: 'b:adjustmentsControls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:miniSlider' },
	            _globals.ReactBEM.createElement(_miniSliderComponent2.default, sliderProps)
	          )
	        );
	      }
	
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: item.identifier },
	        _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: '$b:controls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: '$e:button m:withLabel', onClick: _this2._onButtonClick.bind(_this2, item), className: className },
	            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath('controls/adjustments/' + item.identifier + '.png', true) }),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:label' },
	              _this2._t('controls.adjustments.' + item.identifier)
	            ),
	            miniSlider
	          )
	        )
	      );
	    });
	  };
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  AdjustmentsControlsComponent.prototype.renderControls = function renderControls() {
	    var listItems = this._renderListItems();
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        null,
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    );
	  };
	
	  return AdjustmentsControlsComponent;
	}(_controlsComponent2.default);
	
	exports.default = AdjustmentsControlsComponent;

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _adjustmentsControlsComponent = __webpack_require__(171);
	
	var _adjustmentsControlsComponent2 = _interopRequireDefault(_adjustmentsControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The adjustments controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var AdjustmentsControls = function (_Controls) {
	  (0, _inherits3.default)(AdjustmentsControls, _Controls);
	
	  function AdjustmentsControls() {
	    (0, _classCallCheck3.default)(this, AdjustmentsControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {AdjustmentsControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  AdjustmentsControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('adjustments');
	    var operation = editor.getOrCreateOperation('adjustments');
	    var initialOptions = operation.serializeOptions();
	
	    this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @override
	   * @ignore
	   */
	
	
	  AdjustmentsControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('brightness') || editor.isToolEnabled('saturation') || editor.isToolEnabled('contrast');
	  };
	
	  return AdjustmentsControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	AdjustmentsControls.controlsComponent = _adjustmentsControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	AdjustmentsControls.identifier = 'adjustments';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	AdjustmentsControls.iconPath = 'controls/overview/adjustments.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	AdjustmentsControls.languageKey = 'controls.overview.adjustments';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	AdjustmentsControls.defaultOptions = {};
	
	exports.default = AdjustmentsControls;

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _sliderComponent = __webpack_require__(39);
	
	var _sliderComponent2 = _interopRequireDefault(_sliderComponent);
	
	var _colorPickerComponent = __webpack_require__(65);
	
	var _colorPickerComponent2 = _interopRequireDefault(_colorPickerComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BorderControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(BorderControlsComponent, _ControlsComponent);
	
	  function BorderControlsComponent() {
	    (0, _classCallCheck3.default)(this, BorderControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._hasDoneButton = true;
	    _this._operation = _this.getSharedState('operation');
	    _this._bindAll('_onThicknessUpdate', '_onColorUpdate');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the thickness has been updated
	   * @param  {Number} thickness
	   * @private
	   */
	
	
	  BorderControlsComponent.prototype._onThicknessUpdate = function _onThicknessUpdate(thickness) {
	    this._operation.setThickness(thickness);
	
	    var editor = this.context.editor;
	
	    editor.render();
	  };
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  BorderControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    var editor = this.context.editor;
	
	    if (!this.getSharedState('operationExistedBefore')) {
	      editor.removeOperation(this._operation);
	    } else {
	      this._operation.set(this.getSharedState('initialOptions'));
	    }
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	    editor.render();
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the color has changed
	   * @param  {Color} color
	   * @private
	   */
	
	
	  BorderControlsComponent.prototype._onColorUpdate = function _onColorUpdate(color) {
	    this._operation.setColor(color);
	
	    var editor = this.context.editor;
	
	    editor.render();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  BorderControlsComponent.prototype.renderControls = function renderControls() {
	    var editor = this.context.editor;
	
	    var finalDimensions = editor.getFinalDimensions();
	
	    var minThickness = 0;
	    var maxThickness = Math.round(Math.min(finalDimensions.x, finalDimensions.y) / 2);
	    var currentWidth = this._operation.getThickness();
	
	    return [_globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:slider' },
	      _globals.ReactBEM.createElement(_sliderComponent2.default, {
	        style: 'large',
	        minValue: minThickness,
	        maxValue: maxThickness,
	        valueUnit: 'px',
	        middleDot: false,
	        label: this._t('controls.border.thickness'),
	        onChange: this._onThicknessUpdate,
	        value: currentWidth })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:colorPicker' },
	      _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
	        initialValue: this._operation.getColor().clone(),
	        onChange: this._onColorUpdate })
	    )];
	  };
	
	  return BorderControlsComponent;
	}(_controlsComponent2.default);
	
	exports.default = BorderControlsComponent;

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _borderControlsComponent = __webpack_require__(173);
	
	var _borderControlsComponent2 = _interopRequireDefault(_borderControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The border controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BorderControls = function (_Controls) {
	  (0, _inherits3.default)(BorderControls, _Controls);
	
	  function BorderControls() {
	    (0, _classCallCheck3.default)(this, BorderControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {BorderControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  BorderControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var inputDimensions = editor.getInputDimensions();
	    var defaultThickness = Math.min(inputDimensions.x, inputDimensions.y) * 0.05;
	
	    var operationExistedBefore = editor.operationExists('border');
	    var operation = editor.getOrCreateOperation('border', {
	      thickness: defaultThickness
	    });
	    var initialOptions = {
	      color: operation.getColor().clone(),
	      thickness: operation.getThickness()
	    };
	
	    this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
	
	    editor.setZoom('auto', function () {
	      editor.disableFeatures('zoom', 'drag');
	    });
	  };
	
	  /**
	   * Gets called when the user leaves these controls
	   * @this {StickersControlsComponent}
	   * @override
	   * @ignore
	   */
	
	
	  BorderControls.onExit = function onExit() {
	    var editor = this.context.editor;
	
	    var operation = this.getSharedState('operation');
	
	    editor.addHistory(operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
	
	    operation.setEnabled(true);
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	    editor.render();
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	
	  BorderControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('border');
	  };
	
	  return BorderControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	BorderControls.controlsComponent = _borderControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	BorderControls.identifier = 'border';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	BorderControls.iconPath = 'controls/overview/border.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	BorderControls.languageKey = 'controls.overview.border';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	BorderControls.defaultOptions = {};
	
	exports.default = BorderControls;

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _canvasControlsComponent = __webpack_require__(35);
	
	var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BrushCanvasControlsComponent = function (_CanvasControlsCompon) {
	  (0, _inherits3.default)(BrushCanvasControlsComponent, _CanvasControlsCompon);
	
	  function BrushCanvasControlsComponent() {
	    (0, _classCallCheck3.default)(this, BrushCanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _CanvasControlsCompon.call.apply(_CanvasControlsCompon, [this].concat(args)));
	
	    _this._drawing = false;
	    _this._bindAll('_onMouseEnter', '_onMouseLeave', '_onMouseMove', '_onMouseMoveOnCanvas', '_onMouseDown', '_onMouseUp', '_onOperationUpdated');
	
	    _this.state = {
	      cursorVisible: false,
	      cursorPosition: new _globals.Vector2()
	    };
	
	    _this._events = (0, _defineProperty3.default)({}, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  BrushCanvasControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    _CanvasControlsCompon.prototype.componentDidMount.call(this);
	
	    this._containerBoundingRect = this.refs.container.getBoundingClientRect();
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation has been updated
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onOperationUpdated = function _onOperationUpdated(operation) {
	    if (operation === this.getSharedState('operation')) {
	      this.forceUpdate();
	    }
	  };
	
	  /**
	   * Gets called when the user enters the canvas
	   * @param {Event} event
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onMouseEnter = function _onMouseEnter(e) {
	    var cursorPosition = this._getCursorPosition(e);
	    this.setState({
	      cursorVisible: true,
	      cursorPosition: cursorPosition
	    });
	  };
	
	  /**
	   * Gets called when the user leaves the canvas
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onMouseLeave = function _onMouseLeave() {
	    this.setState({
	      cursorVisible: false
	    });
	  };
	
	  /**
	   * Gets called while the user moves the mouse
	   * @param {Event} e
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onMouseMove = function _onMouseMove(e) {
	    if (this._drawing) {
	      var cursorPosition = this._getCursorPosition(e);
	
	      var zoom = this.context.editor.getZoom();
	      this._currentPath.addControlPoint(cursorPosition.clone().divide(zoom));
	
	      var editor = this.context.editor;
	
	      editor.render();
	    }
	  };
	
	  /**
	   * Gets called while the user moves the mouse on top of the canvas. Updates
	   * the cursor cursor position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onMouseMoveOnCanvas = function _onMouseMoveOnCanvas(e) {
	    var cursorPosition = this._getCursorPosition(e);
	    this.setState({ cursorPosition: cursorPosition });
	  };
	
	  // -------------------------------------------------------------------------- DRAWING
	
	  /**
	   * Gets called when the user presses a mouse button
	   * @param  {Event} e
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onMouseDown = function _onMouseDown(e) {
	    e.preventDefault();
	
	    var zoom = this.context.editor.getZoom();
	    var cursorPosition = this._getCursorPosition(e);
	
	    var operation = this.getSharedState('operation');
	
	    this._optionsBeforeDraw = operation.serializeOptions();
	    this._operationExistedBeforeDraw = !!operation.getPaths().length;
	
	    var thickness = operation.getThickness();
	    var color = operation.getColor();
	    this._drawing = true;
	    this._currentPath = operation.createPath(thickness, color);
	    this._currentPath.addControlPoint(cursorPosition.clone().divide(zoom));
	
	    var editor = this.context.editor;
	
	    editor.render();
	
	    document.addEventListener('mousemove', this._onMouseMove);
	    document.addEventListener('touchmove', this._onMouseMove);
	    document.addEventListener('mouseup', this._onMouseUp);
	    document.addEventListener('touchend', this._onMouseUp);
	  };
	
	  /**
	   * Gets called when the user releases a mouse button
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._onMouseUp = function _onMouseUp() {
	    this._currentPath = null;
	    this._drawing = false;
	
	    var editor = this.context.editor;
	
	    editor.addHistory(this.getSharedState('operation'), this._optionsBeforeDraw, this._operationExistedBeforeDraw);
	
	    document.removeEventListener('mousemove', this._onMouseMove);
	    document.removeEventListener('touchmove', this._onMouseMove);
	    document.removeEventListener('mouseup', this._onMouseUp);
	    document.removeEventListener('touchend', this._onMouseUp);
	  };
	
	  /**
	   * Draws the brushes
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._drawBrushes = function _drawBrushes() {
	    var canvas = this.refs.canvas;
	    var editor = this.context.editor;
	
	    var sdk = editor.getSDK();
	
	    this.getSharedState('operation').renderBrushCanvas(sdk, canvas);
	  };
	
	  // -------------------------------------------------------------------------- CURSOR
	
	  /**
	   * Returns the cursor position for the given event
	   * @param  {Event} event
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._getCursorPosition = function _getCursorPosition(event) {
	    var position = _globals.Utils.getEventPosition(event);
	    var boundingRect = this._containerBoundingRect;
	    return position.subtract(boundingRect.left, boundingRect.top);
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the container style
	   * @return {Object}
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._getContainerStyle = function _getContainerStyle() {
	    var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds();
	
	    var x = _context$editor$getSD.x;
	    var y = _context$editor$getSD.y;
	    var width = _context$editor$getSD.width;
	    var height = _context$editor$getSD.height;
	
	    return {
	      left: x,
	      top: y,
	      width: width, height: height
	    };
	  };
	
	  /**
	   * Returns the cursor's style object
	   * @return {Object}
	   * @private
	   */
	
	
	  BrushCanvasControlsComponent.prototype._getCursorStyle = function _getCursorStyle() {
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    var operation = this.getSharedState('operation');
	    var thickness = operation.getThickness() * zoom;
	    var color = operation.getColor();
	
	    var cursorPosition = this.state.cursorPosition;
	
	    return {
	      left: cursorPosition.x,
	      top: cursorPosition.y,
	      width: thickness,
	      height: thickness,
	      background: color.toRGBA(),
	      marginLeft: thickness * -0.5,
	      marginTop: thickness * -0.5
	    };
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  BrushCanvasControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var cursorClass = this.state.cursorVisible ? 'is-visible' : null;
	    return _globals.ReactBEM.createElement(
	      'div',
	      {
	        bem: 'b:canvasControls e:container m:full',
	        ref: 'container',
	        style: this._getContainerStyle(),
	        onMouseEnter: this._onMouseEnter,
	        onMouseLeave: this._onMouseLeave,
	        onMouseDown: this._onMouseDown,
	        onTouchStart: this._onMouseDown,
	        onMouseMove: this._onMouseMoveOnCanvas,
	        onTouchMove: this._onMouseMoveOnCanvas },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:brushCanvasControls' },
	        _globals.ReactBEM.createElement('div', { bem: 'e:cursor', className: cursorClass, style: this._getCursorStyle() }),
	        _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas' })
	      )
	    );
	  };
	
	  return BrushCanvasControlsComponent;
	}(_canvasControlsComponent2.default);
	
	exports.default = BrushCanvasControlsComponent;

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _sliderComponent = __webpack_require__(39);
	
	var _sliderComponent2 = _interopRequireDefault(_sliderComponent);
	
	var _colorPickerComponent = __webpack_require__(65);
	
	var _colorPickerComponent2 = _interopRequireDefault(_colorPickerComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var BrushControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(BrushControlsComponent, _ControlsComponent);
	
	  function BrushControlsComponent() {
	    var _this$_events;
	
	    (0, _classCallCheck3.default)(this, BrushControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._hasDoneButton = false;
	    _this._operation = _this.getSharedState('operation');
	    _this._brushOptions = {
	      thickness: _this._operation.getThickness(),
	      color: _this._operation.getColor().clone()
	    };
	
	    _this._bindAll('_onThicknessUpdated', '_onColorUpdated', '_onOperationUpdated', '_onOperationRemoved');
	
	    _this.state = {
	      thicknessControlsEnabled: false
	    };
	
	    _this._events = (_this$_events = {}, (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  BrushControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    _ControlsComponent.prototype.componentDidMount.call(this);
	
	    var editor = this.context.editor;
	
	    editor.setZoom('auto');
	    editor.disableFeatures('zoom', 'drag');
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation has been removed
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  BrushControlsComponent.prototype._onOperationRemoved = function _onOperationRemoved(operation) {
	    if (operation !== this._operation) return;
	    if (this._backButtonClicked) return;
	
	    // Operation can be removed by the undo button. We need
	    // to make sure we re-create the operation for the lifetime
	    // of this control
	    var editor = this.context.editor;
	
	    var newOperation = editor.getOrCreateOperation('brush', {
	      thickness: this._brushOptions.thickness,
	      color: this._brushOptions.color.clone()
	    });
	    this._operation = newOperation;
	    this.setSharedState({
	      operation: newOperation,
	      operationExistedBefore: false,
	      initialOptions: {}
	    });
	  };
	
	  /**
	   * Gets called when an operation has been updated
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  BrushControlsComponent.prototype._onOperationUpdated = function _onOperationUpdated(operation) {
	    if (operation === this._operation) {
	      this.forceUpdate();
	    }
	  };
	
	  /**
	   * Gets called when the thickness has been updated
	   * @param {Number} thickness
	   * @private
	   */
	
	
	  BrushControlsComponent.prototype._onThicknessUpdated = function _onThicknessUpdated(thickness) {
	    this._operation.setThickness(thickness);
	    this._brushOptions.thickness = thickness;
	  };
	
	  /**
	   * Gets called when the color has been updated
	   * @param  {Color} color
	   * @private
	   */
	
	
	  BrushControlsComponent.prototype._onColorUpdated = function _onColorUpdated(color) {
	    this._operation.setColor(color);
	    this._brushOptions.color = color.clone();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  BrushControlsComponent.prototype.renderControls = function renderControls() {
	    var editor = this.context.editor;
	
	    var finalDimensions = editor.getFinalDimensions();
	
	    var minThickness = 1;
	    var maxThickness = Math.round(Math.min(finalDimensions.x, finalDimensions.y) / 2);
	    var currentWidth = this._brushOptions.thickness;
	
	    return [_globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:slider' },
	      _globals.ReactBEM.createElement(_sliderComponent2.default, {
	        style: 'large',
	        minValue: minThickness,
	        maxValue: maxThickness,
	        valueUnit: 'px',
	        middleDot: false,
	        label: this._t('controls.brush.thickness'),
	        onChange: this._onThicknessUpdated,
	        value: currentWidth })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:colorPicker' },
	      _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
	        initialValue: this._brushOptions.color.clone(),
	        onChange: this._onColorUpdated })
	    )];
	  };
	
	  return BrushControlsComponent;
	}(_controlsComponent2.default);
	
	exports.default = BrushControlsComponent;

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _brushControlsComponent = __webpack_require__(176);
	
	var _brushControlsComponent2 = _interopRequireDefault(_brushControlsComponent);
	
	var _brushCanvasControlsComponent = __webpack_require__(175);
	
	var _brushCanvasControlsComponent2 = _interopRequireDefault(_brushCanvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The brush controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	
	var BrushControls = function (_Controls) {
	  (0, _inherits3.default)(BrushControls, _Controls);
	
	  function BrushControls() {
	    (0, _classCallCheck3.default)(this, BrushControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {BrushControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  BrushControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var finalDimensions = editor.getSDK().getFinalDimensions();
	    var thickness = Math.max(finalDimensions.x, finalDimensions.y) * 0.05;
	
	    var operationExistedBefore = editor.operationExists('brush');
	    var operation = editor.getOrCreateOperation('brush', { thickness: thickness });
	    var initialOptions = { paths: operation.getPaths().slice() };
	    this.setSharedState({
	      operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions,
	      initialThickness: thickness
	    });
	  };
	
	  /**
	   * Gets called when the user leaves these controls
	   * @this {StickersControlsComponent}
	   * @override
	   * @ignore
	   */
	
	
	  BrushControls.onExit = function onExit() {
	    var editor = this.context.editor;
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @override
	   * @ignore
	   */
	
	
	  BrushControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('brush');
	  };
	
	  return BrushControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	BrushControls.controlsComponent = _brushControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	BrushControls.canvasControlsComponent = _brushCanvasControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	BrushControls.identifier = 'brush';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	BrushControls.iconPath = 'controls/overview/brush.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	BrushControls.languageKey = 'controls.overview.brush';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	BrushControls.defaultOptions = {};
	
	exports.default = BrushControls;

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	var _canvasControlsComponent = __webpack_require__(35);
	
	var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MIN_DIMENSIONS = new _globals.Vector2(50, 50); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var CropCanvasControlsComponent = function (_CanvasControlsCompon) {
	  (0, _inherits3.default)(CropCanvasControlsComponent, _CanvasControlsCompon);
	
	  function CropCanvasControlsComponent() {
	    (0, _classCallCheck3.default)(this, CropCanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _CanvasControlsCompon.call.apply(_CanvasControlsCompon, [this].concat(args)));
	
	    _this._bindAll('_onCenterDragStart', '_onCenterDrag');
	
	    _this._operation = _this.getSharedState('operation');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- CENTER DRAGGING
	
	  /**
	   * Gets called when the user stars dragging the center
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._onCenterDragStart = function _onCenterDragStart() {
	    this._initialStart = this.getSharedState('start').clone();
	    this._initialEnd = this.getSharedState('end').clone();
	    this._initialCropSize = this._initialEnd.clone().subtract(this._initialStart);
	  };
	
	  /**
	   * Gets called while the user drags the center
	   * @param {Vector2} offset
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._onCenterDrag = function _onCenterDrag(offset) {
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	    var cropDifference = offset.clone().divide(outputDimensions);
	
	    var minStart = new _globals.Vector2(0, 0);
	    var maxStart = new _globals.Vector2(1, 1).subtract(this._initialCropSize);
	
	    var newStart = this._initialStart.clone().add(cropDifference).clamp(minStart, maxStart);
	    var newEnd = newStart.clone().add(this._initialCropSize);
	
	    this.setSharedState({ start: newStart, end: newEnd });
	  };
	
	  // -------------------------------------------------------------------------- KNOB DRAGGING
	
	  /**
	   * Gets called when the user starts dragging a knob
	   * @param {String} optionName
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._onKnobDragStart = function _onKnobDragStart(optionName) {
	    this._currentDragOption = optionName;
	
	    this._initialValues = {
	      start: this.getSharedState('start').clone(),
	      end: this.getSharedState('end').clone()
	    };
	  };
	
	  /**
	   * Gets called while the user drags a knob
	   * @param {String} optionName
	   * @param {Vector2} offset
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._onKnobDrag = function _onKnobDrag(optionName, offset) {
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	    var ratio = this._operation._ratio || '*';
	
	    var newSize = this._initialValues.end.clone().subtract(this._initialValues.start).multiply(outputDimensions);
	
	    // Calculate max size and new size
	    var maxSize = void 0;
	    if (optionName === 'start') {
	      newSize.subtract(offset);
	      maxSize = this._initialValues.end.clone().multiply(outputDimensions);
	    } else if (optionName === 'end') {
	      newSize.add(offset);
	      maxSize = new _globals.Vector2(1, 1).subtract(this._initialValues.start).multiply(outputDimensions);
	    }
	
	    newSize.x = Math.min(Math.max(MIN_DIMENSIONS.x, newSize.x), maxSize.x);
	    if (ratio !== '*') {
	      newSize.y = newSize.x / ratio;
	    }
	    newSize.y = Math.min(Math.max(MIN_DIMENSIONS.y, newSize.y), maxSize.y);
	    if (ratio !== '*') {
	      newSize.x = newSize.y * ratio;
	    }
	
	    if (optionName === 'start') {
	      var newStart = this._initialValues.end.clone().subtract(newSize.clone().divide(outputDimensions));
	      this.setSharedState({ start: newStart });
	    } else if (optionName === 'end') {
	      var newEnd = this._initialValues.start.clone().add(newSize.clone().divide(outputDimensions));
	      this.setSharedState({ end: newEnd });
	    }
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Returns the dimensions according to the current crop dimensions
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._calculateDimensions = function _calculateDimensions() {
	    var editor = this.context.editor;
	
	    var start = this.getSharedState('start');
	    var end = this.getSharedState('end');
	
	    return end.clone().subtract(start).multiply(editor.getInputDimensions()).round();
	  };
	
	  // -------------------------------------------------------------------------- RESIZING / STYLING
	
	  /**
	   * Returns the container style
	   * @return {Object}
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._getContainerStyle = function _getContainerStyle() {
	    var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds();
	
	    var x = _context$editor$getSD.x;
	    var y = _context$editor$getSD.y;
	    var width = _context$editor$getSD.width;
	    var height = _context$editor$getSD.height;
	
	    return {
	      left: x,
	      top: y,
	      width: Math.ceil(width),
	      height: Math.ceil(height)
	    };
	  };
	
	  /**
	   * Returns the styles (width / height) for the crop areas that define the
	   * crop size
	   * @return {Object}
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._getAreaStyles = function _getAreaStyles() {
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	
	    var start = this.getSharedState('start').clone().multiply(outputDimensions).floor();
	    var end = this.getSharedState('end').clone().multiply(outputDimensions).ceil();
	    var size = end.clone().subtract(start);
	
	    return {
	      topLeft: this._getDimensionsStyles(start.x, start.y),
	      topCenter: this._getDimensionsStyles(size.x, start.y),
	      centerLeft: this._getDimensionsStyles(start.x, size.y),
	      center: this._getDimensionsStyles(size.x, size.y)
	    };
	  };
	
	  /**
	   * Returns the dimensions style (width / height) for the given dimensions
	   * @param {Number} x
	   * @param {Number} y
	   * @return {Object}
	   * @private
	   */
	
	
	  CropCanvasControlsComponent.prototype._getDimensionsStyles = function _getDimensionsStyles(x, y) {
	    // Table cells and rows can't have a width / height of 0
	    return {
	      width: Math.max(1, x),
	      height: Math.max(1, y)
	    };
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  CropCanvasControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var areaStyles = this._getAreaStyles();
	    var dimensions = this._calculateDimensions();
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:canvasControls e:container m:full', ref: 'container', style: this._getContainerStyle() },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:cropCanvasControls' },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:row' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark', style: areaStyles.topLeft },
	            ' '
	          ),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark', style: areaStyles.topCenter },
	            ' '
	          ),
	          _globals.ReactBEM.createElement('div', { bem: 'e:cell m:dark' })
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:row' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark', style: areaStyles.centerLeft },
	            ' '
	          ),
	          _globals.ReactBEM.createElement(
	            _draggableComponent2.default,
	            {
	              onStart: this._onCenterDragStart,
	              onDrag: this._onCenterDrag },
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:cell m:bordered', style: areaStyles.center },
	              _globals.ReactBEM.createElement(
	                _draggableComponent2.default,
	                {
	                  onStart: this._onKnobDragStart.bind(this, 'start'),
	                  onDrag: this._onKnobDrag.bind(this, 'start') },
	                _globals.ReactBEM.createElement(
	                  'div',
	                  { bem: 'e:knob m:topLeft $b:knob' },
	                  _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
	                )
	              ),
	              _globals.ReactBEM.createElement(
	                'div',
	                { bem: 'e:dimensions' },
	                dimensions.x,
	                ' x ',
	                dimensions.y
	              ),
	              _globals.ReactBEM.createElement(
	                _draggableComponent2.default,
	                {
	                  onStart: this._onKnobDragStart.bind(this, 'end'),
	                  onDrag: this._onKnobDrag.bind(this, 'end') },
	                _globals.ReactBEM.createElement(
	                  'div',
	                  { bem: 'e:knob m:bottomRight $b:knob' },
	                  _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
	                )
	              )
	            )
	          ),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark' },
	            ' '
	          )
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:row' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark' },
	            ' '
	          ),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark' },
	            ' '
	          ),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell m:dark' },
	            ' '
	          )
	        )
	      )
	    );
	  };
	
	  return CropCanvasControlsComponent;
	}(_canvasControlsComponent2.default);
	
	exports.default = CropCanvasControlsComponent;

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// Specifies the default distance to the border
	// when selecting a ratio
	var PADDING = 0.1; /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var OrientationControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(OrientationControlsComponent, _ControlsComponent);
	
	  function OrientationControlsComponent() {
	    (0, _classCallCheck3.default)(this, OrientationControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._hasDoneButton = true;
	    _this._bindAll('_selectRatio');
	
	    _this._operation = _this.getSharedState('operation');
	
	    _this.state = { ratio: null };
	    _this._initRatios();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- INITIALIZATION
	
	  /**
	   * Initializes the available ratios
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._initRatios = function _initRatios() {
	    var _props$options = this.props.options;
	    var additionalRatios = _props$options.additionalRatios;
	    var replaceRatios = _props$options.replaceRatios;
	    var selectableRatios = _props$options.selectableRatios;
	
	    additionalRatios = additionalRatios || [];
	
	    this._ratios = _globals.Constants.DEFAULTS.CROP_RATIOS;
	    if (replaceRatios) {
	      this._ratios = additionalRatios;
	    } else {
	      this._ratios = this._ratios.concat(additionalRatios);
	    }
	
	    if (selectableRatios && selectableRatios.length) {
	      this._ratios = _globals.Utils.select(this._ratios, selectableRatios, function (r) {
	        return r.name;
	      });
	    }
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  OrientationControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    _ControlsComponent.prototype.componentDidMount.call(this);
	
	    if (!this.getSharedState('operationExistedBefore')) {
	      // Select first ratio as default (for now)
	      this._selectInitialRatio();
	    }
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    var editor = this.context.editor;
	
	
	    if (this.getSharedState('operationExistedBefore')) {
	      var initialOptions = this.getSharedState('initialOptions');
	      this._operation.set(initialOptions);
	    } else {
	      editor.removeOperation(this._operation);
	    }
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the user clicks the done button
	   * @param {Event} e
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onDoneClick = function _onDoneClick(e) {
	    var editor = this.context.editor;
	
	
	    var newOptions = {
	      start: this.getSharedState('start'),
	      end: this.getSharedState('end')
	    };
	    var initialOptions = this.getSharedState('initialOptions');
	
	    var optionsChanged = !newOptions.start.equals(initialOptions.start) || !newOptions.end.equals(initialOptions.end);
	
	    // Update operation options
	    this._operation.set(newOptions);
	
	    if (optionsChanged) {
	      editor.addHistory(this._operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
	    }
	
	    // Enable zoom and drag again
	    editor.enableFeatures('zoom', 'drag');
	
	    // Zoom to auto again
	    editor.setZoom('auto');
	
	    _ControlsComponent.prototype._onDoneClick.call(this, e);
	  };
	
	  // -------------------------------------------------------------------------- RATIO HANDLING
	
	  /**
	   * Selects the initial ratio
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._selectInitialRatio = function _selectInitialRatio() {
	    var selectedRatio = null;
	
	    // 1. Selected ratio stored in operation
	    var operationRatio = this._operation._ratio;
	    if (operationRatio) {
	      var matchingRatios = this._ratios.filter(function (ratio) {
	        return ratio.ratio === operationRatio;
	      });
	      selectedRatio = matchingRatios[0];
	    }
	
	    // 2. First ratio with `selected` flag
	    if (!selectedRatio) {
	      var selectedRatios = this._ratios.filter(function (ratio) {
	        return ratio.selected;
	      });
	      selectedRatio = selectedRatios.pop();
	    }
	
	    // 3. First ratio
	    if (!selectedRatio) {
	      selectedRatio = this._ratios[0];
	    }
	
	    return this._selectRatio(selectedRatio);
	  };
	
	  /**
	   * Selects the given ratio
	   * @param {String} ratio
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._selectRatio = function _selectRatio(ratio) {
	    this._setDefaultOptionsForRatio(ratio);
	    this._operation._ratio = ratio.ratio;
	    this.setSharedState({ ratio: ratio });
	  };
	
	  /**
	   * Sets the default options (start / end) for the given ratio
	   * @param {Object} ratio
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._setDefaultOptionsForRatio = function _setDefaultOptionsForRatio(_ref) {
	    var ratio = _ref.ratio;
	    var name = _ref.name;
	    var editor = this.context.editor;
	
	    var start = new _globals.Vector2();
	    var end = new _globals.Vector2();
	
	    if (ratio === '*') {
	      start = new _globals.Vector2(PADDING, PADDING);
	      end = new _globals.Vector2(1, 1).subtract(PADDING);
	    } else {
	      var outputDimensions = editor.getOutputDimensions();
	      var canvasRatio = outputDimensions.x / outputDimensions.y;
	      if (canvasRatio <= ratio) {
	        var height = 1 / outputDimensions.y * (outputDimensions.x / ratio * (1.0 - PADDING * 2));
	        start.set(PADDING, (1.0 - height) / 2);
	        end.set(1.0 - PADDING, 1 - start.y);
	      } else {
	        var width = 1 / outputDimensions.x * (ratio * outputDimensions.y * (1.0 - PADDING * 2));
	        start.set((1 - width) / 2, PADDING);
	        end.set(1 - start.x, 1.0 - PADDING);
	      }
	    }
	
	    this.setSharedState({ start: start, end: end });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  OrientationControlsComponent.prototype.renderControls = function renderControls() {
	    var _this2 = this;
	
	    var listItems = this._ratios.map(function (ratio) {
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: ratio.name },
	        _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: '$b:controls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: '$e:button m:withLabel',
	              className: _this2._operation._ratio === ratio.ratio ? 'is-active' : null,
	              onClick: _this2._selectRatio.bind(_this2, ratio) },
	            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath('controls/crop/' + ratio.name + '.png', true) }),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:label' },
	              _this2._t('controls.crop.' + ratio.name)
	            )
	          )
	        )
	      );
	    });
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        null,
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    );
	  };
	
	  return OrientationControlsComponent;
	}(_controlsComponent2.default);
	
	exports.default = OrientationControlsComponent;

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _cropControlsComponent = __webpack_require__(179);
	
	var _cropControlsComponent2 = _interopRequireDefault(_cropControlsComponent);
	
	var _cropCanvasControlsComponent = __webpack_require__(178);
	
	var _cropCanvasControlsComponent2 = _interopRequireDefault(_cropCanvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The crop controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var CropControls = function (_Controls) {
	  (0, _inherits3.default)(CropControls, _Controls);
	
	  function CropControls() {
	    (0, _classCallCheck3.default)(this, CropControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {CropControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  CropControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('crop');
	    var operation = editor.getOrCreateOperation('crop');
	    var initialOptions = {
	      start: operation.getStart().clone(),
	      end: operation.getEnd().clone()
	    };
	
	    this.setSharedState({
	      start: initialOptions.start.clone(),
	      end: initialOptions.end.clone(),
	      operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions
	    });
	
	    // Show the whole image
	    operation.set({
	      start: new _globals.Vector2(0, 0),
	      end: new _globals.Vector2(1, 1)
	    });
	
	    editor.setZoom('auto', function () {
	      // Disable zoom and drag while we're cropping
	      editor.disableFeatures('zoom', 'drag');
	    });
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	
	  CropControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('crop');
	  };
	
	  return CropControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	CropControls.controlsComponent = _cropControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	CropControls.canvasControlsComponent = _cropCanvasControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	CropControls.identifier = 'crop';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	CropControls.iconPath = 'controls/overview/crop.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	CropControls.languageKey = 'controls.overview.crop';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 * @property {Object[]} [additionalRatios = []]
	 * @property {Boolean} [replaceRatios = false]
	 * @property {String[]} [availableRatios = null]
	 */
	CropControls.defaultOptions = {};
	
	exports.default = CropControls;

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	var _categoryDropdownComponent = __webpack_require__(105);
	
	var _categoryDropdownComponent2 = _interopRequireDefault(_categoryDropdownComponent);
	
	var _sliderOverlayComponent = __webpack_require__(66);
	
	var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FilterControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(FilterControlsComponent, _ControlsComponent);
	
	  function FilterControlsComponent() {
	    (0, _classCallCheck3.default)(this, FilterControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._bindAll('_onItemClick', '_onOperationUpdated', '_onSliderValueChange', '_onCategoryChange');
	    _this._operation = _this.getSharedState('operation');
	
	    _this._events = (0, _defineProperty3.default)({}, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated);
	
	    _this._initFilters();
	
	    _this.state = {
	      category: 'all'
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- INITIALIZATION
	
	  /**
	   * Initializes the available filters
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._initFilters = function _initFilters() {
	    var _this2 = this;
	
	    this._categories = [{
	      name: 'retro',
	      filters: [_globals.SDK.Filters.CelsiusFilter, _globals.SDK.Filters.ChestFilter, _globals.SDK.Filters.FixieFilter, _globals.SDK.Filters.LeninFilter, _globals.SDK.Filters.PolaFilter, _globals.SDK.Filters.Pola669Filter]
	    }, {
	      name: 'bw',
	      filters: [_globals.SDK.Filters.BWFilter, _globals.SDK.Filters.BWHardFilter, _globals.SDK.Filters.X400Filter]
	    }, {
	      name: 'summer',
	      filters: [_globals.SDK.Filters.FrontFilter, _globals.SDK.Filters.MellowFilter, _globals.SDK.Filters.SemiredFilter, _globals.SDK.Filters.SunnyFilter, _globals.SDK.Filters.TexasFilter]
	    }, {
	      name: 'winter',
	      filters: [_globals.SDK.Filters.A15Filter, _globals.SDK.Filters.BreezeFilter, _globals.SDK.Filters.FridgeFilter, _globals.SDK.Filters.OrchidFilter, _globals.SDK.Filters.QuoziFilter]
	    }, {
	      name: 'special',
	      filters: [_globals.SDK.Filters.FoodFilter, _globals.SDK.Filters.GlamFilter, _globals.SDK.Filters.LomoFilter, _globals.SDK.Filters.GobblinFilter]
	    }];
	
	    var options = this.props.options;
	
	    // Should the categories passed in by the user replace the existing ones?
	
	    if (options.categories) {
	      if (options.replaceCategories) {
	        this._categories = options.categories;
	      } else {
	        this._categories = _globals.Utils.mergeCategories(this._categories, options.categories, 'filters');
	      }
	    }
	
	    // Remove filters that should not be selectable
	    if (options.selectableFilters) {
	      (function () {
	        var newCategories = [];
	        _this2._categories.forEach(function (category) {
	          var filters = category.filters.filter(function (f) {
	            return options.selectableFilters.indexOf(f.identifier) !== -1;
	          });
	          if (filters.length > 0) {
	            newCategories.push({
	              name: category.name,
	              filters: filters
	            });
	          }
	        });
	        _this2._categories = newCategories;
	      })();
	    }
	
	    var allCategory = {
	      name: 'all',
	      filters: this._categories.map(function (c) {
	        return c.filters;
	      }).reduce(function (a, b) {
	        return a.concat(b);
	      })
	    };
	    this._categories.unshift(allCategory);
	
	    // Build cat id => category hash
	    this._categoriesById = {};
	    this._categories.forEach(function (c) {
	      _this2._categoriesById[c.name] = c;
	    });
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the slider value has been changed
	   * @param {Number} value
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._onSliderValueChange = function _onSliderValueChange(value) {
	    this._operation.setIntensity(value / 100);
	
	    var editor = this.context.editor;
	
	    editor.render();
	  };
	
	  /**
	   * Gets called when the user switches the category
	   * @param  {Object} category
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._onCategoryChange = function _onCategoryChange(category) {
	    var _this3 = this;
	
	    this.setState({ category: category.name }, function () {
	      _this3.refs.scrollbar.update();
	    });
	  };
	
	  /**
	   * Gets called when an operation has been updated
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._onOperationUpdated = function _onOperationUpdated(operation) {
	    // The undo button might change this operation's selected filter or intensity.
	    // Update the component to reflect the change
	    if (operation === this._operation) {
	      this.forceUpdate();
	    }
	  };
	
	  /**
	   * Gets called when the user clicks an item
	   * @param {Filter} filter
	   * @param {Event} e
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._onItemClick = function _onItemClick(filter, e) {
	    this._operation.set({
	      filter: filter,
	      intensity: 1
	    });
	
	    var editor = this.context.editor;
	
	    editor.render();
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    var initialOptions = this.getSharedState('initialOptions');
	    var filter = this._operation.getFilter();
	    var intensity = this._operation.getIntensity();
	    if (filter !== initialOptions.filter || intensity !== initialOptions.intensity) {
	      var editor = this.context.editor;
	
	      editor.addHistory(this._operation, initialOptions, this.getSharedState('operationExistedBefore'));
	    }
	
	    if (filter.isIdentity) {
	      var _editor = this.context.editor;
	
	      _editor.removeOperation(this._operation);
	    }
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the overlay controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  FilterControlsComponent.prototype.renderOverlayControls = function renderOverlayControls() {
	    var currentFilter = this._operation.getFilter();
	    if (currentFilter.isIdentity) return null;
	
	    var intensity = this._operation.getIntensity();
	    return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
	      minValue: 0,
	      maxValue: 100,
	      value: intensity * 100,
	      valueUnit: '%',
	      positiveValuePrefix: '+',
	      label: this._t('controls.filters.intensity'),
	      onChange: this._onSliderValueChange });
	  };
	
	  /**
	   * Renders the list items for this control
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  FilterControlsComponent.prototype._renderListItems = function _renderListItems() {
	    var _this4 = this;
	
	    var currentFilter = this._operation.getFilter();
	
	    var filters = this._categoriesById[this.state.category].filters;
	    return [_globals.SDK.Filters.IdentityFilter].concat(filters).map(function (filter) {
	      var identifier = filter.identifier;
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: identifier,
	          onClick: _this4._onItemClick.bind(_this4, filter) },
	        _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: '$b:controls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            {
	              bem: '$e:button m:withInlineLabel' },
	            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this4._getAssetPath('controls/filters/' + identifier + '.png', true) }),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: '$e:inlineLabel', className: filter === currentFilter ? 'is-active' : null },
	              _globals.ReactBEM.createElement(
	                'div',
	                { bem: 'e:label' },
	                filter.displayName
	              )
	            )
	          )
	        )
	      );
	    });
	  };
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  FilterControlsComponent.prototype.renderControls = function renderControls() {
	    var _this5 = this;
	
	    var listItems = this._renderListItems();
	
	    var categories = this._categories.map(function (c) {
	      return {
	        name: c.name,
	        label: _this5._t('controls.filters.categories.' + c.name),
	        icon: _this5._getAssetPath('controls/filters/categories/' + c.name + '.png', true)
	      };
	    });
	    var selectedCategory = {
	      name: this.state.category,
	      label: this._t('controls.filters.categories.' + this.state.category),
	      icon: this._getAssetPath('controls/filters/categories/' + this.state.category + '.png', true)
	    };
	
	    return [_globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:categoryDropdown' },
	      _globals.ReactBEM.createElement(_categoryDropdownComponent2.default, {
	        items: categories,
	        selectedItem: selectedCategory,
	        onChange: this._onCategoryChange })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        { ref: 'scrollbar' },
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    )];
	  };
	
	  return FilterControlsComponent;
	}(_controlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = FilterControlsComponent;

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _filterControlsComponent = __webpack_require__(181);
	
	var _filterControlsComponent2 = _interopRequireDefault(_filterControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The filters controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FiltersControls = function (_Controls) {
	  (0, _inherits3.default)(FiltersControls, _Controls);
	
	  function FiltersControls() {
	    (0, _classCallCheck3.default)(this, FiltersControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {FiltersControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  FiltersControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('filter');
	    var operation = editor.getOrCreateOperation('filter');
	    var initialOptions = {
	      filter: operation.getFilter(),
	      intensity: operation.getIntensity()
	    };
	
	    this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @override
	   */
	
	
	  FiltersControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled(this.identifier);
	  };
	
	  return FiltersControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	FiltersControls.controlsComponent = _filterControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	FiltersControls.identifier = 'filter';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	FiltersControls.iconPath = 'controls/overview/filters.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	FiltersControls.languageKey = 'controls.overview.filters';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 * @property {PhotoEditorSDK.Filter[]} [categories = []]
	 * @property {Boolean} [replaceCategories = false]
	 * @property {String[]} [selectableFilters = null]
	 */
	FiltersControls.defaultOptions = {
	  categories: [],
	  replaceCategories: false,
	  selectableFilters: null
	};
	
	exports.default = FiltersControls;

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	var _radialFocus = __webpack_require__(188);
	
	var _radialFocus2 = _interopRequireDefault(_radialFocus);
	
	var _linearFocus = __webpack_require__(185);
	
	var _linearFocus2 = _interopRequireDefault(_linearFocus);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ITEMS = [_radialFocus2.default, _linearFocus2.default]; /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FocusControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(FocusControlsComponent, _ControlsComponent);
	
	  function FocusControlsComponent() {
	    (0, _classCallCheck3.default)(this, FocusControlsComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.apply(this, arguments));
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks one of the three buttons
	   * @param {Object} controlsItem
	   * @param {Event} e
	   * @private
	   */
	
	  FocusControlsComponent.prototype._onButtonClick = function _onButtonClick(controlsItem, e) {
	    this.context.editorScreen.switchToControls(controlsItem);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the list items for this control
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  FocusControlsComponent.prototype._renderListItems = function _renderListItems() {
	    var _this2 = this;
	
	    return ITEMS.filter(function (item) {
	      return item.isAvailable(_this2.context.editor);
	    }).map(function (item) {
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: item.identifier },
	        _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: '$b:controls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: '$e:button m:withLabel', onClick: _this2._onButtonClick.bind(_this2, item) },
	            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath(item.iconPath, true) }),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:label' },
	              _this2._t(item.languageKey)
	            )
	          )
	        )
	      );
	    });
	  };
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  FocusControlsComponent.prototype.renderControls = function renderControls() {
	    var listItems = this._renderListItems();
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        null,
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    );
	  };
	
	  return FocusControlsComponent;
	}(_controlsComponent2.default);
	
	exports.default = FocusControlsComponent;

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _focusControlsComponent = __webpack_require__(183);
	
	var _focusControlsComponent2 = _interopRequireDefault(_focusControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The focus controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FocusControls = function (_Controls) {
	  (0, _inherits3.default)(FocusControls, _Controls);
	
	  function FocusControls() {
	    (0, _classCallCheck3.default)(this, FocusControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	  FocusControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('radial-focus') || editor.isToolEnabled('linear-focus');
	  };
	
	  return FocusControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	FocusControls.controlsComponent = _focusControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	FocusControls.identifier = 'focus';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	FocusControls.iconPath = 'controls/overview/focus.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	FocusControls.languageKey = 'controls.overview.focus';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	FocusControls.defaultOptions = {};
	
	exports.default = FocusControls;

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _linearFocusControlsComponent = __webpack_require__(187);
	
	var _linearFocusControlsComponent2 = _interopRequireDefault(_linearFocusControlsComponent);
	
	var _linearFocusCanvasControlsComponent = __webpack_require__(186);
	
	var _linearFocusCanvasControlsComponent2 = _interopRequireDefault(_linearFocusCanvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The radial blur controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var LinearFocusControls = function (_Controls) {
	  (0, _inherits3.default)(LinearFocusControls, _Controls);
	
	  function LinearFocusControls() {
	    (0, _classCallCheck3.default)(this, LinearFocusControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {BorderControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  LinearFocusControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('linear-focus');
	    var operation = editor.getOrCreateOperation('linear-focus', {
	      start: new _globals.Vector2(0.49, 0.5),
	      end: new _globals.Vector2(0.51, 0.5)
	    });
	    var initialOptions = {
	      start: operation.getStart().clone(),
	      end: operation.getEnd().clone(),
	      size: operation.getSize(),
	      gradientSize: operation.getGradientSize(),
	      blurRadius: operation.getBlurRadius()
	    };
	
	    this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	
	  LinearFocusControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('linear-focus');
	  };
	
	  return LinearFocusControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	LinearFocusControls.controlsComponent = _linearFocusControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	LinearFocusControls.canvasControlsComponent = _linearFocusCanvasControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	LinearFocusControls.identifier = 'linear-focus';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	LinearFocusControls.iconPath = 'controls/focus/linear.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	LinearFocusControls.languageKey = 'controls.focus.linear';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	LinearFocusControls.defaultOptions = {};
	
	exports.default = LinearFocusControls;

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	var _canvasControlsComponent = __webpack_require__(35);
	
	var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LinearFocusCanvasControlsComponent = function (_CanvasControlsCompon) {
	  (0, _inherits3.default)(LinearFocusCanvasControlsComponent, _CanvasControlsCompon);
	
	  function LinearFocusCanvasControlsComponent() {
	    (0, _classCallCheck3.default)(this, LinearFocusCanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _CanvasControlsCompon.call.apply(_CanvasControlsCompon, [this].concat(args)));
	
	    _this._bindAll('_onCenterDragStart', '_onCenterDrag', '_onKnobDragStart', '_onKnobDrag');
	
	    _this.state = {
	      areaPosition: new _globals.Vector2(),
	      areaDimensions: new _globals.Vector2(),
	      knobPosition: new _globals.Vector2()
	    };
	    _this._operation = _this.getSharedState('operation');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called after the canvas has been zoomed in or out
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._onCanvasZoomDone = function _onCanvasZoomDone() {
	    this._setStylesFromOptions();
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when the shared state did change
	   * @param {Object} newState
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype.sharedStateDidChange = function sharedStateDidChange(newState) {
	    if (newState.operation) {
	      this._operation = newState.operation;
	    }
	    this._setStylesFromOptions();
	  };
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;
	
	    _CanvasControlsCompon.prototype.componentDidMount.call(this);
	
	    var editor = this.context.editor;
	
	    editor.setZoom('auto', function () {
	      editor.disableFeatures('zoom', 'drag');
	      _this2._setStylesFromOptions();
	    });
	  };
	
	  // -------------------------------------------------------------------------- CENTER DRAGGING
	
	  /**
	   * Gets called when the user stars dragging the center
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._onCenterDragStart = function _onCenterDragStart() {
	    this._initialStart = this._operation.getStart();
	    this._initialEnd = this._operation.getEnd();
	    this._initialDist = this._initialEnd.clone().subtract(this._initialStart);
	  };
	
	  /**
	   * Gets called while the user drags the center
	   * @param {Vector2} offset
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._onCenterDrag = function _onCenterDrag(offset) {
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	    var relativeOffset = offset.clone().divide(outputDimensions);
	
	    var newStart = this._initialStart.clone().add(relativeOffset).clamp(new _globals.Vector2(0, 0), new _globals.Vector2(1, 1).subtract(this._initialDist));
	    var newEnd = newStart.clone().add(this._initialDist);
	
	    this._operation.set({
	      start: newStart,
	      end: newEnd
	    });
	
	    editor.render();
	    this._setStylesFromOptions();
	    this.forceUpdate();
	  };
	
	  // -------------------------------------------------------------------------- GRADIENT KNOB DRAG
	
	  /**
	   * Gets called when the user stars dragging the gradient knob
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._onKnobDragStart = function _onKnobDragStart(e) {
	    this._initialKnobPosition = this.state.knobPosition.clone();
	  };
	
	  /**
	   * Gets called while the user drags the gradient knob
	   * @param {Vector2} offset
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._onKnobDrag = function _onKnobDrag(offset) {
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	
	    var newKnobPosition = this._initialKnobPosition.clone().add(offset).clamp(new _globals.Vector2(0, 0), outputDimensions);
	
	    var distance = newKnobPosition.clone().subtract(this.state.areaPosition);
	    var newGradientRadius = distance.len() * 2;
	
	    var start = this.state.areaPosition.clone().add(-distance.y, distance.x);
	    var end = this.state.areaPosition.clone().add(distance.y, -distance.x);
	    var size = end.clone().subtract(start).len();
	    var gradientSize = size;
	
	    start.divide(outputDimensions);
	    end.divide(outputDimensions);
	
	    this._operation.set({
	      start: start, end: end,
	      size: size, gradientSize: gradientSize
	    });
	    this.setState({
	      knobPosition: newKnobPosition,
	      areaDimensions: new _globals.Vector2(this.state.areaDimensions.x, newGradientRadius)
	    });
	    editor.render();
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the CSS styles for the area div
	   * @return {Object}
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._getAreaStyle = function _getAreaStyle() {
	    var dist = this.state.knobPosition.clone().subtract(this.state.areaPosition);
	    var degrees = Math.atan2(dist.x, dist.y) * (180 / Math.PI);
	    var transform = 'rotate(' + (-degrees).toFixed(2) + 'deg)';
	
	    return {
	      width: this.state.areaDimensions.x,
	      height: this.state.areaDimensions.y,
	      left: this.state.areaPosition.x,
	      top: this.state.areaPosition.y,
	      marginLeft: this.state.areaDimensions.x * -0.5,
	      marginTop: this.state.areaDimensions.y * -0.5,
	      transform: transform,
	      MozTransform: transform,
	      msTransform: transform,
	      WebkitTransform: transform
	    };
	  };
	
	  /**
	   * Returns the CSS styles for the knob
	   * @return {Object}
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    return {
	      left: this.state.knobPosition.x,
	      top: this.state.knobPosition.y
	    };
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Sets the dimensions and position values from the current operation options
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._setStylesFromOptions = function _setStylesFromOptions() {
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	
	    var start = this._operation.getStart().clone().multiply(outputDimensions);
	    var end = this._operation.getEnd().clone().multiply(outputDimensions);
	    var size = this._operation.getSize();
	
	    var dist = end.clone().subtract(start);
	    var middle = start.clone().add(dist.clone().divide(2));
	
	    var areaSize = new _globals.Vector2(outputDimensions.len() * 2, size);
	
	    var totalDist = dist.len();
	    var factor = dist.clone().divide(totalDist).divide(2);
	
	    this.setState({
	      areaDimensions: areaSize,
	      areaPosition: middle.clone(),
	      knobPosition: middle.clone().add(-size * factor.y, size * factor.x)
	    });
	  };
	
	  /**
	   * Returns the container style
	   * @return {Object}
	   * @private
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype._getContainerStyle = function _getContainerStyle() {
	    var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds();
	
	    var x = _context$editor$getSD.x;
	    var y = _context$editor$getSD.y;
	    var width = _context$editor$getSD.width;
	    var height = _context$editor$getSD.height;
	
	    return {
	      left: x,
	      top: y,
	      width: width, height: height
	    };
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  LinearFocusCanvasControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:canvasControls e:container m:full', ref: 'container', style: this._getContainerStyle() },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:linearFocusCanvasControls' },
	        _globals.ReactBEM.createElement(
	          _draggableComponent2.default,
	          {
	            onStart: this._onCenterDragStart,
	            onDrag: this._onCenterDrag },
	          _globals.ReactBEM.createElement('div', { bem: 'e:area', style: this._getAreaStyle() })
	        ),
	        _globals.ReactBEM.createElement(
	          _draggableComponent2.default,
	          {
	            onStart: this._onKnobDragStart,
	            onDrag: this._onKnobDrag },
	          _globals.ReactBEM.createElement('div', { bem: 'e:knob $b:knob', style: this._getKnobStyle() })
	        )
	      )
	    );
	  };
	
	  return LinearFocusCanvasControlsComponent;
	}(_canvasControlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = LinearFocusCanvasControlsComponent;

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _sliderComponent = __webpack_require__(39);
	
	var _sliderComponent2 = _interopRequireDefault(_sliderComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LinearFocusControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(LinearFocusControlsComponent, _ControlsComponent);
	
	  function LinearFocusControlsComponent() {
	    (0, _classCallCheck3.default)(this, LinearFocusControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._hasDoneButton = true;
	    _this._operation = _this.getSharedState('operation');
	    _this._bindAll('_onBackClick', '_onDoneClick', '_onSliderValueChange', '_onOperationRemoved');
	
	    _this._events = (0, _defineProperty3.default)({}, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation is removed
	   * @return {Operation} operation
	   * @private
	   */
	
	
	  LinearFocusControlsComponent.prototype._onOperationRemoved = function _onOperationRemoved(operation) {
	    if (operation !== this._operation) return;
	    if (this._backButtonClicked) return;
	
	    // Operation can be removed by the undo button. We need
	    // to make sure we re-create the operation for the lifetime
	    // of this control
	    var editor = this.context.editor;
	
	    var newOperation = editor.getOrCreateOperation('linear-focus');
	    this._operation = newOperation;
	    this.setSharedState({
	      operation: newOperation,
	      operationExistedBefore: false,
	      initialOptions: {}
	    });
	  };
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  LinearFocusControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    this._backButtonClicked = true;
	
	    var editor = this.context.editor;
	
	    if (!this.getSharedState('operationExistedBefore')) {
	      editor.removeOperation(this._operation);
	    } else {
	      this._operation.set(this.getSharedState('initialOptions'));
	    }
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the user clicks the done button
	   * @param  {Event} e
	   * @private
	   */
	
	
	  LinearFocusControlsComponent.prototype._onDoneClick = function _onDoneClick(e) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = this.getSharedState('operationExistedBefore');
	    var initialOptions = this.getSharedState('initialOptions');
	    var optionsChanged = !this._operation.optionsEqual(initialOptions);
	
	    if (optionsChanged || !operationExistedBefore) {
	      editor.addHistory(this._operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
	    }
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	
	    _ControlsComponent.prototype._onDoneClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the slider value has changed
	   * @param {Number} value
	   * @private
	   */
	
	
	  LinearFocusControlsComponent.prototype._onSliderValueChange = function _onSliderValueChange(value) {
	    this._operation.setBlurRadius(value);
	
	    var editor = this.context.editor;
	
	    editor.render();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  LinearFocusControlsComponent.prototype.renderControls = function renderControls() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:slider' },
	      _globals.ReactBEM.createElement(_sliderComponent2.default, {
	        style: 'large',
	        minValue: 0,
	        maxValue: 40,
	        valueUnit: 'px',
	        middleDot: false,
	        label: this._t('controls.focus.blurRadius'),
	        onChange: this._onSliderValueChange,
	        value: this._operation.getBlurRadius() })
	    );
	  };
	
	  return LinearFocusControlsComponent;
	}(_controlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = LinearFocusControlsComponent;

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _radialFocusControlsComponent = __webpack_require__(190);
	
	var _radialFocusControlsComponent2 = _interopRequireDefault(_radialFocusControlsComponent);
	
	var _radialFocusCanvasControlsComponent = __webpack_require__(189);
	
	var _radialFocusCanvasControlsComponent2 = _interopRequireDefault(_radialFocusCanvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The radial focus controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	
	var RadialFocusControls = function (_Controls) {
	  (0, _inherits3.default)(RadialFocusControls, _Controls);
	
	  function RadialFocusControls() {
	    (0, _classCallCheck3.default)(this, RadialFocusControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {RadialFocusControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  RadialFocusControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('radial-focus');
	    var operation = editor.getOrCreateOperation('radial-focus');
	    var initialOptions = {
	      position: operation.getPosition().clone(),
	      gradientRadius: operation.getGradientRadius(),
	      blurRadius: operation.getBlurRadius()
	    };
	
	    this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	
	  RadialFocusControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('radial-focus');
	  };
	
	  return RadialFocusControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	RadialFocusControls.controlsComponent = _radialFocusControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	RadialFocusControls.canvasControlsComponent = _radialFocusCanvasControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	RadialFocusControls.identifier = 'radial-focus';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	RadialFocusControls.iconPath = 'controls/focus/radial.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	RadialFocusControls.languageKey = 'controls.focus.radial';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	RadialFocusControls.defaultOptions = {};
	
	exports.default = RadialFocusControls;

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	var _canvasControlsComponent = __webpack_require__(35);
	
	var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RadialFocusCanvasControlsComponent = function (_CanvasControlsCompon) {
	  (0, _inherits3.default)(RadialFocusCanvasControlsComponent, _CanvasControlsCompon);
	
	  function RadialFocusCanvasControlsComponent() {
	    (0, _classCallCheck3.default)(this, RadialFocusCanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _CanvasControlsCompon.call.apply(_CanvasControlsCompon, [this].concat(args)));
	
	    _this._bindAll('_onCenterDragStart', '_onCenterDrag', '_onKnobDragStart', '_onKnobDrag');
	
	    _this.state = {
	      areaPosition: new _globals.Vector2(),
	      areaDimensions: new _globals.Vector2(),
	      knobPosition: new _globals.Vector2()
	    };
	    _this._knobChangedManually = false;
	    _this._operation = _this.getSharedState('operation');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called after the canvas has been zoomed in or out
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._onCanvasZoomDone = function _onCanvasZoomDone() {
	    this._setStylesFromOptions();
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when the shared state did change
	   * @param {Object} newState
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype.sharedStateDidChange = function sharedStateDidChange(newState) {
	    if (newState.operation) {
	      this._operation = newState.operation;
	    }
	    this._setStylesFromOptions();
	  };
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    var _this2 = this;
	
	    _CanvasControlsCompon.prototype.componentDidMount.call(this);
	    var editor = this.context.editor;
	
	    editor.setZoom('auto', function () {
	      editor.disableFeatures('zoom', 'drag');
	      _this2._setStylesFromOptions();
	    });
	  };
	
	  // -------------------------------------------------------------------------- CENTER DRAGGING
	
	  /**
	   * Gets called when the user stars dragging the center
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._onCenterDragStart = function _onCenterDragStart() {
	    this._initialPosition = this._operation.getPosition();
	    this._initialKnobPosition = this.state.knobPosition.clone();
	  };
	
	  /**
	   * Gets called while the user drags the center
	   * @param {Vector2} offset
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._onCenterDrag = function _onCenterDrag(offset) {
	    var editor = this.context.editor;
	
	    var relativeOffset = offset.clone().divide(editor.getOutputDimensions());
	
	    var newPosition = this._initialPosition.clone().add(relativeOffset);
	
	    var newKnobPosition = this._initialKnobPosition.clone().add(offset);
	
	    this._operation.set({
	      position: newPosition
	    });
	
	    this.state.knobPosition = newKnobPosition;
	
	    editor.render();
	    this._setStylesFromOptions();
	  };
	
	  // -------------------------------------------------------------------------- GRADIENT KNOB DRAG
	
	  /**
	   * Gets called when the user stars dragging the gradient knob
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._onKnobDragStart = function _onKnobDragStart(e) {
	    this._knobChangedManually = true;
	    this._initialKnobPosition = this.state.knobPosition.clone();
	  };
	
	  /**
	   * Gets called while the user drags the gradient knob
	   * @param {Vector2} offset
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._onKnobDrag = function _onKnobDrag(offset) {
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	    var outputDimensions = editor.getOutputDimensions();
	
	    var newKnobPosition = this._initialKnobPosition.clone().add(offset).clamp(new _globals.Vector2(0, 0), outputDimensions);
	
	    var absolutePosition = this._operation.getPosition().clone().multiply(outputDimensions);
	
	    var radius = newKnobPosition.clone().subtract(absolutePosition).abs().len();
	    var gradientRadius = radius / 2;
	
	    this.setState({
	      knobPosition: newKnobPosition,
	      areaDimensions: new _globals.Vector2(radius * 2, radius * 2)
	    });
	    this._operation.set({
	      radius: radius / zoom,
	      gradientRadius: gradientRadius / zoom
	    });
	
	    editor.render();
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the CSS styles for the area div
	   * @return {Object}
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._getAreaStyle = function _getAreaStyle() {
	    return {
	      width: this.state.areaDimensions.x,
	      height: this.state.areaDimensions.y,
	      left: this.state.areaPosition.x,
	      top: this.state.areaPosition.y,
	      marginLeft: this.state.areaDimensions.x * -0.5,
	      marginTop: this.state.areaDimensions.y * -0.5
	    };
	  };
	
	  /**
	   * Returns the CSS styles for the knob
	   * @return {Object}
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    return {
	      left: this.state.knobPosition.x,
	      top: this.state.knobPosition.y
	    };
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Sets the dimensions and position values from the current operation options
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._setStylesFromOptions = function _setStylesFromOptions() {
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    var outputDimensions = this.context.editor.getOutputDimensions();
	
	    var position = this._operation.getPosition().clone().multiply(outputDimensions);
	
	    var radius = this._operation.getRadius();
	
	    var areaSize = new _globals.Vector2(radius * 2 * zoom, radius * 2 * zoom);
	
	    var newState = {
	      areaDimensions: areaSize,
	      areaPosition: position
	    };
	
	    if (!this._knobChangedManually) {
	      newState.knobPosition = position.clone().add(radius * zoom, 0);
	    }
	
	    this.setState(newState);
	  };
	
	  /**
	   * Returns the container style
	   * @return {Object}
	   * @private
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype._getContainerStyle = function _getContainerStyle() {
	    var editor = this.context.editor;
	
	    var _editor$getSDK$getSpr = editor.getSDK().getSprite().getBounds();
	
	    var x = _editor$getSDK$getSpr.x;
	    var y = _editor$getSDK$getSpr.y;
	    var width = _editor$getSDK$getSpr.width;
	    var height = _editor$getSDK$getSpr.height;
	
	    return {
	      left: x,
	      top: y,
	      width: width, height: height
	    };
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  RadialFocusCanvasControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:canvasControls e:container m:full', ref: 'container', style: this._getContainerStyle() },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:radialFocusCanvasControls' },
	        _globals.ReactBEM.createElement(
	          _draggableComponent2.default,
	          {
	            onStart: this._onCenterDragStart,
	            onDrag: this._onCenterDrag },
	          _globals.ReactBEM.createElement('div', { bem: 'e:area', style: this._getAreaStyle() })
	        ),
	        _globals.ReactBEM.createElement(
	          _draggableComponent2.default,
	          {
	            onStart: this._onKnobDragStart,
	            onDrag: this._onKnobDrag },
	          _globals.ReactBEM.createElement('div', { bem: 'e:knob $b:knob', style: this._getKnobStyle() })
	        )
	      )
	    );
	  };
	
	  return RadialFocusCanvasControlsComponent;
	}(_canvasControlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = RadialFocusCanvasControlsComponent;

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _sliderComponent = __webpack_require__(39);
	
	var _sliderComponent2 = _interopRequireDefault(_sliderComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var RadialFocusControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(RadialFocusControlsComponent, _ControlsComponent);
	
	  function RadialFocusControlsComponent() {
	    (0, _classCallCheck3.default)(this, RadialFocusControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._hasDoneButton = true;
	    _this._operation = _this.getSharedState('operation');
	    _this._bindAll('_onBackClick', '_onDoneClick', '_onSliderValueChange', '_onOperationRemoved');
	
	    _this._events = (0, _defineProperty3.default)({}, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an operation is removed
	   * @return {Operation} operation
	   * @private
	   */
	
	
	  RadialFocusControlsComponent.prototype._onOperationRemoved = function _onOperationRemoved(operation) {
	    if (operation !== this._operation) return;
	    if (this._backButtonClicked) return;
	
	    // Operation can be removed by the undo button. We need
	    // to make sure we re-create the operation for the lifetime
	    // of this control
	    var editor = this.context.editor;
	
	    var newOperation = editor.getOrCreateOperation('radial-focus');
	    this._operation = newOperation;
	    this.setSharedState({
	      operation: newOperation,
	      operationExistedBefore: false,
	      initialOptions: {}
	    });
	  };
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  RadialFocusControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    this._backButtonClicked = true;
	
	    var editor = this.context.editor;
	
	    if (!this.getSharedState('operationExistedBefore')) {
	      editor.removeOperation(this._operation);
	    } else {
	      this._operation.set(this.getSharedState('initialOptions'));
	    }
	
	    editor.render();
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the user clicks the done button
	   * @param  {Event} e
	   * @private
	   */
	
	
	  RadialFocusControlsComponent.prototype._onDoneClick = function _onDoneClick(e) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = this.getSharedState('operationExistedBefore');
	    var initialOptions = this.getSharedState('initialOptions');
	    var optionsChanged = !this._operation.optionsEqual(initialOptions);
	
	    if (optionsChanged || !operationExistedBefore) {
	      editor.addHistory(this._operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
	    }
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	
	    _ControlsComponent.prototype._onDoneClick.call(this, e);
	  };
	
	  /**
	   * Gets called when the slider value has changed
	   * @param {Number} value
	   * @private
	   */
	
	
	  RadialFocusControlsComponent.prototype._onSliderValueChange = function _onSliderValueChange(value) {
	    this._operation.setBlurRadius(value);
	
	    var editor = this.context.editor;
	
	    editor.render();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  RadialFocusControlsComponent.prototype.renderControls = function renderControls() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:slider' },
	      _globals.ReactBEM.createElement(_sliderComponent2.default, {
	        style: 'large',
	        minValue: 0,
	        maxValue: 40,
	        valueUnit: 'px',
	        middleDot: false,
	        label: this._t('controls.focus.blurRadius'),
	        onChange: this._onSliderValueChange,
	        value: this._operation.getBlurRadius() })
	    );
	  };
	
	  return RadialFocusControlsComponent;
	}(_controlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = RadialFocusControlsComponent;

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _adjustments = __webpack_require__(172);
	
	Object.defineProperty(exports, 'adjustments', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_adjustments).default;
	  }
	});
	
	var _crop = __webpack_require__(180);
	
	Object.defineProperty(exports, 'crop', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_crop).default;
	  }
	});
	
	var _filter = __webpack_require__(182);
	
	Object.defineProperty(exports, 'filter', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_filter).default;
	  }
	});
	
	var _focus = __webpack_require__(184);
	
	Object.defineProperty(exports, 'focus', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_focus).default;
	  }
	});
	
	var _border = __webpack_require__(174);
	
	Object.defineProperty(exports, 'border', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_border).default;
	  }
	});
	
	var _orientation = __webpack_require__(193);
	
	Object.defineProperty(exports, 'orientation', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_orientation).default;
	  }
	});
	
	var _sticker = __webpack_require__(204);
	
	Object.defineProperty(exports, 'sticker', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_sticker).default;
	  }
	});
	
	var _text = __webpack_require__(208);
	
	Object.defineProperty(exports, 'text', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_text).default;
	  }
	});
	
	var _brush = __webpack_require__(177);
	
	Object.defineProperty(exports, 'brush', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_brush).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(51);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MiniSliderComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(MiniSliderComponent, _BaseComponent);
	
	  function MiniSliderComponent() {
	    (0, _classCallCheck3.default)(this, MiniSliderComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this.state = {
	      value: _this.props.value || 0,
	      sliderPosition: 0,
	      foregroundLeft: 0,
	      foregroundWidth: 0
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after the component has been mounted
	   */
	
	
	  MiniSliderComponent.prototype.componentDidMount = function componentDidMount() {
	    // Trigger a re-render to position the knob
	    this._setValue(this.state.value, false);
	  };
	
	  /**
	   * Gets called when this component receives new props
	   * @param  {Object} props
	   */
	
	
	  MiniSliderComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps(props) {
	    if (props.value !== this.state.value) {
	      this._setValue(props.value, false);
	    }
	  };
	
	  /**
	   * Returns the style for the knob (position)
	   * @return {Object}
	   * @private
	   */
	
	
	  MiniSliderComponent.prototype._getKnobStyle = function _getKnobStyle() {
	    return { left: this.state.sliderPosition };
	  };
	
	  /**
	   * Returns the style for the foreground bar
	   * @return {Object}
	   * @private
	   */
	
	
	  MiniSliderComponent.prototype._getForegroundStyle = function _getForegroundStyle() {
	    return {
	      left: this.state.foregroundLeft,
	      width: this.state.foregroundWidth
	    };
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Decides whether or not this slider should have a middle dot on the bar
	   * @private
	   */
	
	
	  MiniSliderComponent.prototype._displayMiddleDot = function _displayMiddleDot() {
	    return this.props.middleDot !== false;
	  };
	
	  /**
	   * Sets the value to the given value, updates the slider position
	   * @param {Number} value
	   * @param {Boolean} emitChange = true
	   * @private
	   */
	
	
	  MiniSliderComponent.prototype._setValue = function _setValue(value) {
	    var emitChange = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    value = Math.round(value);
	    var _props = this.props;
	    var minValue = _props.minValue;
	    var maxValue = _props.maxValue;
	
	    var progress = (value - minValue) / (maxValue - minValue);
	
	    // Calculate slider position
	    var bar = this.refs.bar;
	
	    var barWidth = bar.offsetWidth;
	    var sliderPosition = barWidth * progress;
	
	    // Calculate foreground position and width
	    var foregroundWidth = progress * barWidth;
	    var foregroundLeft = 0;
	    if (this._displayMiddleDot()) {
	      foregroundWidth = Math.abs(progress - 0.5) * barWidth;
	      foregroundLeft = progress < 0.5 ? barWidth * 0.5 - foregroundWidth : '50%';
	    }
	
	    this.setState({ value: value, sliderPosition: sliderPosition, foregroundWidth: foregroundWidth, foregroundLeft: foregroundLeft });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  MiniSliderComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var foregroundProps = {
	      style: this._getForegroundStyle()
	    };
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:miniSlider' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:bar', ref: 'bar' },
	        _globals.ReactBEM.createElement('div', { bem: '$e:background' }),
	        _globals.ReactBEM.createElement('div', (0, _extends3.default)({ bem: '$e:foreground' }, foregroundProps)),
	        _globals.ReactBEM.createElement('div', { bem: 'e:knob', style: this._getKnobStyle() })
	      )
	    );
	  };
	
	  return MiniSliderComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	
	exports.default = MiniSliderComponent;

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _orientationControlsComponent = __webpack_require__(194);
	
	var _orientationControlsComponent2 = _interopRequireDefault(_orientationControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The orientation controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var OrientationControls = function (_Controls) {
	  (0, _inherits3.default)(OrientationControls, _Controls);
	
	  function OrientationControls() {
	    (0, _classCallCheck3.default)(this, OrientationControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {OrientationControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	  OrientationControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('orientation');
	    var operation = editor.getOrCreateOperation('orientation');
	    var initialOptions = operation.serializeOptions();
	
	    this.setSharedState({ operation: operation, operationExistedBefore: operationExistedBefore, initialOptions: initialOptions });
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	
	  OrientationControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('rotation') || editor.isToolEnabled('flip');
	  };
	
	  return OrientationControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	OrientationControls.controlsComponent = _orientationControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	OrientationControls.identifier = 'orientation';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	OrientationControls.iconPath = 'controls/overview/orientation.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	OrientationControls.languageKey = 'controls.overview.orientation';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 */
	OrientationControls.defaultOptions = {};
	
	exports.default = OrientationControls;

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var OrientationControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(OrientationControlsComponent, _ControlsComponent);
	
	  function OrientationControlsComponent() {
	    var _this$_events;
	
	    (0, _classCallCheck3.default)(this, OrientationControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._bindAll('_onRotateClick', '_onFlipClick', '_onOperationUpdated', '_onOperationRemoved');
	    _this._operation = _this.getSharedState('operation');
	    _this._operationExistedBefore = _this.getSharedState('operationExistedBefore');
	
	    _this._events = (_this$_events = {}, (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.OPERATION_UPDATED, _this._onOperationUpdated), (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.OPERATION_REMOVED, _this._onOperationRemoved), _this$_events);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    this._backButtonClicked = true;
	
	    var initialOptions = this.getSharedState('initialOptions');
	    if (this._operation.optionsEqual(initialOptions)) {
	      var editor = this.context.editor;
	
	      editor.removeOperation(this._operation);
	    }
	
	    _ControlsComponent.prototype._onBackClick.call(this, e);
	  };
	
	  /**
	   * Gets called when an operation has been updated
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onOperationUpdated = function _onOperationUpdated(operation) {
	    if (operation === this._operation) {
	      this.forceUpdate();
	    }
	  };
	
	  /**
	   * Gets called when an operation is removed
	   * @param  {Operation} operation
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onOperationRemoved = function _onOperationRemoved(operation) {
	    if (operation !== this._operation) return;
	    if (this._backButtonClicked) return;
	
	    // Operation can be removed by the undo button. We need
	    // to make sure we re-create the operation for the lifetime
	    // of this control
	    var editor = this.context.editor;
	
	    var newOperation = editor.getOrCreateOperation('orientation');
	    this._operation = newOperation;
	    this._historyItem = null;
	    this.setSharedState({
	      operation: newOperation,
	      operationExistedBefore: false,
	      initialOptions: this._operation.serializeOptions()
	    });
	  };
	
	  /**
	   * Gets called when the user clicks a rotation button
	   * @param {String} direction
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onRotateClick = function _onRotateClick(direction) {
	    var previousOptions = this._operation.serializeOptions();
	
	    var degrees = this._operation.getRotation();
	    var additionalDegrees = 90 * (direction === 'left' ? -1 : 1);
	    var newDegrees = (degrees + additionalDegrees) % 360;
	    this._operation.setRotation(newDegrees);
	
	    var flipVertically = this._operation.getFlipVertically();
	    var flipHorizontally = this._operation.getFlipHorizontally();
	
	    if (flipVertically !== flipHorizontally) {
	      this._operation.set({
	        flipVertically: !flipHorizontally,
	        flipHorizontally: !flipVertically
	      });
	    }
	
	    var editor = this.context.editor;
	
	    editor.addHistory(this._operation, previousOptions, this._operationExistedBefore);
	
	    this._operationExistedBefore = true;
	
	    editor.fixOffset();
	    editor.render();
	  };
	
	  /**
	   * Gets called when the user clicks a flip button
	   * @param {String} direction
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._onFlipClick = function _onFlipClick(direction) {
	    var previousOptions = this._operation.serializeOptions();
	
	    var rotation = this._operation.getRotation();
	    if (rotation === 90 || rotation === 270) {
	      if (direction === 'vertical') {
	        direction = 'horizontal';
	      } else {
	        direction = 'vertical';
	      }
	    }
	
	    switch (direction) {
	      case 'horizontal':
	        var horizontal = this._operation.getFlipHorizontally();
	        this._operation.setFlipHorizontally(!horizontal);
	        break;
	      case 'vertical':
	        var vertical = this._operation.getFlipVertically();
	        this._operation.setFlipVertically(!vertical);
	        break;
	    }
	
	    var editor = this.context.editor;
	
	    editor.addHistory(this._operation, previousOptions, this._operationExistedBefore);
	    editor.render();
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  OrientationControlsComponent.prototype._getListItems = function _getListItems() {
	    var editor = this.context.editor;
	
	    var rotationEnabled = editor.isToolEnabled('rotation');
	    var flipEnabled = editor.isToolEnabled('flip');
	
	    var items = [];
	    if (rotationEnabled) {
	      items = items.concat([{ identifier: 'rotate-l', onClick: this._onRotateClick.bind(this, 'left') }, { identifier: 'rotate-r', onClick: this._onRotateClick.bind(this, 'right') }]);
	    }
	
	    if (rotationEnabled || flipEnabled) {
	      items.push(null); // gap
	    }
	
	    if (flipEnabled) {
	      items = items.concat([{ identifier: 'flip-h', onClick: this._onFlipClick.bind(this, 'horizontal') }, { identifier: 'flip-v', onClick: this._onFlipClick.bind(this, 'vertical') }]);
	    }
	
	    return items;
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the list items for this control
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  OrientationControlsComponent.prototype._renderListItems = function _renderListItems() {
	    var _this2 = this;
	
	    var itemsMap = this._getListItems();
	
	    return itemsMap.map(function (item) {
	      if (item === null) {
	        return _globals.ReactBEM.createElement('li', { bem: 'e:item m:gap', key: 'gap' });
	      }
	
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: item.identifier },
	        _globals.ReactBEM.createElement(
	          'bem',
	          { specifier: '$b:controls' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: '$e:button m:withLabel', onClick: item.onClick },
	            _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: _this2._getAssetPath('controls/orientation/' + item.identifier + '.png', true) }),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:label' },
	              _this2._t('controls.orientation.' + item.identifier)
	            )
	          )
	        )
	      );
	    });
	  };
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  OrientationControlsComponent.prototype.renderControls = function renderControls() {
	    var listItems = this._renderListItems();
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        null,
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    );
	  };
	
	  return OrientationControlsComponent;
	}(_controlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = OrientationControlsComponent;

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _overviewTopBarControlsComponent = __webpack_require__(197);
	
	var _overviewTopBarControlsComponent2 = _interopRequireDefault(_overviewTopBarControlsComponent);
	
	var _overviewControlsComponent = __webpack_require__(106);
	
	var _overviewControlsComponent2 = _interopRequireDefault(_overviewControlsComponent);
	
	var _overviewCanvasControlsComponent = __webpack_require__(196);
	
	var _overviewCanvasControlsComponent2 = _interopRequireDefault(_overviewCanvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var OverviewControls = function (_Controls) {
	  (0, _inherits3.default)(OverviewControls, _Controls);
	
	  function OverviewControls() {
	    (0, _classCallCheck3.default)(this, OverviewControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  return OverviewControls;
	}(_controls2.default);
	
	/**
	 * This control's top bar controls component. Used for the sub-header part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	OverviewControls.topBarControlsComponent = _overviewTopBarControlsComponent2.default;
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	OverviewControls.controlsComponent = _overviewControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	OverviewControls.canvasControlsComponent = _overviewCanvasControlsComponent2.default;
	
	exports.default = OverviewControls;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _canvasControlsComponent = __webpack_require__(35);
	
	var _canvasControlsComponent2 = _interopRequireDefault(_canvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var OverviewCanvasControlsComponent = function (_CanvasControlsCompon) {
	  (0, _inherits3.default)(OverviewCanvasControlsComponent, _CanvasControlsCompon);
	
	  function OverviewCanvasControlsComponent() {
	    (0, _classCallCheck3.default)(this, OverviewCanvasControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _CanvasControlsCompon.call.apply(_CanvasControlsCompon, [this].concat(args)));
	
	    _this._bindAll('_onClick');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks somewhere on the canvas
	   * @param  {Event} e
	   * @private
	   */
	
	
	  OverviewCanvasControlsComponent.prototype._onClick = function _onClick(e) {
	    this._performHitTest(_globals.Utils.getEventPosition(e));
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the container style
	   * @return {Object}
	   * @private
	   */
	
	
	  OverviewCanvasControlsComponent.prototype._getContainerStyle = function _getContainerStyle() {
	    var _context$editor$getSD = this.context.editor.getSDK().getSprite().getBounds();
	
	    var x = _context$editor$getSD.x;
	    var y = _context$editor$getSD.y;
	    var width = _context$editor$getSD.width;
	    var height = _context$editor$getSD.height;
	
	    return {
	      left: x,
	      top: y,
	      width: width, height: height
	    };
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  OverviewCanvasControlsComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      {
	        bem: '$b:canvasControls e:container m:full',
	        ref: 'container' },
	      _globals.ReactBEM.createElement('div', {
	        bem: '$b:canvasControls e:innerContainer',
	        ref: 'innerContainer',
	        style: this._getContainerStyle(),
	        onMouseDown: this._onClick,
	        onTouchStart: this._onClick })
	    );
	  };
	
	  return OverviewCanvasControlsComponent;
	}(_canvasControlsComponent2.default);
	
	exports.default = OverviewCanvasControlsComponent;

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _subHeaderComponent = __webpack_require__(110);
	
	var _subHeaderComponent2 = _interopRequireDefault(_subHeaderComponent);
	
	var _newFileButtonComponent = __webpack_require__(199);
	
	var _newFileButtonComponent2 = _interopRequireDefault(_newFileButtonComponent);
	
	var _exportButtonComponent = __webpack_require__(198);
	
	var _exportButtonComponent2 = _interopRequireDefault(_exportButtonComponent);
	
	var _undoButtonComponent = __webpack_require__(200);
	
	var _undoButtonComponent2 = _interopRequireDefault(_undoButtonComponent);
	
	var _zoomComponent = __webpack_require__(201);
	
	var _zoomComponent2 = _interopRequireDefault(_zoomComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var EditorSubHeaderComponent = function (_SubHeaderComponent) {
	  (0, _inherits3.default)(EditorSubHeaderComponent, _SubHeaderComponent);
	
	  function EditorSubHeaderComponent() {
	    (0, _classCallCheck3.default)(this, EditorSubHeaderComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _SubHeaderComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders the content of this SubHeaderComponent
	   * @return {ReactBEM.Element}
	   */
	
	  EditorSubHeaderComponent.prototype.renderContent = function renderContent() {
	    var newFileButton = null;
	    if (this.context.options.showNewButton) {
	      newFileButton = _globals.ReactBEM.createElement(_newFileButtonComponent2.default, { app: this.props.app });
	    }
	
	    var zoomComponent = null;
	    if (this.context.options.enableZoom) {
	      zoomComponent = _globals.ReactBEM.createElement(_zoomComponent2.default, null);
	    }
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:subHeader' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:left' },
	        newFileButton
	      ),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:right' },
	        _globals.ReactBEM.createElement(_undoButtonComponent2.default, null),
	        _globals.ReactBEM.createElement(_exportButtonComponent2.default, null)
	      ),
	      zoomComponent
	    );
	  };
	
	  return EditorSubHeaderComponent;
	}(_subHeaderComponent2.default);
	
	exports.default = EditorSubHeaderComponent;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _modalManager = __webpack_require__(34);
	
	var _modalManager2 = _interopRequireDefault(_modalManager);
	
	var _subHeaderButtonComponent = __webpack_require__(68);
	
	var _subHeaderButtonComponent2 = _interopRequireDefault(_subHeaderButtonComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ExportButtonComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ExportButtonComponent, _BaseComponent);
	
	  function ExportButtonComponent() {
	    (0, _classCallCheck3.default)(this, ExportButtonComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onButtonClick');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the button has been clicked
	   * @private
	   */
	
	
	  ExportButtonComponent.prototype._onButtonClick = function _onButtonClick() {
	    var _this2 = this;
	
	    var _context = this.context;
	    var options = _context.options;
	    var editor = _context.editor;
	    var editorScreen = _context.editorScreen;
	
	    var exportOptions = options.export;
	
	    editorScreen.switchToControls('home', null, function () {
	      var loadingModal = _modalManager2.default.instance.displayLoading(_this2._t('loading.exporting'));
	
	      // Give it some time to display the loading modal
	      setTimeout(function () {
	        editor.export(exportOptions.download).then(function () {
	          loadingModal.close();
	        });
	      }, 100);
	    });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ExportButtonComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var options = this.context.options;
	
	    if (!options.export.showButton) return null;
	
	    return _globals.ReactBEM.createElement(_subHeaderButtonComponent2.default, {
	      style: 'blue',
	      label: options.export.label || this._t('editor.export'),
	      icon: 'editor/export.png',
	      onClick: this._onButtonClick });
	  };
	
	  return ExportButtonComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = ExportButtonComponent;

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _fileLoader = __webpack_require__(226);
	
	var _fileLoader2 = _interopRequireDefault(_fileLoader);
	
	var _subHeaderButtonComponent = __webpack_require__(68);
	
	var _subHeaderButtonComponent2 = _interopRequireDefault(_subHeaderButtonComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EditorSubHeaderComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(EditorSubHeaderComponent, _BaseComponent);
	
	  function EditorSubHeaderComponent() {
	    (0, _classCallCheck3.default)(this, EditorSubHeaderComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onNewFile', '_onButtonClick');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  EditorSubHeaderComponent.prototype.componentDidMount = function componentDidMount() {
	    this._fileLoader = new _fileLoader2.default(this.refs.fileInput);
	    this._fileLoader.on('file', this._onNewFile);
	  };
	
	  /**
	   * Gets called when this component is about to be unmounted
	   */
	
	
	  EditorSubHeaderComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	    this._fileLoader.off('file', this._onNewFile);
	    this._fileLoader.dispose();
	    this._fileLoader = null;
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user has selected a new file
	   * @param {Image} image
	   */
	
	
	  EditorSubHeaderComponent.prototype._onNewFile = function _onNewFile(image) {
	    var editor = this.context.editor;
	
	    editor.reset();
	    editor.setImage(image);
	    editor.setZoom('auto');
	  };
	
	  /**
	   * Gets called when the button has been clicked
	   * @private
	   */
	
	
	  EditorSubHeaderComponent.prototype._onButtonClick = function _onButtonClick() {
	    var options = this.context.options;
	
	    if (options.webcam !== false && !_globals.Utils.isMobile()) {
	      this.props.app.switchToSplashScreen();
	    } else {
	      this._fileLoader.open();
	    }
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  EditorSubHeaderComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      null,
	      _globals.ReactBEM.createElement('input', { type: 'file', bem: 'b:hiddenFileInput', ref: 'fileInput' }),
	      _globals.ReactBEM.createElement(_subHeaderButtonComponent2.default, {
	        label: this._t('editor.new'),
	        icon: 'editor/new.png',
	        onClick: this._onButtonClick })
	    );
	  };
	
	  return EditorSubHeaderComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = EditorSubHeaderComponent;

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _subHeaderButtonComponent = __webpack_require__(68);
	
	var _subHeaderButtonComponent2 = _interopRequireDefault(_subHeaderButtonComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var UndoButtonComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(UndoButtonComponent, _BaseComponent);
	
	  function UndoButtonComponent() {
	    var _this$_events;
	
	    (0, _classCallCheck3.default)(this, UndoButtonComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onButtonClick', '_onHistoryUpdated', '_onFeaturesUpdated');
	
	    _this._events = (_this$_events = {}, (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.HISTORY_UPDATED, _this._onHistoryUpdated), (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.FEATURES_UPDATED, _this._onFeaturesUpdated), _this$_events);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the features have been enabled or disabled
	   * @private
	   */
	
	
	  UndoButtonComponent.prototype._onFeaturesUpdated = function _onFeaturesUpdated() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the history has been updated
	   * @private
	   */
	
	
	  UndoButtonComponent.prototype._onHistoryUpdated = function _onHistoryUpdated() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the button has been clicked
	   * @private
	   */
	
	
	  UndoButtonComponent.prototype._onButtonClick = function _onButtonClick() {
	    var editor = this.context.editor;
	
	    editor.undo();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  UndoButtonComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var editor = this.context.editor;
	
	    if (!editor.historyAvailable()) return null;
	
	    return _globals.ReactBEM.createElement(_subHeaderButtonComponent2.default, {
	      label: this._t('editor.undo'),
	      icon: 'editor/undo.png',
	      onClick: this._onButtonClick });
	  };
	
	  return UndoButtonComponent;
	}(_globals.BaseComponent);
	
	exports.default = UndoButtonComponent;

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ZoomComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ZoomComponent, _BaseComponent);
	
	  function ZoomComponent() {
	    var _this$_events;
	
	    (0, _classCallCheck3.default)(this, ZoomComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onZoomOutClick', '_onZoomInClick', '_onZoomDone', '_onFeaturesUpdated');
	
	    _this._events = (_this$_events = {}, (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.ZOOM_DONE, _this._onZoomDone), (0, _defineProperty3.default)(_this$_events, _globals.Constants.EVENTS.FEATURES_UPDATED, _this._onFeaturesUpdated), _this$_events);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the features have been updated
	   * @private
	   */
	
	
	  ZoomComponent.prototype._onFeaturesUpdated = function _onFeaturesUpdated() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the new zoom level has been applied
	   * @private
	   */
	
	
	  ZoomComponent.prototype._onZoomDone = function _onZoomDone() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the user clicks the "zoom out" button
	   * @param {Event} e
	   * @private
	   */
	
	
	  ZoomComponent.prototype._onZoomOutClick = function _onZoomOutClick(e) {
	    var editor = this.context.editor;
	
	    if (!editor.isFeatureEnabled('zoom')) return;
	
	    editor.zoomOut();
	  };
	
	  /**
	   * Gets called when the user clicks the "zoom in" button
	   * @param {Event} e
	   * @private
	   */
	
	
	  ZoomComponent.prototype._onZoomInClick = function _onZoomInClick(e) {
	    var editor = this.context.editor;
	
	    if (!editor.isFeatureEnabled('zoom')) return;
	
	    editor.zoomIn();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ZoomComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	    var enabled = editor.isFeatureEnabled('zoom');
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:editorScreen $e:zoom' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:button m:zoomOut',
	          onClick: this._onZoomOutClick,
	          className: enabled ? null : 'is-disabled' },
	        _globals.ReactBEM.createElement('img', { bem: 'e:image', src: this._getAssetPath('controls/minus.png', true) })
	      ),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:label' },
	        'Zoom',
	        _globals.ReactBEM.createElement('br', null),
	        Math.round(zoom * 100),
	        '%'
	      ),
	      _globals.ReactBEM.createElement(
	        'div',
	        {
	          bem: '$e:button m:zoomIn',
	          onClick: this._onZoomInClick,
	          className: enabled ? null : 'is-disabled' },
	        _globals.ReactBEM.createElement('img', { bem: 'e:image', src: this._getAssetPath('controls/plus.png', true) })
	      )
	    );
	  };
	
	  return ZoomComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = ZoomComponent;

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	var _itemComponent = __webpack_require__(107);
	
	var _itemComponent2 = _interopRequireDefault(_itemComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var StickerItemComponent = function (_ItemComponent) {
	  (0, _inherits3.default)(StickerItemComponent, _ItemComponent);
	
	  function StickerItemComponent() {
	    (0, _classCallCheck3.default)(this, StickerItemComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ItemComponent.call.apply(_ItemComponent, [this].concat(args)));
	
	    _this._id = _globals.SDKUtils.getUUID();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user starts dragging a knob
	   * @param  {String} side
	   * @param  {Vector2} position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._onKnobDragStart = function _onKnobDragStart(side, position, e) {
	    var sprite = this.props.sprite;
	
	    switch (side) {
	      case 'bottom':
	        this._initialPosition = this._getBottomDragKnobPosition();
	        break;
	      case 'top':
	        this._initialPosition = this._getTopDragKnobPosition();
	        break;
	    }
	
	    this._initialScale = sprite.getScale().clone();
	
	    this.props.onDragStart && this.props.onDragStart();
	  };
	
	  /**
	   * Gets called while the user drags a sticker
	   * @param  {String} side
	   * @param  {Vector2} offset
	   * @param  {Event} e
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._onKnobDrag = function _onKnobDrag(side, offset, e) {
	    var sprite = this.props.sprite;
	
	    var stickerPosition = this._getAbsoluteSpritePosition();
	    var newKnobPosition = this._initialPosition.clone().add(offset);
	
	    var halfDimensions = this._getStickerDimensions().divide(2);
	
	    // Calculate new rotation and scale from new knob position
	    var knobDistanceFromCenter = newKnobPosition.clone().subtract(stickerPosition);
	
	    var initialDistanceFromCenter = this._initialPosition.clone().subtract(stickerPosition);
	
	    var radians = void 0;
	
	    switch (side) {
	      case 'bottom':
	        radians = Math.atan2(knobDistanceFromCenter.y, knobDistanceFromCenter.x) - Math.atan2(halfDimensions.y, halfDimensions.x);
	        break;
	      case 'top':
	        radians = Math.atan2(knobDistanceFromCenter.y, knobDistanceFromCenter.x) - Math.atan2(-halfDimensions.y, -halfDimensions.x);
	        break;
	    }
	
	    var newScale = this._initialScale.clone().multiply(knobDistanceFromCenter.len() / initialDistanceFromCenter.len());
	
	    sprite.set({
	      scale: newScale,
	      rotation: radians
	    });
	  };
	
	  /**
	   * Gets called when the user stops dragging a knob
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._onKnobDragStop = function _onKnobDragStop() {
	    this.props.onDragStop && this.props.onDragStop();
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the style object for the bottom right drag knob
	   * @return {Object}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._getBottomDragKnobStyle = function _getBottomDragKnobStyle() {
	    var knobPosition = this._getBottomDragKnobPosition();
	
	    return {
	      left: knobPosition.x,
	      top: knobPosition.y
	    };
	  };
	
	  /**
	   * Returns the style object for the top right drag knob
	   * @return {Object}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._getTopDragKnobStyle = function _getTopDragKnobStyle() {
	    var knobPosition = this._getTopDragKnobPosition();
	
	    return {
	      left: knobPosition.x,
	      top: knobPosition.y
	    };
	  };
	
	  /**
	   * Builds the style object for this sticker
	   * @return {Object}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._getStickerStyle = function _getStickerStyle() {
	    var sprite = this.props.sprite;
	
	
	    var stickerDimensions = this._getStickerDimensions();
	    var spritePosition = this._getAbsoluteSpritePosition().subtract(stickerDimensions.clone().divide(2));
	
	    var degrees = sprite.getRotation() * 180 / Math.PI;
	    var transform = 'rotate(' + degrees.toFixed(2) + 'deg)';
	
	    if (sprite.getFlipVertically()) {
	      transform += ' rotateX(180deg)';
	    }
	
	    if (sprite.getFlipHorizontally()) {
	      transform += ' rotateY(180deg)';
	    }
	
	    return {
	      top: spritePosition.y,
	      left: spritePosition.x,
	      width: stickerDimensions.x,
	      height: stickerDimensions.y,
	      WebkitTransform: transform,
	      msTransform: transform,
	      MozTransform: transform,
	      OTransform: transform
	    };
	  };
	
	  // -------------------------------------------------------------------------- CALCULATIONS
	
	  /**
	   * Calculates the sticker dimensions
	   * @param  {Object} sticker
	   * @return {Vector2}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._getStickerDimensions = function _getStickerDimensions() {
	    var sprite = this.props.sprite;
	    var editor = this.context.editor;
	
	    var image = sprite.getImage();
	
	    return new _globals.Vector2(image.width, image.height).multiply(sprite.getScale()).multiply(editor.getZoom()).abs();
	  };
	
	  /**
	   * Calculates the drag bottom right knob's position
	   * @return {Vector2}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._getBottomDragKnobPosition = function _getBottomDragKnobPosition() {
	    var sprite = this.props.sprite;
	
	    var stickerPosition = this._getAbsoluteSpritePosition();
	    var stickerRotation = sprite.getRotation();
	
	    // Calculate sin and cos for rotation
	    var sin = Math.sin(stickerRotation || 0);
	    var cos = Math.cos(stickerRotation || 0);
	
	    // Calculate sticker dimensions
	    var halfDimensions = this._getStickerDimensions().divide(2);
	
	    // Calculate knob position
	    return stickerPosition.clone().add(halfDimensions.x * cos - halfDimensions.y * sin, halfDimensions.x * sin + halfDimensions.y * cos);
	  };
	
	  /**
	   * Calculates the drag top right knob's position
	   * @return {Vector2}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._getTopDragKnobPosition = function _getTopDragKnobPosition() {
	    var sprite = this.props.sprite;
	
	    var stickerPosition = this._getAbsoluteSpritePosition();
	    var stickerRotation = sprite.getRotation();
	
	    // Calculate sin and cos for rotation
	    var sin = Math.sin(stickerRotation || 0);
	    var cos = Math.cos(stickerRotation || 0);
	
	    // Calculate sticker dimensions
	    var halfDimensions = this._getStickerDimensions(sprite).divide(2);
	
	    // Calculate knob position
	    return stickerPosition.clone().subtract(halfDimensions.x * cos - halfDimensions.y * sin, halfDimensions.x * sin + halfDimensions.y * cos);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the knobs for this item
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._renderKnobs = function _renderKnobs() {
	    var knobs = [];
	    if (this.props.selected) {
	      knobs = [_globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onKnobDragStart.bind(this, 'bottom'),
	          onStop: this._onKnobDragStop.bind(this, 'bottom'),
	          onDrag: this._onKnobDrag.bind(this, 'bottom') },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:knob $b:knob', style: this._getBottomDragKnobStyle() },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
	        )
	      ), _globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onKnobDragStart.bind(this, 'top'),
	          onStop: this._onKnobDragStop.bind(this, 'top'),
	          onDrag: this._onKnobDrag.bind(this, 'top') },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:knob $b:knob', style: this._getTopDragKnobStyle() },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-down.png', true) })
	        )
	      )];
	    }
	    return knobs;
	  };
	
	  /**
	   * Renders the SVG filters
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._renderSVGFilter = function _renderSVGFilter() {
	    var sprite = this.props.sprite;
	
	    var adjustments = sprite.getAdjustments();
	    var brightness = adjustments.getBrightness();
	    var saturation = adjustments.getSaturation();
	    var contrast = adjustments.getContrast();
	
	    var filtersSVG = '<filter id=\'pesdk-sticker-' + this._id + '-filter\'>\n        <feComponentTransfer>\n          <feFuncR type=\'linear\' intercept=\'' + brightness + '\' />\n          <feFuncG type=\'linear\' intercept=\'' + brightness + '\' />\n          <feFuncB type=\'linear\' intercept=\'' + brightness + '\' />\n        </feComponentTransfer>\n        <feColorMatrix type=\'saturate\' values=\'' + saturation + '\' />\n        <feComponentTransfer>\n          <feFuncR type=\'linear\' slope=\'' + contrast + '\' intercept=\'' + (-(0.5 * contrast) + 0.5) + '\' />\n          <feFuncG type=\'linear\' slope=\'' + contrast + '\' intercept=\'' + (-(0.5 * contrast) + 0.5) + '\' />\n          <feFuncB type=\'linear\' slope=\'' + contrast + '\' intercept=\'' + (-(0.5 * contrast) + 0.5) + '\' />\n        </feComponentTransfer>\n      </filter>';
	
	    // We added `key: Math.random()` because in Safari, dangerouslySetInnerHTML
	    // would not update without that...
	    // https://github.com/facebook/react/issues/2863
	    return _globals.ReactBEM.createElement(
	      'svg',
	      { width: '0', height: '0', 'color-interpolation-filters': 'sRGB', is: 'svg' },
	      _globals.ReactBEM.createElement('defs', { key: Math.random(), dangerouslySetInnerHTML: {
	          __html: filtersSVG
	        } })
	    );
	  };
	
	  /**
	   * Renders the draggable item
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  StickerItemComponent.prototype._renderItem = function _renderItem() {
	    var sprite = this.props.sprite;
	
	    var stickerStyle = this._getStickerStyle();
	    var className = this.props.selected ? 'is-selected' : null;
	    var stickerImageStyle = { filter: 'url("#pesdk-sticker-' + this._id + '-filter")' };
	
	    return _globals.ReactBEM.createElement(
	      _draggableComponent2.default,
	      {
	        onStart: this._onItemDragStart,
	        onStop: this._onItemDragStop,
	        onDrag: this._onItemDrag,
	        disabled: !this.props.selected },
	      _globals.ReactBEM.createElement(
	        'div',
	        {
	          bem: '$e:sticker',
	          style: stickerStyle,
	          className: className },
	        _globals.ReactBEM.createElement(
	          'svg',
	          { width: stickerStyle.width, height: stickerStyle.height, 'color-interpolation-filters': 'sRGB', is: 'svg' },
	          _globals.ReactBEM.createElement('image', {
	            xlinkHref: sprite.getImage().src,
	            width: stickerStyle.width,
	            height: stickerStyle.height,
	            style: stickerImageStyle
	          })
	        )
	      )
	    );
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  StickerItemComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: 'b:spritesCanvasControls' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:item e:container' },
	        this._renderSVGFilter(),
	        this._renderItem(),
	        this._renderKnobs()
	      )
	    );
	  };
	
	  return StickerItemComponent;
	}(_itemComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = StickerItemComponent;

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _draggableComponent = __webpack_require__(16);
	
	var _draggableComponent2 = _interopRequireDefault(_draggableComponent);
	
	var _itemComponent = __webpack_require__(107);
	
	var _itemComponent2 = _interopRequireDefault(_itemComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TextItemComponent = function (_ItemComponent) {
	  (0, _inherits3.default)(TextItemComponent, _ItemComponent);
	
	  function TextItemComponent() {
	    (0, _classCallCheck3.default)(this, TextItemComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ItemComponent.call.apply(_ItemComponent, [this].concat(args)));
	
	    _this._bindAll('_onTextChange', '_onItemDoubleClick', '_onItemTouchStart', '_onItemTouchEnd', '_onResizeKnobDragStart', '_onResizeKnobDrag', '_onResizeKnobDragStop', '_onRotationKnobDragStart', '_onRotationKnobDrag', '_onRotationKnobDragStop');
	
	    _this.state = {
	      editMode: false
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user has changed the text
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onTextChange = function _onTextChange(e) {
	    var sprite = this.props.sprite;
	
	    sprite.setText(e.target.value);
	  };
	
	  /**
	   * Gets called when the user double clicks the text. Turns the sprite into
	   * editing mode.
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onItemDoubleClick = function _onItemDoubleClick() {
	    var _this2 = this;
	
	    this.setState({ editMode: true }, function () {
	      _this2.refs.textarea.focus();
	      _this2.refs.textarea.select();
	    });
	  };
	
	  /**
	   * Gets called when the user starts touching the item
	   * @param {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onItemTouchStart = function _onItemTouchStart(e) {
	    this._initialTouchPosition = _globals.Utils.getEventPosition(e);
	    this._tapStartAt = (0, _globals.now)();
	  };
	
	  /**
	   * Gets called when the user stops touching the item
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onItemTouchEnd = function _onItemTouchEnd() {
	    // Recognize double tap
	    if ((0, _globals.now)() - this._tapStartAt <= 100) {
	      // Touch didn't last longer than 100ms => recognized as tap
	      if (typeof this._lastTapAt !== 'undefined' && (0, _globals.now)() - this._lastTapAt <= 300) {
	        // Last tap was no longer than 300ms ago => recognized as double tap
	        this._onItemDoubleClick();
	      }
	      this._lastTapAt = (0, _globals.now)();
	    }
	  };
	
	  // -------------------------------------------------------------------------- ROTATION DRAGGING
	
	  /**
	   * Gets called when the user starts dragging the resize knob
	   * @param  {Vector2} position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onRotationKnobDragStart = function _onRotationKnobDragStart(position, e) {
	    this._dragging = true;
	    this._initialPosition = this._getRotationKnobPosition();
	
	    this.props.onDragStart && this.props.onDragStart();
	  };
	
	  /**
	   * Gets called while the user rotates the text
	   * @param  {Vector2} offset
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onRotationKnobDrag = function _onRotationKnobDrag(offset, e) {
	    var sprite = this.props.sprite;
	    var editor = this.context.editor;
	
	
	    var spritePosition = this._getAbsoluteSpritePosition();
	    var newKnobPosition = this._initialPosition.clone().add(offset);
	
	    // Calculate new rotation and scale from new knob position
	    var knobDistanceFromCenter = newKnobPosition.clone().subtract(spritePosition);
	
	    var boundingBox = sprite.getBoundingBox(editor.getSDK(), true);
	    var radians = Math.atan2(knobDistanceFromCenter.y, knobDistanceFromCenter.x) - Math.atan2(boundingBox.y, boundingBox.x / 2);
	
	    sprite.setRotation(radians);
	  };
	
	  /**
	   * Gets called when the user stops rotating the text
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onRotationKnobDragStop = function _onRotationKnobDragStop(e) {
	    this.props.onDragStop && this.props.onDragStop();
	  };
	
	  // -------------------------------------------------------------------------- RESIZE DRAGGING
	
	  /**
	   * Gets called when the user starts resizing the text
	   * @param  {Vector2} position
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onResizeKnobDragStart = function _onResizeKnobDragStart(position, e) {
	    this._initialPosition = this._getResizeKnobPosition();
	
	    this.props.onDragStart && this.props.onDragStart();
	  };
	
	  /**
	   * Gets called while the user resizes the text
	   * @param  {Vector2} offset
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onResizeKnobDrag = function _onResizeKnobDrag(offset, e) {
	    var sprite = this.props.sprite;
	
	    var textRotation = sprite.getRotation();
	
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    var cos = Math.cos(textRotation);
	    var sin = Math.sin(textRotation);
	
	    var newKnobPosition = this._initialPosition.clone().add(offset);
	    var position = this._getAbsoluteSpritePosition();
	    var distanceToPosition = newKnobPosition.clone().subtract(position);
	
	    var newMaxWidth = Math.max((distanceToPosition.x * cos + distanceToPosition.y * sin) / zoom * 2, 100);
	    sprite.setMaxWidth(newMaxWidth);
	  };
	
	  /**
	   * Gets called when the user stops resizing the text
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextItemComponent.prototype._onResizeKnobDragStop = function _onResizeKnobDragStop(e) {
	    this.props.onDragStop && this.props.onDragStop();
	  };
	
	  // -------------------------------------------------------------------------- STYLING
	
	  /**
	   * Returns the style object for the rotation knob
	   * @return {Object}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getRotationKnobStyle = function _getRotationKnobStyle() {
	    var position = this._getRotationKnobPosition();
	    return {
	      left: position.x,
	      top: position.y
	    };
	  };
	
	  /**
	   * Returns the style object for the resize knob
	   * @return {Object}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getResizeKnobStyle = function _getResizeKnobStyle() {
	    var position = this._getResizeKnobPosition();
	    return {
	      left: position.x,
	      top: position.y
	    };
	  };
	
	  /**
	   * Returns the style object for the remove knob
	   * @return {Object}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getRemoveKnobStyle = function _getRemoveKnobStyle() {
	    var sprite = this.props.sprite;
	    var editor = this.context.editor;
	
	
	    var sin = Math.sin(sprite.getRotation());
	    var cos = Math.cos(sprite.getRotation());
	
	    var boundingBox = sprite.getBoundingBox(editor.getSDK(), true);
	    var halfDimensions = boundingBox.clone().divide(2);
	    var position = sprite.getPosition().clone().multiply(editor.getZoom()).add(-halfDimensions.x * cos, -halfDimensions.x * sin);
	
	    return {
	      left: position.x,
	      top: position.y
	    };
	  };
	
	  /**
	   * Returns the style object for the given text object
	   * @return {Object}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getTextStyle = function _getTextStyle() {
	    var editor = this.context.editor;
	    var sprite = this.props.sprite;
	
	    var sdk = editor.getSDK();
	    var outputDimensions = editor.getOutputDimensions();
	    var style = sprite.getDOMStyle(sdk, outputDimensions);
	
	    var spritePosition = this._getAbsoluteSpritePosition();
	    var boundingBox = sprite.getBoundingBox(editor.getSDK(), true);
	    style.height = Math.min(boundingBox.y, outputDimensions.y - spritePosition.y);
	
	    return style;
	  };
	
	  /**
	   * Returns the style object for the item container
	   * @return {Object}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getItemContainerStyle = function _getItemContainerStyle() {
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    var sprite = this.props.sprite;
	
	    var textPosition = sprite.getPosition().clone().multiply(zoom);
	
	    var degrees = sprite.getRotation() * 180 / Math.PI;
	    var transform = 'rotateZ(' + degrees.toFixed(2) + 'deg)';
	    var transformOrigin = '50% 0';
	
	    var maxWidth = sprite.getMaxWidth() * zoom;
	    return {
	      width: maxWidth,
	      left: textPosition.x,
	      top: textPosition.y,
	      marginLeft: maxWidth * -0.5,
	      transform: transform,
	      MozTransform: transform,
	      msTransform: transform,
	      WebkitTransform: transform,
	      transformOrigin: transformOrigin,
	      MozTransformOrigin: transformOrigin,
	      msTransformOrigin: transformOrigin,
	      WebkitTransformOrigin: transformOrigin
	    };
	  };
	
	  // -------------------------------------------------------------------------- CALCULATIONS
	
	  /**
	   * Returns the position of the rotation knob
	   * @return {Vector2}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getRotationKnobPosition = function _getRotationKnobPosition() {
	    var sprite = this.props.sprite;
	    var editor = this.context.editor;
	
	    var zoom = editor.getZoom();
	
	    var sin = Math.sin(sprite.getRotation());
	    var cos = Math.cos(sprite.getRotation());
	
	    var boundingBox = sprite.getBoundingBox(editor.getSDK(), true);
	    var halfDimensions = boundingBox.clone().divide(2);
	    var position = sprite.getPosition().clone().multiply(zoom).add(halfDimensions.x * cos - boundingBox.y * sin, halfDimensions.x * sin + boundingBox.y * cos);
	    return position;
	  };
	
	  /**
	   * Returns the position of the resize knob
	   * @return {Vector2}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._getResizeKnobPosition = function _getResizeKnobPosition() {
	    var sprite = this.props.sprite;
	    var editor = this.context.editor;
	
	
	    var sin = Math.sin(sprite.getRotation());
	    var cos = Math.cos(sprite.getRotation());
	
	    var boundingBox = sprite.getBoundingBox(editor.getSDK(), true);
	    var halfDimensions = boundingBox.clone().divide(2);
	    var position = sprite.getPosition().clone().multiply(editor.getZoom()).add(halfDimensions.x * cos, halfDimensions.x * sin);
	    return position;
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the knobs for this item
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._renderKnobs = function _renderKnobs() {
	    var knobs = [];
	    if (this.props.selected && !this.state.editMode) {
	      knobs = [_globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onRotationKnobDragStart,
	          onDrag: this._onRotationKnobDrag,
	          onStop: this._onRotationKnobDragStop },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:knob m:rotate $b:knob', style: this._getRotationKnobStyle() },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon m:larger', src: this._getAssetPath('controls/knobs/rotate.png', true) })
	        )
	      ), _globals.ReactBEM.createElement(
	        _draggableComponent2.default,
	        {
	          onStart: this._onResizeKnobDragStart,
	          onDrag: this._onResizeKnobDrag,
	          onStop: this._onResizeKnobDragStop },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:knob m:resize $b:knob', style: this._getResizeKnobStyle() },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/resize-diagonal-up.png', true) })
	        )
	      ), _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:knob $b:knob', style: this._getRemoveKnobStyle(), onClick: this._onRemoveClick },
	        _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/knobs/remove.png', true) })
	      )];
	    }
	    return knobs;
	  };
	
	  /**
	   * Renders the draggable item
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  TextItemComponent.prototype._renderItem = function _renderItem() {
	    var sprite = this.props.sprite;
	
	
	    var content = [];
	    content = [_globals.ReactBEM.createElement('textarea', {
	      bem: 'e:content',
	      ref: 'textarea',
	      style: this._getTextStyle(),
	      defaultValue: sprite.getText(),
	      disabled: !this.state.editMode,
	      onChange: this._onTextChange })];
	
	    var textBEM = '$e:text';
	    if (this.props.selected) {
	      textBEM += ' m:selected';
	    }
	
	    if (!this.state.editMode) {
	      content.push(_globals.ReactBEM.createElement('div', {
	        bem: 'e:disabledOverlay',
	        onDoubleClick: this._onItemDoubleClick,
	        onTouchStart: this._onItemTouchStart,
	        onTouchEnd: this._onItemTouchEnd }));
	    }
	
	    return _globals.ReactBEM.createElement(
	      _draggableComponent2.default,
	      {
	        onStart: this._onItemDragStart,
	        onStop: this._onItemDragStop,
	        onDrag: this._onItemDrag,
	        disabled: !this.props.selected || this.props.selected && this.state.editMode },
	      _globals.ReactBEM.createElement(
	        'div',
	        {
	          bem: '$e:text',
	          style: this._getItemContainerStyle(),
	          className: this.props.selected ? 'is-selected' : null },
	        content
	      )
	    );
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  TextItemComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: 'b:spritesCanvasControls' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$e:item e:container' },
	        this._renderItem(),
	        this._renderKnobs()
	      )
	    );
	  };
	
	  return TextItemComponent;
	}(_itemComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = TextItemComponent;

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _stickerControlsComponent = __webpack_require__(205);
	
	var _stickerControlsComponent2 = _interopRequireDefault(_stickerControlsComponent);
	
	var _spritesCanvasControlsComponent = __webpack_require__(108);
	
	var _spritesCanvasControlsComponent2 = _interopRequireDefault(_spritesCanvasControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Sticker = _globals.SDK.Operations.SpriteOperation.Sticker; /*
	                                                                * This file is part of PhotoEditorSDK.
	                                                                *
	                                                                * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                                                                * All rights reserved.
	                                                                *
	                                                                * Redistribution and use in source and binary forms, without
	                                                                * modification, are permitted provided that the following license agreement
	                                                                * is approved and a legal/financial contract was signed by the user.
	                                                                * The license agreement can be found under following link:
	                                                                *
	                                                                * https://www.photoeditorsdk.com/LICENSE.txt
	                                                                */
	
	/**
	 * The sticker controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	
	var StickerControls = function (_Controls) {
	  (0, _inherits3.default)(StickerControls, _Controls);
	
	  function StickerControls() {
	    (0, _classCallCheck3.default)(this, StickerControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user leaves these controls
	   * @this {StickerControlsComponent}
	   * @override
	   * @ignore
	   */
	
	  StickerControls.onExit = function onExit() {
	    var editor = this.context.editor;
	
	    var operation = this.getSharedState('operation');
	
	    editor.addHistory(operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
	
	    operation.setEnabled(true);
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	    editor.render();
	  };
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {StickerControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	
	  StickerControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operation = editor.getOrCreateOperation('sprite');
	    var operationExistedBefore = editor.operationExists('sprite');
	    var sprites = operation.getSprites();
	    var stickers = operation.getSpritesOfType(Sticker);
	    var initialOptions = operation.serializeOptions();
	
	    operation.setEnabled(false);
	    editor.setZoom('auto');
	
	    this.setSharedState({
	      operationExistedBefore: operationExistedBefore, operation: operation, sprites: sprites, stickers: stickers, initialOptions: initialOptions
	    });
	  };
	
	  /**
	   * Checks if there is something at the given position that
	   * would cause the UI to switch to this control on click
	   * @param  {PhotoEditorSDK.Math.Vector2} position
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {*}
	   * @override
	   * @ignore
	   */
	
	
	  StickerControls.clickAtPosition = function clickAtPosition(position, editor) {
	    if (!editor.operationExists('sprite')) return false;
	
	    var operation = editor.getOrCreateOperation('sprite');
	    var sprite = operation.getSpriteAtPosition(position);
	    if (sprite && sprite instanceof Sticker) {
	      return { selectedSprite: sprite };
	    } else {
	      return false;
	    }
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @override
	   * @ignore
	   */
	
	
	  StickerControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('sticker');
	  };
	
	  return StickerControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	StickerControls.controlsComponent = _stickerControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	StickerControls.canvasControlsComponent = _spritesCanvasControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	StickerControls.identifier = 'sticker';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	StickerControls.iconPath = 'controls/overview/sticker.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	StickerControls.languageKey = 'controls.overview.sticker';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 * @property {Object[]} [categories = []]
	 * @property {Boolean} [replaceCategories = false]
	 * @property {String[]} [selectableStickers = null]
	 * @property {Boolean} [tooltips = false]
	 */
	StickerControls.defaultOptions = {
	  categories: [],
	  replaceCategories: false,
	  selectableStickers: null,
	  tooltips: false
	};
	
	exports.default = StickerControls;

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(51);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	var _categoryDropdownComponent = __webpack_require__(105);
	
	var _categoryDropdownComponent2 = _interopRequireDefault(_categoryDropdownComponent);
	
	var _modalManager = __webpack_require__(34);
	
	var _modalManager2 = _interopRequireDefault(_modalManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var StickerOverviewControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(StickerOverviewControlsComponent, _ControlsComponent);
	
	  function StickerOverviewControlsComponent() {
	    (0, _classCallCheck3.default)(this, StickerOverviewControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._bindAll('_onStickerMouseLeave', '_renderTooltipCanvas', '_onCategoryChange');
	
	    _this._operation = _this.getSharedState('operation');
	    _this._sprites = _this.getSharedState('sprites');
	    _this._stickers = _this.getSharedState('stickers');
	
	    _this._categories = [];
	    _this._initStickers(_this.props.options.categories);
	
	    _this.state = {
	      category: 'all'
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user switches the category
	   * @param  {Object} category
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._onCategoryChange = function _onCategoryChange(category) {
	    var _this2 = this;
	
	    this.setState({ category: category.name }, function () {
	      _this2._renderStickers();
	      _this2.refs.scrollbar.update();
	    });
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component is mounted
	   */
	
	
	  StickerOverviewControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    _ControlsComponent.prototype.componentDidMount.call(this);
	
	    if (this.props.options.stickersJSONPath) {
	      this._loadExternalStickers();
	    } else {
	      this._renderStickers();
	    }
	
	    var editor = this.context.editor;
	
	    editor.setZoom('auto', function () {
	      editor.disableFeatures('zoom', 'drag');
	    });
	  };
	
	  // -------------------------------------------------------------------------- EXTERNAL STICKER LOADING
	
	  /**
	   * Loads the stickers from an external JSON source
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._loadExternalStickers = function _loadExternalStickers() {
	    var _this3 = this;
	
	    // Display loading modal after 100ms
	    var loadingModal = null;
	    var loadTimeout = setTimeout(function () {
	      loadingModal = _modalManager2.default.instance.displayLoading(_this3._t('loading.loading'));
	    }, 100);
	
	    // Called when loading is done. Cancels the loading timeout
	    // or closes the loadingModal in case it has been opened
	    var doneLoading = function doneLoading() {
	      if (loadTimeout) {
	        clearTimeout(loadTimeout);
	        loadTimeout = null;
	      }
	      if (loadingModal) loadingModal.close();
	    };
	
	    // Make sure not to show any stickers
	    this._availableStickers = [];
	    this.forceUpdate();
	
	    var url = this.props.options.stickersJSONPath;
	    _globals.Utils.getJSONP(url).then(function (result) {
	      doneLoading();
	
	      if (result.version === '1.0') {
	        // Backwards compatibility for stickers.json version 1.0
	        _this3._initStickers([{
	          name: 'all',
	          label: 'All',
	          stickers: result.stickers
	        }]);
	      } else if (result.version === '1.1') {
	        _this3._initStickers(result.categories);
	      }
	
	      _this3.forceUpdate(function () {
	        _this3.refs.scrollbar.update();
	        _this3._renderStickers();
	      });
	    }).catch(function (e) {
	      doneLoading();
	
	      console.log(e.stack);
	      var errorModal = _modalManager2.default.instance.displayError(_this3._t('errors.loadingStickersFailed.title'), e.message);
	      errorModal.on('close', function () {
	        _this3.props.onBack();
	      });
	    });
	  };
	
	  // -------------------------------------------------------------------------- STICKER RENDERING
	
	  /**
	   * Renders the stickers on the canvas preview elements
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._renderStickers = function _renderStickers() {
	    var _this4 = this;
	
	    var stickers = this._categoriesById[this.state.category].stickers;
	
	    stickers.forEach(function (sticker, i) {
	      return _this4._renderSticker(i, sticker);
	    });
	  };
	
	  /**
	   * Renders the sticker on the tooltip canvas
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._renderTooltipCanvas = function _renderTooltipCanvas() {
	    var _this5 = this;
	
	    var hoveredSticker = this.state.hoveredSticker;
	
	    var image = new window.Image();
	    image.addEventListener('load', function () {
	      if (!_this5.state.tooltipVisible || _this5.state.hoveredSticker !== hoveredSticker) {
	        return;
	      }
	
	      var canvas = _this5.refs.tooltipCanvas;
	      canvas.width = canvas.offsetWidth;
	      canvas.height = canvas.offsetHeight;
	
	      var context = canvas.getContext('2d');
	      var scale = Math.min(canvas.width / image.width, canvas.height / image.height);
	      var drawSize = new _globals.Vector2(image.width, image.height).multiply(scale);
	      var drawPosition = new _globals.Vector2(canvas.width, canvas.height).divide(2).subtract(drawSize.clone().divide(2));
	
	      context.drawImage(image, 0, 0, image.width, image.height, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
	    });
	
	    var resolvedStickerPath = this._getAssetPath((hoveredSticker.images.mediaMedium || hoveredSticker.images.mediaBase).uri);
	    image.src = resolvedStickerPath;
	  };
	
	  /**
	   * Renders the given sticker on the canvas with the given index
	   * @param  {Number} index
	   * @param  {Object} sticker
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._renderSticker = function _renderSticker(index, sticker) {
	    var editor = this.context.editor;
	
	    var sdk = editor.getSDK();
	
	    var resolvedStickerPath = this._getAssetPath(sticker.images.mediaThumb.uri);
	    var canvas = this.refs['canvas-' + index];
	
	    var pixelRatio = sdk.getPixelRatio();
	    canvas.width = canvas.offsetWidth * pixelRatio;
	    canvas.height = canvas.offsetHeight * pixelRatio;
	
	    canvas.style.width = canvas.offsetWidth + 'px';
	    canvas.style.height = canvas.offsetHeight + 'px';
	
	    var context = canvas.getContext('2d');
	
	    var image = new window.Image();
	    image.addEventListener('load', function () {
	      var scale = Math.min(canvas.width / image.width, canvas.height / image.height);
	      var drawSize = new _globals.Vector2(image.width, image.height).multiply(scale);
	      var drawPosition = new _globals.Vector2(canvas.width, canvas.height).divide(2).subtract(drawSize.clone().divide(2));
	
	      context.drawImage(image, 0, 0, image.width, image.height, drawPosition.x, drawPosition.y, drawSize.x, drawSize.y);
	    });
	    image.src = resolvedStickerPath;
	  };
	
	  // -------------------------------------------------------------------------- STICKERS
	
	  /**
	   * Initializes the available stickers
	   * @param {Object[]} [categories]
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._initStickers = function _initStickers(categories) {
	    var _this6 = this;
	
	    var replaceCategories = this.props.options.replaceCategories;
	
	    var defaultCategories = _globals.Constants.DEFAULTS.STICKER_CATEGORIES;
	
	    if (!categories) {
	      this._categories = defaultCategories.slice(0);
	    } else {
	      if (replaceCategories) {
	        this._categories = categories.slice(0);
	      } else {
	        this._categories = _globals.Utils.mergeCategories(defaultCategories, categories, 'stickers');
	      }
	    }
	
	    var allCategory = {
	      name: 'all',
	      stickers: this._categories.map(function (c) {
	        return c.stickers;
	      }).reduce(function (a, b) {
	        return a.concat(b);
	      })
	    };
	    this._categories.unshift(allCategory);
	
	    // Build cat id => category hash
	    this._categoriesById = {};
	    this._categories.forEach(function (c) {
	      _this6._categoriesById[c.name] = c;
	    });
	
	    // @TODO Fix selectable stickers option
	    // if (selectableStickers && selectableStickers.length) {
	    //   this._availableStickers = Utils.select(this._availableStickers, selectableStickers, (r) => r.name)
	    // }
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when a sticker has been clicked
	   * @param  {Object} sticker
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._onStickerClick = function _onStickerClick(sticker) {
	    var _this7 = this;
	
	    var resolvedStickerPath = this._getAssetPath(sticker.images.mediaBase.uri);
	    var image = new window.Image();
	
	    var loadingModal = void 0;
	    var loadTimeout = setTimeout(function () {
	      loadingModal = _modalManager2.default.instance.displayLoading(_this7._t('loading.loading'));
	    }, 100);
	
	    image.addEventListener('load', function () {
	      if (loadingModal) loadingModal.close();
	      if (loadTimeout) {
	        clearTimeout(loadTimeout);
	        loadTimeout = null;
	      }
	
	      var editor = _this7.context.editor;
	
	
	      var sprite = _this7._operation.createSticker({
	        name: sticker.name,
	        image: image,
	        position: editor.getFinalDimensions().divide(2),
	        scale: new _globals.Vector2(1.0, 1.0),
	        rotation: 0
	      });
	      _this7._operation.addSprite(sprite);
	      _this7._stickers.push(sprite);
	
	      editor.render(function () {
	        // Broadcast new state
	        _this7.setSharedState({
	          selectedSprite: sprite,
	          sprites: _this7._sprites,
	          stickers: _this7._stickers
	        });
	      });
	    });
	
	    image.addEventListener('error', function () {
	      if (loadingModal) loadingModal.close();
	      if (loadTimeout) {
	        clearTimeout(loadTimeout);
	        loadTimeout = null;
	      }
	
	      _modalManager2.default.instance.displayError(_this7._t('errors.imageLoadFail.title'), _this7._t('errors.imageLoadFail.text', { path: image.src }));
	    });
	
	    image.crossOrigin = 'Anonymous';
	    image.src = resolvedStickerPath;
	  };
	
	  /**
	   * Gets called when the user starts hovering a sticker
	   * @param  {String} stickerPath
	   * @param  {Event} e
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._onStickerMouseEnter = function _onStickerMouseEnter(stickerPath, e) {
	    var _this8 = this;
	
	    this.setState({
	      tooltipVisible: true,
	      hoveredSticker: stickerPath,
	      hoveredStickerElement: e.currentTarget
	    }, function () {
	      _this8._renderTooltipCanvas();
	      _this8._updateTooltipPosition();
	    });
	  };
	
	  /**
	   * Updates the tooltip position to match the currently hovered
	   * sticker's position
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._updateTooltipPosition = function _updateTooltipPosition() {
	    var el = this.state.hoveredStickerElement;
	    var parent = el.parentNode;
	    var boundingRect = el.getBoundingClientRect();
	    var parentBoundingRect = parent.getBoundingClientRect();
	
	    this.setState({
	      tooltipPosition: boundingRect.left - parentBoundingRect.left + boundingRect.width * 0.5
	    });
	  };
	
	  /**
	   * Gets called when the user does no longer hover a sticker
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._onStickerMouseLeave = function _onStickerMouseLeave() {
	    this.setState({
	      tooltipVisible: false,
	      hoveredSticker: null
	    });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the list items for this control
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._renderListItems = function _renderListItems() {
	    var _this9 = this;
	
	    var stickers = this._categoriesById[this.state.category].stickers;
	
	    return stickers.map(function (sticker, i) {
	      var options = _this9.props.options;
	
	
	      var itemEvents = options.tooltips ? {
	        onMouseEnter: _this9._onStickerMouseEnter.bind(_this9, sticker),
	        onMouseLeave: _this9._onStickerMouseLeave
	      } : null;
	
	      return _globals.ReactBEM.createElement(
	        'li',
	        (0, _extends3.default)({
	          bem: '$b:stickersControls $e:item',
	          key: sticker.name,
	          onClick: _this9._onStickerClick.bind(_this9, sticker)
	        }, itemEvents),
	        _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'canvas-' + i })
	      );
	    });
	  };
	
	  /**
	   * Renders the tooltip (if present)
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  StickerOverviewControlsComponent.prototype._renderTooltip = function _renderTooltip() {
	    var tooltipVisible = this.props.options.tooltips && this.state.tooltipVisible;
	
	    var style = {
	      left: this.state.tooltipPosition
	    };
	
	    return tooltipVisible ? _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:empty' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:stickersControls $e:tooltip',
	          visible: this.state.tooltipVisible,
	          style: style },
	        _globals.ReactBEM.createElement('canvas', { bem: 'e:canvas', ref: 'tooltipCanvas' })
	      )
	    ) : null;
	  };
	
	  /**
	   * Renders the controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  StickerOverviewControlsComponent.prototype.renderControls = function renderControls() {
	    var _this10 = this;
	
	    var listItems = this._renderListItems();
	    var tooltip = this._renderTooltip();
	
	    var categories = this._categories.map(function (c) {
	      return {
	        name: c.name,
	        label: _this10._t('controls.sticker.categories.' + c.name),
	        icon: _this10._getAssetPath('controls/stickers/categories/' + c.name + '.png', true)
	      };
	    });
	    var selectedCategory = {
	      name: this.state.category,
	      label: this._t('controls.sticker.categories.' + this.state.category),
	      icon: this._getAssetPath('controls/stickers/categories/' + this.state.category + '.png', true)
	    };
	
	    return [tooltip, _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:categoryDropdown' },
	      _globals.ReactBEM.createElement(_categoryDropdownComponent2.default, {
	        items: categories,
	        selectedItem: selectedCategory,
	        onChange: this._onCategoryChange })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        { ref: 'scrollbar' },
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    )];
	  };
	
	  return StickerOverviewControlsComponent;
	}(_controlsComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = StickerOverviewControlsComponent;

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var StickerControlsOverlayComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(StickerControlsOverlayComponent, _BaseComponent);
	
	  function StickerControlsOverlayComponent() {
	    (0, _classCallCheck3.default)(this, StickerControlsOverlayComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks one of the flip items
	   * @param  {String} direction
	   * @param  {Event} e
	   * @private
	   */
	
	  StickerControlsOverlayComponent.prototype._onFlipClick = function _onFlipClick(direction, e) {
	    e.preventDefault();
	    e.stopPropagation();
	
	    this.props.onFlip && this.props.onFlip(direction);
	  };
	
	  /**
	   * Gets called when the user clicks the `take to front` item
	   * @param  {Event} e
	   * @private
	   */
	
	
	  StickerControlsOverlayComponent.prototype._onTakeToFrontClick = function _onTakeToFrontClick(e) {
	    e.preventDefault();
	    e.stopPropagation();
	
	    this.props.onTakeToFront && this.props.onTakeToFront();
	  };
	
	  /**
	   * Gets called when the user clicks the `remove` item
	   * @param  {Event} e
	   * @private
	   */
	
	
	  StickerControlsOverlayComponent.prototype._onRemoveClick = function _onRemoveClick(e) {
	    e.preventDefault();
	    e.stopPropagation();
	
	    this.props.onRemove && this.props.onRemove();
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the items of this component
	   * @return {Array.<ReactBEM.Element>}
	   */
	
	
	  StickerControlsOverlayComponent.prototype._renderItems = function _renderItems() {
	    return [_globals.ReactBEM.createElement(
	      'div',
	      { bem: '$e:item', onClick: this._onFlipClick.bind(this, 'h') },
	      _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/flip-h.png', true) })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$e:item', onClick: this._onFlipClick.bind(this, 'v') },
	      _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/flip-v.png', true) })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$e:item', onClick: this._onTakeToFrontClick.bind(this) },
	      _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/take-to-front.png', true) })
	    ), _globals.ReactBEM.createElement('div', { bem: '$e:separator' }), _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$e:item', onClick: this._onRemoveClick.bind(this) },
	      _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/remove.png', true) })
	    )];
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  StickerControlsOverlayComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      {
	        bem: '$b:stickerControlsOverlay' },
	      this._renderItems()
	    );
	  };
	
	  return StickerControlsOverlayComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = StickerControlsOverlayComponent;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _fontPreviewComponent = __webpack_require__(109);
	
	var _fontPreviewComponent2 = _interopRequireDefault(_fontPreviewComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var FontComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(FontComponent, _BaseComponent);
	
	  function FontComponent() {
	    (0, _classCallCheck3.default)(this, FontComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks one one of the list items
	   * @param  {Object} font
	   * @param  {Event} e
	   * @private
	   */
	
	  FontComponent.prototype._onListItemClick = function _onListItemClick(font, e) {
	    this.props.onChange && this.props.onChange(font);
	  };
	
	  // -------------------------------------------------------------------------- LIST ITEMS
	
	  /**
	   * Renders the list items
	   * @return {Array.<ReactBEM.Element>}
	   * @private
	   */
	
	
	  FontComponent.prototype._renderListItems = function _renderListItems() {
	    var _this2 = this;
	
	    var fonts = this.props.fonts;
	
	
	    return fonts.map(function (font, i) {
	      var isSelected = _this2.props.fontFamily === font.fontFamily && _this2.props.fontWeight === font.fontWeight;
	      var className = isSelected ? 'is-active' : null;
	
	      return _globals.ReactBEM.createElement(
	        'li',
	        {
	          bem: 'e:item',
	          key: i,
	          className: className,
	          onClick: _this2._onListItemClick.bind(_this2, font) },
	        _globals.ReactBEM.createElement(_fontPreviewComponent2.default, {
	          fontFamily: font.fontFamily,
	          fontWeight: font.fontWeight }),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:label' },
	          font.fontFamily
	        )
	      );
	    });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  FontComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var listItems = this._renderListItems();
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:controls e:overlay m:dark' },
	      _globals.ReactBEM.createElement(
	        'ul',
	        { bem: '$b:fontFamily e:list' },
	        listItems
	      )
	    );
	  };
	
	  return FontComponent;
	}(_globals.BaseComponent);
	
	exports.default = FontComponent;

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controls = __webpack_require__(12);
	
	var _controls2 = _interopRequireDefault(_controls);
	
	var _spritesCanvasControlsComponent = __webpack_require__(108);
	
	var _spritesCanvasControlsComponent2 = _interopRequireDefault(_spritesCanvasControlsComponent);
	
	var _textControlsComponent = __webpack_require__(209);
	
	var _textControlsComponent2 = _interopRequireDefault(_textControlsComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Text = _globals.SDK.Operations.SpriteOperation.Text; /*
	                                                          * This file is part of PhotoEditorSDK.
	                                                          *
	                                                          * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                                                          * All rights reserved.
	                                                          *
	                                                          * Redistribution and use in source and binary forms, without
	                                                          * modification, are permitted provided that the following license agreement
	                                                          * is approved and a legal/financial contract was signed by the user.
	                                                          * The license agreement can be found under following link:
	                                                          *
	                                                          * https://www.photoeditorsdk.com/LICENSE.txt
	                                                          */
	
	/**
	 * The text controls
	 * @class
	 * @extends PhotoEditorSDK.UI.ReactUI.Control
	 * @memberof PhotoEditorSDK.UI.ReactUI.Controls
	 */
	
	var TextControls = function (_Controls) {
	  (0, _inherits3.default)(TextControls, _Controls);
	
	  function TextControls() {
	    (0, _classCallCheck3.default)(this, TextControls);
	    return (0, _possibleConstructorReturn3.default)(this, _Controls.apply(this, arguments));
	  }
	
	  /**
	   * Gets called when the user leaves these controls
	   * @this {StickersControlsComponent}
	   * @ignore
	   */
	
	  TextControls.onExit = function onExit() {
	    var editor = this.context.editor;
	
	    var operation = this.getSharedState('operation');
	
	    editor.addHistory(operation, this.getSharedState('initialOptions'), this.getSharedState('operationExistedBefore'));
	
	    operation.setEnabled(true);
	
	    editor.undoZoom();
	    editor.enableFeatures('zoom', 'drag');
	    editor.render();
	  };
	
	  /**
	   * Gets called when the user enters these controls
	   * @this {StickerControlsComponent}
	   * @param {SharedState} sharedState
	   * @override
	   * @ignore
	   */
	
	
	  TextControls.onEnter = function onEnter(sharedState) {
	    var editor = this.context.editor;
	
	    var operationExistedBefore = editor.operationExists('sprite');
	    var operation = editor.getOrCreateOperation('sprite');
	    var sprites = operation.getSprites();
	    var initialOptions = operation.serializeOptions();
	    var selectedSprite = this.getSharedState('selectedSprite');
	
	    if (!selectedSprite) {
	      var sdk = editor.getSDK();
	      var renderer = sdk.getRenderer();
	
	      var finalDimensions = sdk.getFinalDimensions();
	      var text = operation.createText({
	        text: 'Double-click to edit',
	        position: finalDimensions.clone().divide(2),
	        maxWidth: finalDimensions.x / 2,
	        maxHeight: renderer.getMaxTextureSize() || sdk.getFinalDimensions().y * 3,
	        fontSize: Math.round(finalDimensions.y * 0.08),
	        fontFamily: 'Impact',
	        alignment: 'center',
	        anchor: new _globals.Vector2(0, 0),
	        pivot: new _globals.Vector2(0.5, 0)
	      });
	      operation.addSprite(text);
	      selectedSprite = text;
	    }
	
	    this.setSharedState({
	      operationExistedBefore: operationExistedBefore, operation: operation, sprites: sprites, initialOptions: initialOptions, selectedSprite: selectedSprite
	    });
	
	    operation.setEnabled(false);
	    editor.render();
	  };
	
	  /**
	   * Checks if there is something at the given position that
	   * would cause the UI to switch to this control on click
	   * @param  {PhotoEditorSDK.Math.Vector2} position
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {*}
	   * @ignore
	   */
	
	
	  TextControls.clickAtPosition = function clickAtPosition(position, editor) {
	    if (!editor.operationExists('sprite')) return false;
	
	    var operation = editor.getOrCreateOperation('sprite');
	    var sprite = operation.getSpriteAtPosition(position);
	    if (sprite && sprite instanceof Text) {
	      return { selectedSprite: sprite };
	    } else {
	      return false;
	    }
	  };
	
	  /**
	   * Checks if this control is available to the user
	   * @param  {PhotoEditorSDK.UI.ReactUI.Editor} editor
	   * @return {Boolean}
	   * @ignore
	   */
	
	
	  TextControls.isAvailable = function isAvailable(editor) {
	    return editor.isToolEnabled('text');
	  };
	
	  return TextControls;
	}(_controls2.default);
	
	/**
	 * This control's controls component. Used for the lower controls part of the editor.
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	
	
	TextControls.controlsComponent = _textControlsComponent2.default;
	
	/**
	 * This control's canvas component. Used for the upper controls part of the editor (on
	 * top of the canvas)
	 * @type {PhotoEditorSDK.UI.ReactUI.ControlsComponent}
	 * @ignore
	 */
	TextControls.canvasControlsComponent = _spritesCanvasControlsComponent2.default;
	
	/**
	 * This control's identifier
	 * @type {String}
	 * @default
	 */
	TextControls.identifier = 'text';
	
	/**
	 * This control's icon path
	 * @type {String}
	 * @ignore
	 */
	TextControls.iconPath = 'controls/overview/text.png';
	
	/**
	 * The language key that should be used when displaying this filter
	 * @type {String}
	 * @ignore
	 */
	TextControls.languageKey = 'controls.overview.text';
	
	/**
	 * The default options for this control
	 * @type {Object}
	 * @property {Object[]} [additionalFonts = []]
	 * @property {Boolean} [replaceFonts = false]
	 * @property {String[]} [availableFonts = null]
	 */
	TextControls.defaultOptions = {
	  additionalFonts: [],
	  replaceFonts: false,
	  availableFonts: null
	};
	
	exports.default = TextControls;

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	var _colorPickerComponent = __webpack_require__(65);
	
	var _colorPickerComponent2 = _interopRequireDefault(_colorPickerComponent);
	
	var _sliderOverlayComponent = __webpack_require__(66);
	
	var _sliderOverlayComponent2 = _interopRequireDefault(_sliderOverlayComponent);
	
	var _fontPreviewComponent = __webpack_require__(109);
	
	var _fontPreviewComponent2 = _interopRequireDefault(_fontPreviewComponent);
	
	var _fontComponent = __webpack_require__(207);
	
	var _fontComponent2 = _interopRequireDefault(_fontComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ALIGNMENTS = ['left', 'center', 'right'];
	
	var TextControlsComponent = function (_ControlsComponent) {
	  (0, _inherits3.default)(TextControlsComponent, _ControlsComponent);
	
	  function TextControlsComponent() {
	    (0, _classCallCheck3.default)(this, TextControlsComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ControlsComponent.call.apply(_ControlsComponent, [this].concat(args)));
	
	    _this._bindAll('_onFontSizeChange', '_onFontChange', '_onAlignmentClick', '_onTakeToFrontClick', '_onForegroundColorChange', '_onBackgroundColorChange');
	    _this._operation = _this.getSharedState('operation');
	
	    _this.state = { mode: null };
	
	    var editor = _this.context.editor;
	
	    editor.render();
	
	    _this._initFonts();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- INITIALIZATIOn
	
	  /**
	   * Initializes the available fonts
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._initFonts = function _initFonts() {
	    var _props$options = this.props.options;
	    var additionalFonts = _props$options.additionalFonts;
	    var replaceFonts = _props$options.replaceFonts;
	    var selectableFonts = _props$options.selectableFonts;
	
	    additionalFonts = additionalFonts || [];
	
	    var fonts = _globals.Constants.DEFAULTS.FONTS;
	    if (replaceFonts) {
	      this._fonts = additionalFonts;
	    } else {
	      this._fonts = fonts.concat(additionalFonts);
	    }
	
	    if (selectableFonts && selectableFonts.length) {
	      this._fonts = _globals.Utils.select(this._fonts, selectableFonts, function (r) {
	        return r.name;
	      });
	    }
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  TextControlsComponent.prototype.componentDidMount = function componentDidMount() {
	    _ControlsComponent.prototype.componentDidMount.call(this);
	
	    var editor = this.context.editor;
	
	    editor.setZoom('auto', function () {
	      editor.disableFeatures('zoom', 'drag');
	    });
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the user clicks the back button
	   * @param {Event} e
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onBackClick = function _onBackClick(e) {
	    var editor = this.context.editor;
	
	    editor.render();
	
	    _ControlsComponent.prototype._onBackClick.call(this);
	  };
	
	  /**
	   * Gets called when the shared state has changed
	   * @param  {Object} newState
	   */
	
	
	  TextControlsComponent.prototype.sharedStateDidChange = function sharedStateDidChange(newState) {
	    if ('selectedSprite' in newState) {
	      this.forceUpdate();
	    }
	  };
	
	  /**
	   * Gets called when the font size has been changed
	   * @param  {Number} fontSize
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onFontSizeChange = function _onFontSizeChange(fontSize) {
	    var selectedText = this.getSharedState('selectedSprite');
	    selectedText.setFontSize(fontSize);
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the font family or weight has been changed
	   * @param  {Object} font
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onFontChange = function _onFontChange(font) {
	    var selectedText = this.getSharedState('selectedSprite');
	    selectedText.setFontFamily(font.fontFamily);
	    selectedText.setFontWeight(font.fontWeight);
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when the user clicks the alignment button
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onAlignmentClick = function _onAlignmentClick(e) {
	    var selectedText = this.getSharedState('selectedSprite');
	    var alignment = selectedText.getAlignment();
	
	    var currentIndex = ALIGNMENTS.indexOf(alignment);
	    var nextIndex = (currentIndex + 1) % ALIGNMENTS.length;
	    var newAlignment = ALIGNMENTS[nextIndex];
	
	    selectedText.setAlignment(newAlignment);
	    this.forceSharedUpdate();
	  };
	
	  /**
	   * Gets called when the user clicks the "take to front" button
	   * @param  {Event} e
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onTakeToFrontClick = function _onTakeToFrontClick(e) {
	    var operation = this.getSharedState('operation');
	    operation.takeSpriteToFront(this.getSharedState('selectedSprite'));
	    this.forceSharedUpdate();
	  };
	
	  /**
	   * Gets called when the user changes the foreground color
	   * @param  {Color} color
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onForegroundColorChange = function _onForegroundColorChange(color) {
	    var selectedText = this.getSharedState('selectedSprite');
	    selectedText.setColor(color);
	  };
	
	  /**
	   * Gets called when the user changes the background color
	   * @param  {Color} color
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._onBackgroundColorChange = function _onBackgroundColorChange(color) {
	    var selectedText = this.getSharedState('selectedSprite');
	    selectedText.setBackgroundColor(color);
	  };
	
	  // -------------------------------------------------------------------------- MODES
	
	  /**
	   * Switches to the given mode
	   * @param  {String} mode
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._switchToMode = function _switchToMode(mode) {
	    if (mode === this.state.mode) mode = null;
	
	    this.setState({ mode: mode });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the overlay controls of this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  TextControlsComponent.prototype.renderOverlayControls = function renderOverlayControls() {
	    switch (this.state.mode) {
	      case 'size':
	        return this._renderFontSizeOverlayControl();
	      case 'font':
	        return this._renderFontFamilyOverlayControl();
	      default:
	        return null;
	    }
	  };
	
	  // -------------------------------------------------------------------------- FONT SIZE
	
	  /**
	   * Renders the font size overlay control (slider)
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._renderFontSizeOverlayControl = function _renderFontSizeOverlayControl() {
	    var selectedText = this.getSharedState('selectedSprite');
	    if (!selectedText) return;
	
	    var editor = this.context.editor;
	
	    var outputDimensions = editor.getOutputDimensions();
	
	    var maxFontSize = Math.round(outputDimensions.y);
	    var fontSize = selectedText.getFontSize();
	    return _globals.ReactBEM.createElement(_sliderOverlayComponent2.default, {
	      value: fontSize,
	      maxValue: maxFontSize,
	      label: this._t('controls.text.size'),
	      onChange: this._onFontSizeChange });
	  };
	
	  /**
	   * Renders the font size list item
	   * @return {Component}
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._renderSizeItem = function _renderSizeItem() {
	    var selectedText = this.getSharedState('selectedSprite');
	    if (!selectedText) return;
	
	    var fontSize = selectedText.getFontSize();
	    var className = this.state.mode === 'size' ? 'is-active' : null;
	
	    return _globals.ReactBEM.createElement(
	      'li',
	      {
	        bem: 'e:item',
	        key: 'size' },
	      _globals.ReactBEM.createElement(
	        'bem',
	        { specifier: '$b:controls' },
	        _globals.ReactBEM.createElement(
	          'div',
	          {
	            bem: '$e:button m:withLabel',
	            className: className,
	            onClick: this._switchToMode.bind(this, 'size') },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'b:fontSize e:text' },
	            fontSize
	          ),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:label' },
	            this._t('controls.text.size')
	          )
	        )
	      )
	    );
	  };
	
	  // -------------------------------------------------------------------------- FONT FAMILY
	
	  /**
	   * Renders the font family overlay control
	   * @return {ReactBEM.Element}
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._renderFontFamilyOverlayControl = function _renderFontFamilyOverlayControl() {
	    var selectedText = this.getSharedState('selectedSprite');
	    if (!selectedText) return;
	
	    return _globals.ReactBEM.createElement(_fontComponent2.default, {
	      fontFamily: selectedText.getFontFamily(),
	      fontWeight: selectedText.getFontWeight(),
	      fonts: this._fonts,
	      onChange: this._onFontChange });
	  };
	
	  /**
	   * Renders the font list item
	   * @return {Component}
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._renderFontItem = function _renderFontItem() {
	    var selectedText = this.getSharedState('selectedSprite');
	    if (!selectedText) return;
	
	    var className = this.state.mode === 'font' ? 'is-active' : null;
	    return _globals.ReactBEM.createElement(
	      'li',
	      {
	        bem: 'e:item',
	        key: 'font' },
	      _globals.ReactBEM.createElement(
	        'bem',
	        { specifier: '$b:controls' },
	        _globals.ReactBEM.createElement(
	          'div',
	          {
	            bem: '$e:button m:withLabel',
	            className: className,
	            onClick: this._switchToMode.bind(this, 'font') },
	          _globals.ReactBEM.createElement(_fontPreviewComponent2.default, {
	            fontFamily: selectedText.getFontFamily(),
	            fontWeight: selectedText.getFontWeight() }),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:label' },
	            this._t('controls.text.font')
	          )
	        )
	      )
	    );
	  };
	
	  // -------------------------------------------------------------------------- ALIGNMENT
	
	  /**
	   * Renders the text alignment list item
	   * @return {Component}
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._renderAlignmentItem = function _renderAlignmentItem() {
	    var selectedText = this.getSharedState('selectedSprite');
	    if (!selectedText) return;
	
	    var alignment = selectedText.getAlignment();
	
	    return _globals.ReactBEM.createElement(
	      'li',
	      {
	        bem: 'e:item',
	        key: 'alignment' },
	      _globals.ReactBEM.createElement(
	        'bem',
	        { specifier: '$b:controls' },
	        _globals.ReactBEM.createElement(
	          'div',
	          {
	            bem: '$e:button m:withLabel',
	            onClick: this._onAlignmentClick },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/text/align_' + alignment + '.png', true) }),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:label' },
	            this._t('controls.text.alignment')
	          )
	        )
	      )
	    );
	  };
	
	  /**
	   * Renders the "take to front" list item
	   * @return {Component}
	   * @private
	   */
	
	
	  TextControlsComponent.prototype._renderTakeToFrontItem = function _renderTakeToFrontItem() {
	    return _globals.ReactBEM.createElement(
	      'li',
	      {
	        bem: 'e:item',
	        key: 'takeToFront' },
	      _globals.ReactBEM.createElement(
	        'bem',
	        { specifier: '$b:controls' },
	        _globals.ReactBEM.createElement(
	          'div',
	          {
	            bem: '$e:button m:withLabel',
	            onClick: this._onTakeToFrontClick },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/sprites/take_to_front.png', true) }),
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:label' },
	            this._t('controls.text.takeToFront')
	          )
	        )
	      )
	    );
	  };
	
	  /**
	   * Renders this component
	   * @return {Array.<ReactBEM.Element>}
	   */
	
	
	  TextControlsComponent.prototype.renderControls = function renderControls() {
	    var listItems = [this._renderSizeItem(), this._renderFontItem(), this._renderAlignmentItem(), _globals.ReactBEM.createElement('li', { bem: 'e:separator' }), this._renderTakeToFrontItem()];
	
	    var selectedText = this.getSharedState('selectedSprite');
	
	    var foregroundColor = selectedText.getColor().clone();
	    var backgroundColor = selectedText.getBackgroundColor().clone();
	
	    return [_globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:list' },
	      _globals.ReactBEM.createElement(
	        _scrollbarComponent2.default,
	        { ref: 'scrollbar' },
	        _globals.ReactBEM.createElement(
	          'ul',
	          { bem: '$e:list' },
	          listItems
	        )
	      )
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:colorPicker' },
	      _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
	        initialValue: foregroundColor,
	        label: this._t('controls.text.foreground'),
	        onChange: this._onForegroundColorChange })
	    ), _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:cell m:colorPicker' },
	      _globals.ReactBEM.createElement(_colorPickerComponent2.default, {
	        initialValue: backgroundColor,
	        label: this._t('controls.text.background'),
	        onChange: this._onBackgroundColorChange })
	    )];
	  };
	
	  return TextControlsComponent;
	}(_controlsComponent2.default);
	
	exports.default = TextControlsComponent;

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DoneButtonComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(DoneButtonComponent, _BaseComponent);
	
	  function DoneButtonComponent() {
	    (0, _classCallCheck3.default)(this, DoneButtonComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  DoneButtonComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:controls' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:cell m:largeButton' },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: '$e:largeButton', onClick: this.props.onClick },
	          _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/tick.png', true) })
	        )
	      )
	    );
	  };
	
	  return DoneButtonComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = DoneButtonComponent;

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _loadingModalComponent = __webpack_require__(213);
	
	var _loadingModalComponent2 = _interopRequireDefault(_loadingModalComponent);
	
	var _warningModalComponent = __webpack_require__(214);
	
	var _warningModalComponent2 = _interopRequireDefault(_warningModalComponent);
	
	var _errorModalComponent = __webpack_require__(212);
	
	var _errorModalComponent2 = _interopRequireDefault(_errorModalComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var ModalContainerComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ModalContainerComponent, _BaseComponent);
	
	  function ModalContainerComponent() {
	    (0, _classCallCheck3.default)(this, ModalContainerComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._modalManager = _this.props.modalManager;
	    _this._bindAll('_onModalManagerUpdate');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called when this component has been mounted
	   */
	
	
	  ModalContainerComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	
	    this._modalManager.on('update', this._onModalManagerUpdate);
	  };
	
	  /**
	   * Gets called when this component is about to be unmounted
	   */
	
	
	  ModalContainerComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	    _BaseComponent.prototype.componentWillUnmount.call(this);
	
	    this._modalManager.off('update', this._onModalManagerUpdate);
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the modal manager updates
	   * @private
	   */
	
	
	  ModalContainerComponent.prototype._onModalManagerUpdate = function _onModalManagerUpdate() {
	    this.forceUpdate();
	  };
	
	  /**
	   * Gets called when a modal is closed. Removes it from the manager.
	   * @param  {Modal} modal
	   * @private
	   */
	
	
	  ModalContainerComponent.prototype._onModalClosed = function _onModalClosed(modal) {
	    this._modalManager.removeModal(modal);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders the modals
	   * @return {Array.<React.Component>}
	   */
	
	
	  ModalContainerComponent.prototype._renderModals = function _renderModals() {
	    var _this2 = this;
	
	    var modals = this._modalManager.getModals();
	    return modals.map(function (modal) {
	      var ModalComponent = void 0;
	
	      switch (modal.type) {
	        case 'loading':
	          ModalComponent = _loadingModalComponent2.default;
	          break;
	        case 'warning':
	          ModalComponent = _warningModalComponent2.default;
	          break;
	        case 'error':
	          ModalComponent = _errorModalComponent2.default;
	          break;
	      }
	
	      return _globals.ReactBEM.createElement(ModalComponent, {
	        modal: modal,
	        onClose: _this2._onModalClosed.bind(_this2, modal) });
	    });
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ModalContainerComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      null,
	      this._renderModals()
	    );
	  };
	
	  return ModalContainerComponent;
	}(_globals.BaseComponent);
	
	exports.default = ModalContainerComponent;

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ErrorModalComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(ErrorModalComponent, _BaseComponent);
	
	  function ErrorModalComponent() {
	    (0, _classCallCheck3.default)(this, ErrorModalComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onClose');
	    return _this;
	  }
	
	  /**
	   * Gets called when the user clicks the close button
	   * @private
	   */
	
	
	  ErrorModalComponent.prototype._onClose = function _onClose() {
	    this.props.modal.close();
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  ErrorModalComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var modal = this.props.modal;
	
	    var modalElement = _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:modal m:error' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:title' },
	        modal.title
	      ),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:text' },
	        modal.text
	      ),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:button b:button m:inline', onClick: this._onClose },
	        'OK'
	      )
	    );
	
	    var content = modal.overlay ? _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'e:overlay' },
	      modalElement
	    ) : modalElement;
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:modals' },
	      content
	    );
	  };
	
	  return ErrorModalComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = ErrorModalComponent;
	
	
	ErrorModalComponent.propTypes = {
	  modal: _globals.React.PropTypes.object
	};

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var LoadingModalComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(LoadingModalComponent, _BaseComponent);
	
	  function LoadingModalComponent() {
	    (0, _classCallCheck3.default)(this, LoadingModalComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  LoadingModalComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var modal = this.props.modal;
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:modals' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:overlay' },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:modal m:loading' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:text' },
	            modal.text
	          )
	        )
	      )
	    );
	  };
	
	  return LoadingModalComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = LoadingModalComponent;
	
	
	LoadingModalComponent.propTypes = {
	  modal: _globals.React.PropTypes.object
	};

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var WarningModalComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(WarningModalComponent, _BaseComponent);
	
	  function WarningModalComponent() {
	    (0, _classCallCheck3.default)(this, WarningModalComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  WarningModalComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var modal = this.props.modal;
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: '$b:modals' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:modal m:warning' },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:title' },
	          modal.title
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:text' },
	          modal.text
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:button b:button m:inline', onClick: this.props.onClose },
	          'OK'
	        )
	      )
	    );
	  };
	
	  return WarningModalComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = WarningModalComponent;
	
	
	WarningModalComponent.propTypes = {
	  modal: _globals.React.PropTypes.object
	};

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _defineProperty2 = __webpack_require__(14);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CanvasComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(CanvasComponent, _BaseComponent);
	
	  function CanvasComponent() {
	    (0, _classCallCheck3.default)(this, CanvasComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call.apply(_BaseComponent, [this].concat(args)));
	
	    _this._bindAll('_onDragStart', '_onDragMove', '_onDragEnd', '_onWindowResize');
	
	    _this._events = (0, _defineProperty3.default)({}, _globals.Constants.EVENTS.WINDOW_RESIZE, _this._onWindowResize);
	
	    _this._initialRenderDone = false;
	
	    _this.state = {
	      canvasPosition: new _globals.Vector2(),
	      canvasOffset: new _globals.Vector2()
	    };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called after the window has been resized
	   * @private
	   */
	
	
	  CanvasComponent.prototype._onWindowResize = function _onWindowResize() {
	    var editor = this.context.editor;
	
	    var sdk = editor.getSDK();
	    sdk.resizeTo(this._getContainerDimensions());
	    editor.setZoom('auto');
	  };
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after this component has been mounted
	   */
	
	
	  CanvasComponent.prototype.componentDidMount = function componentDidMount() {
	    _BaseComponent.prototype.componentDidMount.call(this);
	
	    var editor = this.context.editor;
	
	    var renderer = editor.getRenderer();
	
	    var _refs = this.refs;
	    var canvasCell = _refs.canvasCell;
	    var canvas = _refs.canvas;
	
	    var width = canvasCell.offsetWidth;
	    var height = canvasCell.offsetHeight;
	    renderer.setCanvas(canvas);
	    renderer.resizeTo(new _globals.Vector2(width, height));
	  };
	
	  // -------------------------------------------------------------------------- DRAGGING
	
	  /**
	   * Gets called when the user starts dragging the canvas
	   * @param {React.SyntheticEvent} e
	   * @private
	   */
	
	
	  CanvasComponent.prototype._onDragStart = function _onDragStart(e) {
	    var editor = this.context.editor;
	
	    if (!editor.isFeatureEnabled('drag')) return;
	
	    e.preventDefault();
	
	    this._dragStartPosition = _globals.Utils.getEventPosition(e.nativeEvent);
	    this._dragInitialOffset = editor.getOffset().clone();
	    document.addEventListener('mousemove', this._onDragMove);
	    document.addEventListener('touchmove', this._onDragMove);
	    document.addEventListener('mouseup', this._onDragEnd);
	    document.addEventListener('touchend', this._onDragEnd);
	  };
	
	  /**
	   * Gets called while the user drags the canvas
	   * @param {DOMEvent} e
	   * @private
	   */
	
	
	  CanvasComponent.prototype._onDragMove = function _onDragMove(e) {
	    var eventPosition = _globals.Utils.getEventPosition(e);
	    var diffFromStart = eventPosition.clone().subtract(this._dragStartPosition);
	
	    var newOffset = this._dragInitialOffset.clone().add(diffFromStart);
	
	    var editor = this.context.editor;
	
	    var lastOffset = editor.getOffset().clone();
	    editor.setOffset(newOffset);
	    if (!editor.getOffset().equals(lastOffset)) {
	      editor.render();
	    }
	  };
	
	  /**
	   * Gets called when the user stops dragging the canvas
	   * @param {DOMEvent} e
	   * @private
	   */
	
	
	  CanvasComponent.prototype._onDragEnd = function _onDragEnd(e) {
	    document.removeEventListener('mousemove', this._onDragMove);
	    document.removeEventListener('touchmove', this._onDragMove);
	    document.removeEventListener('mouseup', this._onDragEnd);
	    document.removeEventListener('touchend', this._onDragEnd);
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Returns the container's dimensions
	   * @return {Vector2}
	   * @private
	   */
	
	
	  CanvasComponent.prototype._getContainerDimensions = function _getContainerDimensions() {
	    var canvasCell = this.refs.canvasCell;
	
	    return new _globals.Vector2(canvasCell.offsetWidth, canvasCell.offsetHeight);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Returns the style properties for the draggable canvas area
	   * @private
	   */
	
	
	  CanvasComponent.prototype._getDraggableStyle = function _getDraggableStyle() {
	    return {
	      top: this.state.canvasPosition.y + this.state.canvasOffset.y,
	      left: this.state.canvasPosition.x + this.state.canvasOffset.x
	    };
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  CanvasComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var canvasContent = null;
	    var containerContent = null;
	    if (this.props.largeControls) {
	      containerContent = this.props.children;
	    } else {
	      canvasContent = this.props.children;
	    }
	
	    var dragEnabled = this.context.editor.isFeatureEnabled('drag');
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:canvas e:container e:row' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:container e:cell', ref: 'canvasCell' },
	        _globals.ReactBEM.createElement(
	          'div',
	          {
	            bem: 'e:innerContainer',
	            className: dragEnabled ? 'is-draggable' : null,
	            onTouchStart: this._onDragStart,
	            onMouseDown: this._onDragStart,
	            style: this._getDraggableStyle() },
	          _globals.ReactBEM.createElement('canvas', {
	            bem: 'e:canvas',
	            ref: 'canvas' }),
	          canvasContent
	        ),
	        containerContent
	      )
	    );
	  };
	
	  return CanvasComponent;
	}(_globals.BaseComponent); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = CanvasComponent;

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _overviewControlsComponent = __webpack_require__(106);
	
	var _overviewControlsComponent2 = _interopRequireDefault(_overviewControlsComponent);
	
	var _screenComponent = __webpack_require__(50);
	
	var _screenComponent2 = _interopRequireDefault(_screenComponent);
	
	var _headerComponent = __webpack_require__(67);
	
	var _headerComponent2 = _interopRequireDefault(_headerComponent);
	
	var _canvasComponent = __webpack_require__(215);
	
	var _canvasComponent2 = _interopRequireDefault(_canvasComponent);
	
	var _modalManager = __webpack_require__(34);
	
	var _modalManager2 = _interopRequireDefault(_modalManager);
	
	var _overview = __webpack_require__(195);
	
	var _overview2 = _interopRequireDefault(_overview);
	
	var _editor = __webpack_require__(223);
	
	var _editor2 = _interopRequireDefault(_editor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	var WINDOW_RESIZE_DELAY = 500;
	
	var EditorScreenComponent = function (_ScreenComponent) {
	  (0, _inherits3.default)(EditorScreenComponent, _ScreenComponent);
	
	  function EditorScreenComponent() {
	    (0, _classCallCheck3.default)(this, EditorScreenComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ScreenComponent.call.apply(_ScreenComponent, [this].concat(args)));
	
	    _this._overviewControls = _overviewControlsComponent2.default;
	
	    _this._bindAll('switchToControls', '_startEditor', '_onWindowResize', '_onWindowResizeDone', '_onImageResize', '_onNewImage', '_onRenderError');
	
	    _this._previousControlsStack = [];
	    _this.state = {
	      zoom: null,
	      controls: _overview2.default,
	      dragEnabled: true,
	      sharedState: new _globals.SharedState()
	    };
	
	    _this._editor = new _editor2.default(_this.context.options, _this.context.mediator);
	    _this._editor.on('new-image', _this._onNewImage);
	    _this._editor.on('ready', _this._startEditor);
	    _this._editor.on('resize', _this._onImageResize);
	    _this._editor.on('render-error', _this._onRenderError);
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Gets called after this component has been mounted
	   */
	
	
	  EditorScreenComponent.prototype.componentDidMount = function componentDidMount() {
	    _ScreenComponent.prototype.componentDidMount.call(this);
	
	    this._editor.setImage(this.context.options.image);
	    window.addEventListener('resize', this._onWindowResize);
	  };
	
	  /**
	   * Gets called before this component is unmounted
	   */
	
	
	  EditorScreenComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	    _ScreenComponent.prototype.componentWillUnmount.call(this);
	
	    this._editor.dispose();
	
	    var options = this.context.options;
	
	    if (options.responsive) {
	      window.removeEventListener('resize', this._onWindowResize);
	    }
	  };
	
	  /**
	   * Sets the zoom level and starts the editor rendering
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._startEditor = function _startEditor() {
	    this._editor.start();
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when an error occurred while rendering
	   * @param  {Event} e
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._onRenderError = function _onRenderError(e) {
	    _modalManager2.default.instance.displayError(this._t('errors.renderingError.title'), this._t('errors.renderingError.text'), true);
	    _globals.Log.error(this.constructor.name, 'An error occurred while rendering: ' + e.message);
	    _globals.Log.printError(e);
	  };
	
	  /**
	   * Gets called when the image has been changed
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._onNewImage = function _onNewImage() {
	    this.switchToControls(_overview2.default);
	  };
	
	  /**
	   * Gets called when the editor starts resizing an image
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._onImageResize = function _onImageResize() {
	    var _this2 = this;
	
	    var loadingModal = _modalManager2.default.instance.displayLoading(this._t('loading.resizing'));
	    this._editor.once('resized', function (_ref) {
	      var dimensions = _ref.dimensions;
	      var reason = _ref.reason;
	
	      loadingModal.close();
	
	      if (reason === 'forcePOT') return;
	
	      _modalManager2.default.instance.displayWarning(_this2._t('warnings.imageResized_' + reason + '.title'), _this2._t('warnings.imageResized_' + reason + '.text', {
	        maxMegaPixels: _this2._editor.getMaxMegapixels(),
	        width: dimensions.x,
	        height: dimensions.y
	      }));
	    });
	  };
	
	  /**
	   * Gets called on window resize
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._onWindowResize = function _onWindowResize() {
	    if (this._resizeTimeout) {
	      window.clearTimeout(this._resizeTimeout);
	      this._resizeTimeout = null;
	    }
	    this._resizeTimeout = window.setTimeout(this._onWindowResizeDone, WINDOW_RESIZE_DELAY);
	  };
	
	  /**
	   * Gets called `WINDOW_RESIZE_DELAY` ms after the last resize event has been called
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._onWindowResizeDone = function _onWindowResizeDone() {
	    this._emitEvent(_globals.Constants.EVENTS.WINDOW_RESIZE);
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Switches to the given controls
	   * @param  {Component} controls
	   * @param  {Object} [initialState] = {}
	   * @param  {Function} [callback]
	   */
	
	
	  EditorScreenComponent.prototype.switchToControls = function switchToControls(controls) {
	    var initialState = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var callback = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	    var newControls = null;
	    if (controls === 'back') {
	      newControls = this._previousControlsStack.pop();
	    } else if (controls === 'home') {
	      newControls = _overview2.default;
	      this._previousControlsStack = [];
	    } else if (typeof controls === 'string') {
	      var allControls = this.context.ui.getAvailableControls();
	      newControls = allControls[controls];
	    } else {
	      newControls = controls;
	      this._previousControlsStack.push(this.state.controls);
	    }
	
	    var controlsChanged = this.state.controls !== newControls;
	
	    // If the previous controls have an `onExit` method, call it
	    // with the controls as `this`
	    if (this.state.controls.onExit) {
	      this.state.controls.onExit.call(this.refs.controls);
	    }
	
	    this.state.sharedState.clear();
	    this.state.sharedState.set(initialState);
	
	    // If the new controls have an `onEnter` method, call it
	    if (newControls.onEnter) {
	      newControls.onEnter.call(this.refs.controls, this.state.sharedState);
	    }
	
	    if (controlsChanged) {
	      this.setState({
	        controls: newControls
	      }, callback);
	    } else {
	      // No need to re-set the state. Call callback immediately
	      return callback && callback();
	    }
	  };
	
	  /**
	   * Returns the zoom level
	   * @return {Number}
	   */
	
	
	  EditorScreenComponent.prototype.getZoom = function getZoom() {
	    return this.state.zoom;
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Decides whether the undo button should be displayed
	   * @return {Boolean}
	   * @private
	   */
	
	
	  EditorScreenComponent.prototype._showUndoButton = function _showUndoButton() {
	    return this._editor.historyAvailable();
	  };
	
	  /**
	   * Returns the context passed to all children
	   * @return {Object}
	   */
	
	
	  EditorScreenComponent.prototype.getChildContext = function getChildContext() {
	    return {
	      editor: this._editor,
	      ui: this.context.ui,
	      options: this.context.options,
	      editorScreen: this,
	      mediator: this.context.mediator
	    };
	  };
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  EditorScreenComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var ControlsComponent = this.state.controls.controlsComponent;
	    var controlsIdentifier = this.state.controls.identifier;
	    var controlsOptions = this.context.options.controlsOptions[controlsIdentifier] || {};
	    var CanvasControlsComponent = this.state.controls.canvasControlsComponent;
	    if (!CanvasControlsComponent) {
	      CanvasControlsComponent = _overview2.default.canvasControlsComponent;
	    }
	    var TopBarControlsComponent = this.state.controls.topBarControlsComponent;
	    if (!TopBarControlsComponent) {
	      TopBarControlsComponent = _overview2.default.topBarControlsComponent;
	    }
	
	    var controls = void 0,
	        canvasControls = void 0,
	        topBarControls = void 0;
	
	    if (TopBarControlsComponent) {
	      topBarControls = _globals.ReactBEM.createElement(TopBarControlsComponent, {
	        sharedState: this.state.sharedState,
	        options: controlsOptions,
	        ref: 'topBarControls' });
	    }
	
	    if (ControlsComponent) {
	      controls = _globals.ReactBEM.createElement(ControlsComponent, {
	        onSwitchControls: this.switchToControls,
	        sharedState: this.state.sharedState,
	        options: controlsOptions,
	        ref: 'controls' });
	    }
	
	    if (CanvasControlsComponent) {
	      canvasControls = _globals.ReactBEM.createElement(CanvasControlsComponent, {
	        onSwitchControls: this.switchToControls,
	        sharedState: this.state.sharedState,
	        ref: 'canvasControls' });
	    }
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:screen' },
	      _globals.ReactBEM.createElement(_headerComponent2.default, null),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:editorScreen' },
	        topBarControls,
	        _globals.ReactBEM.createElement(
	          _canvasComponent2.default,
	          {
	            ref: 'canvas',
	            largeControls: this.state.controls.largeCanvasControls },
	          canvasControls
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: '$b:controls $e:container e:row' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell' },
	            controls
	          )
	        )
	      )
	    );
	  };
	
	  return EditorScreenComponent;
	}(_screenComponent2.default);
	
	exports.default = EditorScreenComponent;
	
	
	EditorScreenComponent.childContextTypes = {
	  ui: _globals.React.PropTypes.object.isRequired,
	  editor: _globals.React.PropTypes.object.isRequired,
	  mediator: _globals.React.PropTypes.object.isRequired,
	  options: _globals.React.PropTypes.object.isRequired,
	  editorScreen: _globals.React.PropTypes.object.isRequired
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _headerComponent = __webpack_require__(67);
	
	var _headerComponent2 = _interopRequireDefault(_headerComponent);
	
	var _screenComponent = __webpack_require__(50);
	
	var _screenComponent2 = _interopRequireDefault(_screenComponent);
	
	var _uploadComponent = __webpack_require__(218);
	
	var _uploadComponent2 = _interopRequireDefault(_uploadComponent);
	
	var _webcamComponent = __webpack_require__(219);
	
	var _webcamComponent2 = _interopRequireDefault(_webcamComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var SplashScreenComponent = function (_ScreenComponent) {
	  (0, _inherits3.default)(SplashScreenComponent, _ScreenComponent);
	
	  function SplashScreenComponent() {
	    (0, _classCallCheck3.default)(this, SplashScreenComponent);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ScreenComponent.call(this));
	
	    _this._bindAll('_onWebcamClick', '_onImage');
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the WebcamComponent has received a click
	   * @private
	   */
	
	
	  SplashScreenComponent.prototype._onWebcamClick = function _onWebcamClick() {
	    this.props.app.switchToWebcamScreen();
	  };
	
	  /**
	   * Gets called when the UploadComponent has received an image file
	   * @param  {image} image
	   * @private
	   */
	
	
	  SplashScreenComponent.prototype._onImage = function _onImage(image) {
	    this.props.app.setImage(image);
	  };
	
	  // -------------------------------------------------------------------------- MISC
	
	  /**
	   * Checks if the webcam is available for the given device
	   * @private
	   */
	
	
	  SplashScreenComponent.prototype._isWebcamAvailable = function _isWebcamAvailable() {
	    return !_globals.Utils.isMobile() && this.context.options.webcam !== false;
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  SplashScreenComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var webcamAvailable = this._isWebcamAvailable();
	    var webcamComponent = void 0;
	    if (webcamAvailable) {
	      webcamComponent = _globals.ReactBEM.createElement(_webcamComponent2.default, {
	        halfHeight: true,
	        onClick: this._onWebcamClick });
	    }
	
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:screen' },
	      _globals.ReactBEM.createElement(_headerComponent2.default, null),
	      webcamComponent,
	      _globals.ReactBEM.createElement(_uploadComponent2.default, {
	        halfHeight: webcamAvailable,
	        onImage: this._onImage })
	    );
	  };
	
	  return SplashScreenComponent;
	}(_screenComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	
	exports.default = SplashScreenComponent;

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(51);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _buttonComponent = __webpack_require__(104);
	
	var _buttonComponent2 = _interopRequireDefault(_buttonComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var UploadComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(UploadComponent, _BaseComponent);
	
	  function UploadComponent() {
	    (0, _classCallCheck3.default)(this, UploadComponent);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call(this));
	
	    _this._bindAll('_onClick', '_onFileChange');
	    _this._bindAll('_onDragEnter', '_onDragOver', '_onDragLeave', '_onDrop');
	
	    _this._dragCounter = 0;
	    _this.state = { dragAreaHovered: false };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the cell emits a `dragEnter` event. Highlights
	   * the cell
	   * @param {Event} e
	   * @private
	   */
	
	
	  UploadComponent.prototype._onDragEnter = function _onDragEnter(e) {
	    e.preventDefault();
	
	    this._dragCounter++;
	    this.setState({ dragAreaHovered: true });
	  };
	
	  /**
	   * Gets called when the cell emits a `dragOver` event. We need to
	   * override the default behavior to get a drop event.
	   * @param  {Event} e
	   * @private
	   */
	
	
	  UploadComponent.prototype._onDragOver = function _onDragOver(e) {
	    e.preventDefault();
	  };
	
	  /**
	   * Gets called when the cell emits a `dragLeave` event
	   * @param  {Event} e
	   * @private
	   */
	
	
	  UploadComponent.prototype._onDragLeave = function _onDragLeave(e) {
	    e.preventDefault();
	
	    this._dragCounter--;
	    if (this._dragCounter === 0) {
	      this.setState({ dragAreaHovered: false });
	    }
	  };
	
	  /**
	   * Gets called when the cell emits a `drop` Event
	   * @param  {Event} e
	   * @private
	   */
	
	
	  UploadComponent.prototype._onDrop = function _onDrop(e) {
	    var _this2 = this;
	
	    e.stopPropagation();
	    e.preventDefault();
	    e = e.nativeEvent;
	    e.returnValue = false;
	
	    this.setState({ dragAreaHovered: false }, function () {
	      if (!e.dataTransfer) return;
	
	      _this2._handleFile(e.dataTransfer.files[0]);
	    });
	  };
	
	  /**
	   * Gets called when the user clicks the button
	   * @param  {Event} e
	   * @private
	   */
	
	
	  UploadComponent.prototype._onClick = function _onClick(e) {
	    var fileInput = this.refs.fileInput;
	
	    fileInput.click();
	  };
	
	  /**
	   * Creates an image from the given file and passes it to the UI
	   * @param  {File} file
	   * @private
	   */
	
	
	  UploadComponent.prototype._handleFile = function _handleFile(file) {
	    var _this3 = this;
	
	    var reader = new window.FileReader();
	    reader.onload = function () {
	      return function (e) {
	        var data = e.target.result;
	        var image = new window.Image();
	
	        image.addEventListener('load', function () {
	          _this3.props.onImage(image);
	        });
	
	        image.src = data;
	      };
	    }(file);
	    reader.readAsDataURL(file);
	  };
	
	  /**
	   * Gets called when the file input has changed
	   * @private
	   */
	
	
	  UploadComponent.prototype._onFileChange = function _onFileChange() {
	    var fileInput = this.refs.fileInput;
	
	    var file = fileInput.files[0];
	    this._handleFile(file);
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  UploadComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var cellProps = {
	      onDragEnter: this._onDragEnter,
	      onDragOver: this._onDragOver,
	      onDragLeave: this._onDragLeave,
	      onDrop: this._onDrop
	    };
	
	    if (this.state.dragAreaHovered) {
	      cellProps.className = 'is-hovered';
	    }
	
	    var cellBEM = '$e:cell';
	    var orNode = null;
	    if (this.props.halfHeight) {
	      orNode = _globals.ReactBEM.createElement(
	        'div',
	        { bem: 'e:or' },
	        this._t('splash.or')
	      );
	      cellBEM += ' m:halfHeight';
	    }
	
	    var contentCellBEM = 'e:contentCell';
	    if (this.context.options.webcam !== false) {
	      contentCellBEM += ' m:withBorder';
	    }
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: 'b:splashScreen' },
	      _globals.ReactBEM.createElement(
	        'div',
	        (0, _extends3.default)({ bem: cellBEM }, cellProps),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:contentWrapper' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:contentRow' },
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: contentCellBEM },
	              _globals.ReactBEM.createElement(
	                'bem',
	                { specifier: 'm:upload' },
	                _globals.ReactBEM.createElement('input', { type: 'file', bem: 'b:hiddenFileInput', ref: 'fileInput', onChange: this._onFileChange }),
	                orNode
	              ),
	              _globals.ReactBEM.createElement('img', { bem: 'e:image',
	                src: this._getAssetPath('splash/add-photo.png', true) }),
	              _globals.ReactBEM.createElement(
	                _buttonComponent2.default,
	                { bem: 'e:button',
	                  onClick: this._onClick },
	                this._t('splash.upload.button')
	              ),
	              _globals.ReactBEM.createElement(
	                'div',
	                { bem: 'e:description' },
	                this._t('splash.upload.description')
	              )
	            )
	          )
	        )
	      )
	    );
	  };
	
	  return UploadComponent;
	}(_globals.BaseComponent);
	
	exports.default = UploadComponent;
	
	
	UploadComponent.propTypes = {
	  onImage: _globals.React.PropTypes.func.isRequired
	};

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _buttonComponent = __webpack_require__(104);
	
	var _buttonComponent2 = _interopRequireDefault(_buttonComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var WebcamComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(WebcamComponent, _BaseComponent);
	
	  function WebcamComponent() {
	    (0, _classCallCheck3.default)(this, WebcamComponent);
	    return (0, _possibleConstructorReturn3.default)(this, _BaseComponent.apply(this, arguments));
	  }
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	  WebcamComponent.prototype.renderWithBEM = function renderWithBEM() {
	    var cellBEM = '$e:cell';
	    if (this.props.halfHeight) {
	      cellBEM += ' m:halfHeight';
	    }
	
	    return _globals.ReactBEM.createElement(
	      'bem',
	      { specifier: 'b:splashScreen' },
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: cellBEM },
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: 'e:contentWrapper' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:contentRow' },
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:contentCell' },
	              _globals.ReactBEM.createElement('img', { bem: 'e:image',
	                src: this._getAssetPath('splash/shutter.png', true) }),
	              _globals.ReactBEM.createElement(
	                _buttonComponent2.default,
	                { bem: 'e:button',
	                  onClick: this.props.onClick },
	                this._t('splash.webcam.button')
	              ),
	              _globals.ReactBEM.createElement(
	                'div',
	                { bem: 'e:description' },
	                this._t('splash.webcam.description')
	              )
	            )
	          )
	        )
	      )
	    );
	  };
	
	  return WebcamComponent;
	}(_globals.BaseComponent);
	
	exports.default = WebcamComponent;
	
	
	WebcamComponent.propTypes = {
	  onClick: _globals.React.PropTypes.func.isRequired
	};

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _modalManager = __webpack_require__(34);
	
	var _modalManager2 = _interopRequireDefault(_modalManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var WebcamComponent = function (_BaseComponent) {
	  (0, _inherits3.default)(WebcamComponent, _BaseComponent);
	
	  function WebcamComponent() {
	    (0, _classCallCheck3.default)(this, WebcamComponent);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseComponent.call(this));
	
	    _this._bindAll('_onWebcamReady');
	
	    _this.state = { webcamReady: false };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- LIFECYCLE
	
	  /**
	   * Checks whether this component needs an update
	   * @param {Object} nextProps
	   * @param {Object} nextState
	   */
	
	
	  WebcamComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
	    // This component never updates
	    return false;
	  };
	
	  /**
	   * Gets called when the component is about to unmount. Stops the video
	   * stream and kills the video
	   */
	
	
	  WebcamComponent.prototype.componentWillUnmount = function componentWillUnmount() {
	    _BaseComponent.prototype.componentWillUnmount.call(this);
	
	    var video = this.refs.video;
	
	    if (this._stream) {
	      var track = this._stream.getTracks()[0];
	      track && track.stop();
	      this._stream.stop && this._stream.stop();
	    }
	    video.pause();
	  };
	
	  /**
	   * Gets called after the component has been mounted
	   */
	
	
	  WebcamComponent.prototype.componentDidMount = function componentDidMount() {
	    this._resizeVideo();
	    this._initVideoStream();
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the webcam is ready to serve a video
	   * @private
	   */
	
	
	  WebcamComponent.prototype._onWebcamReady = function _onWebcamReady() {
	    this.props.onReady && this.props.onReady();
	    this.setState({ webcamReady: true });
	  };
	
	  /**
	   * Public method that makes a photo from the current video stream
	   * @return {Promise}
	   */
	
	
	  WebcamComponent.prototype.makePhoto = function makePhoto() {
	    if (!this.state.webcamReady) {
	      return _globals.Promise.reject(new Error('UserMedia stream not ready'));
	    }
	
	    var video = this.refs.video;
	
	
	    return new _globals.Promise(function (resolve, reject) {
	      var canvas = document.createElement('canvas');
	      canvas.width = video.videoWidth;
	      canvas.height = video.videoHeight;
	
	      var context = canvas.getContext('2d');
	      context.drawImage(video, 0, 0);
	
	      var image = new window.Image();
	      image.addEventListener('load', function () {
	        resolve(image);
	      });
	      image.src = canvas.toDataURL('image/png');
	    });
	  };
	
	  /**
	   * Resizes the video to fit the container
	   * @private
	   */
	
	
	  WebcamComponent.prototype._resizeVideo = function _resizeVideo() {
	    var _refs = this.refs;
	    var video = _refs.video;
	    var container = _refs.container;
	
	    var innerDimensions = _globals.Utils.getInnerDimensionsForElement(container);
	
	    video.width = innerDimensions.x;
	    video.height = innerDimensions.y;
	  };
	
	  /**
	   * Initializes the video stream
	   * @private
	   */
	
	
	  WebcamComponent.prototype._initVideoStream = function _initVideoStream() {
	    var _this2 = this;
	
	    var video = this.refs.video;
	
	    var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
	
	    if (!getUserMedia) {
	      var errorModal = _modalManager2.default.instance.displayError(this._t('errors.webcamNotSupported.title'), this._t('errors.webcamNotSupported.text'));
	      errorModal.on('close', function () {
	        return _this2.props.onBack();
	      });
	      return;
	    }
	
	    getUserMedia.call(navigator, { video: true }, function (stream) {
	      _this2._stream = stream;
	      video.onloadedmetadata = _this2._onWebcamReady;
	      video.src = window.URL.createObjectURL(stream);
	    }, function (err) {
	      console.error && console.error(err);
	
	      var errorModal = _modalManager2.default.instance.displayError(_this2._t('errors.webcamUnavailable.title'), _this2._t('errors.webcamUnavailable.text', { error: err.name }), true);
	
	      errorModal.on('close', function () {
	        return _this2.props.onBack();
	      });
	    });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  WebcamComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: '$b:webcam', ref: 'container' },
	      _globals.ReactBEM.createElement('video', { bem: 'e:video', ref: 'video', autoPlay: true })
	    );
	  };
	
	  return WebcamComponent;
	}(_globals.BaseComponent);
	
	exports.default = WebcamComponent;
	
	
	WebcamComponent.propTypes = {
	  onReady: _globals.React.PropTypes.func
	};

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _screenComponent = __webpack_require__(50);
	
	var _screenComponent2 = _interopRequireDefault(_screenComponent);
	
	var _headerComponent = __webpack_require__(67);
	
	var _headerComponent2 = _interopRequireDefault(_headerComponent);
	
	var _subHeaderComponent = __webpack_require__(110);
	
	var _subHeaderComponent2 = _interopRequireDefault(_subHeaderComponent);
	
	var _webcamComponent = __webpack_require__(220);
	
	var _webcamComponent2 = _interopRequireDefault(_webcamComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var WebcamScreenComponent = function (_ScreenComponent) {
	  (0, _inherits3.default)(WebcamScreenComponent, _ScreenComponent);
	
	  function WebcamScreenComponent() {
	    (0, _classCallCheck3.default)(this, WebcamScreenComponent);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _ScreenComponent.call(this));
	
	    _this._bindAll('_onCancel', '_onWebcamReady', '_onShutterClicked');
	    _this.state = { webcamReady: false };
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Gets called when the webcam is ready
	   * @private
	   */
	
	
	  WebcamScreenComponent.prototype._onWebcamReady = function _onWebcamReady() {
	    this.setState({ webcamReady: true });
	  };
	
	  /**
	   * Gets called when the user clicks the cancel button in the subheader
	   * @private
	   */
	
	
	  WebcamScreenComponent.prototype._onCancel = function _onCancel() {
	    this.props.app.switchToSplashScreen();
	  };
	
	  /**
	   * Gets called when the shutter button has been clicked
	   * @private
	   */
	
	
	  WebcamScreenComponent.prototype._onShutterClicked = function _onShutterClicked() {
	    var _this2 = this;
	
	    var webcam = this.refs.webcam;
	    webcam.makePhoto().then(function (image) {
	      _this2.props.app.setImage(image);
	    }).catch(function (e) {
	      console.error && console.error(e);
	    });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Renders this component
	   * @return {ReactBEM.Element}
	   */
	
	
	  WebcamScreenComponent.prototype.renderWithBEM = function renderWithBEM() {
	    return _globals.ReactBEM.createElement(
	      'div',
	      { bem: 'b:screen' },
	      _globals.ReactBEM.createElement(_headerComponent2.default, null),
	      _globals.ReactBEM.createElement(
	        'div',
	        { bem: '$b:webcamScreen' },
	        _globals.ReactBEM.createElement(
	          _subHeaderComponent2.default,
	          {
	            label: this._t('webcam.headline') },
	          _globals.ReactBEM.createElement(
	            'bem',
	            { specifier: '$b:subHeader' },
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:cancelButton', onClick: this._onCancel },
	              this._t('generic.cancel')
	            ),
	            _globals.ReactBEM.createElement(
	              'div',
	              { bem: 'e:label' },
	              this._t('webcam.headline')
	            )
	          )
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: '$b:canvas e:container e:row' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:container e:cell' },
	            _globals.ReactBEM.createElement(_webcamComponent2.default, {
	              ref: 'webcam',
	              onReady: this._onWebcamReady,
	              onBack: this._onCancel })
	          )
	        ),
	        _globals.ReactBEM.createElement(
	          'div',
	          { bem: '$b:controls $e:container e:row' },
	          _globals.ReactBEM.createElement(
	            'div',
	            { bem: 'e:cell' },
	            _globals.ReactBEM.createElement(
	              'bem',
	              { specifier: 'b:webcamScreen' },
	              _globals.ReactBEM.createElement(
	                'div',
	                {
	                  bem: '$e:shutterButton',
	                  onClick: this._onShutterClicked,
	                  className: this.state.webcamReady ? 'is-active' : false },
	                _globals.ReactBEM.createElement('img', { bem: 'e:icon', src: this._getAssetPath('controls/webcam/shutter.png', true) })
	              )
	            )
	          )
	        )
	      )
	    );
	  };
	
	  return WebcamScreenComponent;
	}(_screenComponent2.default); /** @jsx ReactBEM.createElement **/
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	
	exports.default = WebcamScreenComponent;

/***/ },
/* 222 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	exports.default = {
	  EVENTS: {
	    RENDER: 'render',
	    EXPORT: 'export',
	    CLOSE: 'close',
	    ZOOM: 'zoom',
	    ZOOM_DONE: 'zoom:done',
	    ZOOM_UNDO: 'zoom:undo',
	    OPERATION_CREATED: 'operation:created',
	    OPERATION_UPDATED: 'operation:updated',
	    OPERATION_REMOVED: 'operation:removed',
	    FEATURES_DISABLED: 'editor:features:disabled',
	    FEATURES_ENABLED: 'editor:features:enabled',
	    FEATURES_UPDATED: 'editor:features:updated',
	    COLORPICKER_OPEN: 'colorpicker:open',
	    HISTORY_UPDATED: 'history:update',
	    HISTORY_UNDO: 'history:undo',
	    WINDOW_RESIZE: 'window:resize',
	    CONTROLS_SWITCHED: 'controls:switched'
	  },
	  DEFAULTS: {
	    CROP_RATIOS: [{ name: 'custom', ratio: '*', selected: true }, { name: 'square', ratio: 1 }, { name: '4-3', ratio: 1.33 }, { name: '16-9', ratio: 1.77 }],
	    FONTS: [{ name: 'helvetica', fontFamily: 'Helvetica', fontWeight: 'normal' }, { name: 'verdana', fontFamily: 'Verdana', fontWeight: 'normal' }, { name: 'timesnewroman', fontFamily: 'Times New Roman', fontWeight: 'normal' }, { name: 'impact', fontFamily: 'Impact', fontWeight: 'normal', default: true }],
	    STICKER_CATEGORIES: [{
	      'name': 'glasses',
	      'label': 'Glasses',
	      'stickers': [{
	        'name': 'glasses-nerd',
	        'label': 'Nerd glasses',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/glasses-nerd.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/glasses-nerd.png',
	            'width': 221,
	            'height': 91
	          }
	        }
	      }, {
	        'name': 'glasses-normal',
	        'label': 'Normal glasses',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/glasses-normal.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/glasses-normal.png',
	            'width': 249,
	            'height': 87
	          }
	        }
	      }, {
	        'name': 'glasses-shutter-green',
	        'label': 'Green shutter glasses',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/glasses-shutter-green.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/glasses-shutter-green.png',
	            'width': 235,
	            'height': 89
	          }
	        }
	      }, {
	        'name': 'glasses-shutter-yellow',
	        'label': 'Yellow shutter glasses',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/glasses-shutter-yellow.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/glasses-shutter-yellow.png',
	            'width': 236,
	            'height': 89
	          }
	        }
	      }, {
	        'name': 'glasses-sun',
	        'label': 'Sun glasses',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/glasses-sun.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/glasses-sun.png',
	            'width': 250,
	            'height': 87
	          }
	        }
	      }]
	    }, {
	      'name': 'hats',
	      'label': 'Hats',
	      'stickers': [{
	        'name': 'hat-cap',
	        'label': 'Cap',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/hat-cap.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/hat-cap.png',
	            'width': 237,
	            'height': 189
	          }
	        }
	      }, {
	        'name': 'hat-cylinder',
	        'label': 'Cylinder',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/hat-cylinder.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/hat-cylinder.png',
	            'width': 225,
	            'height': 176
	          }
	        }
	      }, {
	        'name': 'hat-party',
	        'label': 'Party hat',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/hat-party.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/hat-party.png',
	            'width': 140,
	            'height': 226
	          }
	        }
	      }, {
	        'name': 'hat-sheriff',
	        'label': 'Sheriff hat',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/hat-sheriff.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/hat-sheriff.png',
	            'width': 251,
	            'height': 129
	          }
	        }
	      }]
	    }, {
	      'name': 'beards',
	      'label': 'Beards',
	      'stickers': [{
	        'name': 'mustache-long',
	        'label': 'Long mustache',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/mustache-long.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/mustache-long.png',
	            'width': 199,
	            'height': 182
	          }
	        }
	      }, {
	        'name': 'mustache1',
	        'label': 'Brown mustache',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/mustache1.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/mustache1.png',
	            'width': 238,
	            'height': 106
	          }
	        }
	      }, {
	        'name': 'mustache2',
	        'label': 'Black mustache',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/mustache2.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/mustache2.png',
	            'width': 250,
	            'height': 82
	          }
	        }
	      }, {
	        'name': 'mustache3',
	        'label': 'Brown mustache',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/mustache3.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/mustache3.png',
	            'width': 250,
	            'height': 94
	          }
	        }
	      }]
	    }, {
	      'name': 'misc',
	      'label': 'Misc',
	      'stickers': [{
	        'name': 'heart',
	        'label': 'Heart',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/heart.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/heart.png',
	            'width': 185,
	            'height': 174
	          }
	        }
	      }, {
	        'name': 'pipe',
	        'label': 'Pipe',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/pipe.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/pipe.png',
	            'width': 240,
	            'height': 112
	          }
	        }
	      }, {
	        'name': 'snowflake',
	        'label': 'Snow flake',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/snowflake.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/snowflake.png',
	            'width': 204,
	            'height': 171
	          }
	        }
	      }, {
	        'name': 'star',
	        'label': 'Star',
	        'images': {
	          'mediaThumb': {
	            'uri': 'stickers/thumb/star.png',
	            'width': 100,
	            'height': 100
	          },
	          'mediaBase': {
	            'uri': 'stickers/base/star.png',
	            'width': 201,
	            'height': 191
	          }
	        }
	      }]
	    }]
	  }
	};

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _controls = __webpack_require__(191);
	
	var Controls = _interopRequireWildcard(_controls);
	
	var _exporter = __webpack_require__(224);
	
	var _exporter2 = _interopRequireDefault(_exporter);
	
	var _imageResizer = __webpack_require__(227);
	
	var _imageResizer2 = _interopRequireDefault(_imageResizer);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var MIN_ZOOM_DIMENSIONS = 300;
	
	/**
	 * The Editor class is an interface to the SDK, managing operations, rendering,
	 * history, zoom etc.
	 * @class
	 * @memberof PhotoEditorSDK.UI.ReactUI
	 */
	
	var Editor = function (_EventEmitter) {
	  (0, _inherits3.default)(Editor, _EventEmitter);
	
	  function Editor(options, mediator) {
	    (0, _classCallCheck3.default)(this, Editor);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._options = options;
	    _this._mediator = mediator;
	    _this._isDefaultZoom = false;
	    _this._ready = false;
	
	    _this._initSDK();
	    _this._initOperations();
	    _this._initControls();
	
	    _this._features = {
	      drag: true,
	      zoom: true
	    };
	    _this._history = [];
	    _this._operationsMap = {};
	    _this._operationsStack = _this._sdk.getOperationsStack();
	    _this._preferredOperationOrder = _this._options.operationsOrder;
	
	    // Rendering
	    _this._running = false;
	    _this._renderRequested = true;
	    _this._renderCallbacks = [];
	    _this._animationFrameRequest = null;
	
	    // Zoom
	    _this._previousZoom = null;
	
	    _this.setZoom = _this.setZoom.bind(_this);
	    _this.undoZoom = _this.undoZoom.bind(_this);
	    _this.render = _this.render.bind(_this);
	    _this._tick = _this._tick.bind(_this);
	
	    _this._mediator.on(_globals.Constants.EVENTS.RENDER, _this.render);
	    _this._mediator.on(_globals.Constants.EVENTS.ZOOM, _this.setZoom);
	    _this._mediator.on(_globals.Constants.EVENTS.ZOOM_UNDO, _this.undoZoom);
	
	    _this._fixOperationsStack();
	    _this._initWatermark();
	    return _this;
	  }
	
	  // -------------------------------------------------------------------------- INITIALIZATION
	
	  /**
	   * Sets the given image to be rendered. If the image needs to be resized to fit into a
	   * WebGL texture or to match the `maxMegaPixels` option, resizing is done before setting
	   * the image.
	   * @param {Image} image
	   */
	
	
	  Editor.prototype.setImage = function setImage() {
	    var _this2 = this;
	
	    var image = arguments.length <= 0 || arguments[0] === undefined ? this._options.image : arguments[0];
	
	    var renderer = this._sdk.getRenderer();
	    var initialDimensions = new _globals.Vector2(image.width, image.height);
	    var maxPixels = this.getMaxMegapixels() * 1000000;
	    var maxDimensions = renderer.getMaxDimensions();
	    var isWebGLRenderer = renderer.isOfType('webgl');
	    var forcePOT = this._options.forcePOT;
	
	
	    var imageResizer = new _imageResizer2.default(image, forcePOT && isWebGLRenderer, maxPixels, maxDimensions);
	    var exif = null;
	
	    var done = function done(image, dimensions, resizeReason) {
	      _this2._setImage(image, exif, initialDimensions);
	
	      if (resizeReason === 'forcePOT') {
	        var uvs = _this2._sdk.getInputTexture().getUVs().getUVs();
	
	        var relativeDifference = dimensions.clone().subtract(initialDimensions).divide(dimensions);
	        uvs[0].x = uvs[3].x = relativeDifference.x / 2;
	        uvs[1].x = uvs[2].x = 1 - relativeDifference.x / 2;
	        uvs[0].y = uvs[1].y = relativeDifference.y / 2;
	        uvs[2].y = uvs[3].y = 1 - relativeDifference.y / 2;
	      }
	
	      _this2._ready = true;
	      _this2.emit('ready');
	    };
	
	    if (!imageResizer.needsResize()) {
	      done(image);
	    } else {
	      this.emit('resize');
	      exif = this._sdk.parseExif(image);
	      imageResizer.resize().then(function (_ref) {
	        var canvas = _ref.canvas;
	        var dimensions = _ref.dimensions;
	        var reason = _ref.reason;
	
	        // Flag canvas as JPEG so that export will recognize that
	        // it needs to restore EXIF data
	        canvas.src = 'data:image/jpeg;base64,';
	
	        _this2.emit('resized', { dimensions: dimensions, reason: reason });
	        done(canvas, dimensions, reason);
	      });
	    }
	  };
	
	  /**
	   * Initializes the watermark operation
	   * @private
	   */
	
	
	  Editor.prototype._initWatermark = function _initWatermark() {
	    if (this._options.watermark) {
	      this._watermarkOperation = this.getOrCreateOperation('watermark', {
	        image: this._options.watermark
	      });
	    }
	  };
	
	  /**
	   * Initializes the SDK
	   * @private
	   */
	
	
	  Editor.prototype._initSDK = function _initSDK() {
	    var _options = this._options;
	    var image = _options.image;
	    var preferredRenderer = _options.preferredRenderer;
	    var logLevel = _options.logLevel;
	    var displayWelcomeMessage = _options.displayWelcomeMessage;
	    var pixelRatio = _options.pixelRatio;
	
	    var rendererOptions = {
	      image: image,
	      logLevel: logLevel,
	      displayWelcomeMessage: displayWelcomeMessage,
	      pixelRatio: pixelRatio,
	      transparent: true
	    };
	    this._sdk = new _globals.SDK(preferredRenderer, rendererOptions);
	  };
	
	  /**
	   * Initializes the available and enabled controls
	   * @private
	   */
	
	
	  Editor.prototype._initOperations = function _initOperations() {
	    this._availableOperations = this._sdk.getOperations();
	  };
	
	  /**
	   * Since the SDK might create some operations upfront (e.g. to fix the EXIF orientation),
	   * we might have operations at array positions where they should not be. This method
	   * moves them to their appropriate position
	   * @private
	   */
	
	
	  Editor.prototype._fixOperationsStack = function _fixOperationsStack() {
	    var _this3 = this;
	
	    var stack = this._operationsStack.getStack().slice();
	    this._operationsStack.clear();
	
	    stack.forEach(function (s) {
	      _this3.addOperation(s);
	    });
	  };
	
	  /**
	   * Initializes the available and enabled controls
	   * @private
	   */
	
	
	  Editor.prototype._initControls = function _initControls() {
	    this._availableControls = _globals.SDKUtils.extend({}, Controls, this._options.extensions.controls);
	  };
	
	  // -------------------------------------------------------------------------- FEATURES
	
	  /**
	   * Checks if the feature with the given identifier is enabled
	   * @param  {String}  identifier
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.isFeatureEnabled = function isFeatureEnabled(identifier) {
	    var capitalizedIdentifier = identifier.charAt(0).toUpperCase() + identifier.slice(1);
	    var optionEnabled = this._options['enable' + capitalizedIdentifier];
	    return this._features[identifier] && optionEnabled;
	  };
	
	  /**
	   * Enables the features with the given identifiers
	   * @param  {String[]} identifiers
	   */
	
	
	  Editor.prototype.enableFeatures = function enableFeatures() {
	    var _this4 = this;
	
	    for (var _len = arguments.length, identifiers = Array(_len), _key = 0; _key < _len; _key++) {
	      identifiers[_key] = arguments[_key];
	    }
	
	    identifiers.forEach(function (identifier) {
	      _this4._features[identifier] = true;
	    });
	    this._mediator.emit(_globals.Constants.EVENTS.FEATURES_ENABLED, identifiers);
	    this._mediator.emit(_globals.Constants.EVENTS.FEATURES_UPDATED, identifiers);
	  };
	
	  /**
	   * Disables the features with the given identifiers
	   * @param  {String[]} identifiers
	   */
	
	
	  Editor.prototype.disableFeatures = function disableFeatures() {
	    var _this5 = this;
	
	    for (var _len2 = arguments.length, identifiers = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      identifiers[_key2] = arguments[_key2];
	    }
	
	    identifiers.forEach(function (identifier) {
	      _this5._features[identifier] = false;
	    });
	    this._mediator.emit(_globals.Constants.EVENTS.FEATURES_DISABLED, identifiers);
	    this._mediator.emit(_globals.Constants.EVENTS.FEATURES_UPDATED, identifiers);
	  };
	
	  // -------------------------------------------------------------------------- ZOOMING
	
	  /**
	   * Zooms in the editor
	   */
	
	
	  Editor.prototype.zoomIn = function zoomIn() {
	    var zoom = this._sdk.getZoom();
	    this.setZoom(zoom + 0.1);
	  };
	
	  /**
	   * Zooms out the editor
	   */
	
	
	  Editor.prototype.zoomOut = function zoomOut() {
	    var zoom = this._sdk.getZoom();
	    this.setZoom(zoom - 0.1);
	  };
	
	  /**
	   * Switches to the previous zoom
	   */
	
	
	  Editor.prototype.undoZoom = function undoZoom() {
	    if (!this._previousZoom) return;
	    this.setZoom(this._previousZoom);
	    this._previousZoom = null;
	  };
	
	  /**
	   * Returns the current zoom level
	   * @return {Number}
	   */
	
	
	  Editor.prototype.getZoom = function getZoom() {
	    return this._sdk.getZoom();
	  };
	
	  /**
	   * Sets the zoom to the given one
	   * @param {Number} zoom
	   * @param {Function} [callback]
	   */
	
	
	  Editor.prototype.setZoom = function setZoom(zoom, callback) {
	    var _this6 = this;
	
	    this._previousZoom = this._sdk.getZoom();
	
	    var newZoom = zoom;
	    var defaultZoom = this.getDefaultZoom();
	    if (zoom === 'auto' || newZoom === defaultZoom) {
	      newZoom = defaultZoom;
	      zoom = 'auto';
	
	      this._isDefaultZoom = true;
	    } else {
	      this._isDefaultZoom = false;
	    }
	
	    var maxZoom = Math.max(1, defaultZoom * 2);
	    var minZoom = this.getMinimumZoom();
	    newZoom = Math.max(minZoom, Math.min(maxZoom, newZoom));
	
	    this._sdk.setZoom(newZoom);
	    this.fixOffset();
	    this.render(function () {
	      _this6._mediator.emit(_globals.Constants.EVENTS.ZOOM_DONE);
	      callback && callback();
	    });
	  };
	
	  /**
	   * Returns the default zoom level
	   * @return {Number}
	   */
	
	
	  Editor.prototype.getDefaultZoom = function getDefaultZoom() {
	    var finalDimensions = this.getFinalDimensions();
	    var canvasDimensions = this.getCanvasDimensions();
	    var defaultDimensions = _globals.SDKUtils.resizeVectorToFit(finalDimensions, canvasDimensions);
	
	    return defaultDimensions.divide(finalDimensions).x;
	  };
	
	  /**
	   * Returns the minimum zoom level
	   * @return {Number}
	   */
	
	
	  Editor.prototype.getMinimumZoom = function getMinimumZoom() {
	    var finalDimensions = this.getFinalDimensions();
	    var minimumDimensions = _globals.SDKUtils.resizeVectorToFit(finalDimensions, new _globals.Vector2(MIN_ZOOM_DIMENSIONS, MIN_ZOOM_DIMENSIONS));
	
	    return minimumDimensions.divide(finalDimensions).x;
	  };
	
	  // -------------------------------------------------------------------------- PUBLIC HISTORY API
	
	  /**
	   * Checks if there are any history items available
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.historyAvailable = function historyAvailable() {
	    return !!this._history.length;
	  };
	
	  /**
	   * Reverts the last change
	   */
	
	
	  Editor.prototype.undo = function undo() {
	    var lastItem = this._history.pop();
	    if (lastItem) {
	      var operation = lastItem.operation;
	      var existent = lastItem.existent;
	      var options = lastItem.options;
	
	      if (!existent) {
	        this.removeOperation(operation);
	        this._mediator.emit(_globals.Constants.EVENTS.OPERATION_REMOVED, operation);
	      } else {
	        operation = this.getOrCreateOperation(operation.constructor.identifier);
	        operation.set(options);
	        this._mediator.emit(_globals.Constants.EVENTS.OPERATION_UPDATED, operation);
	      }
	
	      this._mediator.emit(_globals.Constants.EVENTS.HISTORY_UPDATED, operation);
	      this._mediator.emit(_globals.Constants.EVENTS.HISTORY_UNDO, operation);
	      this.render();
	    }
	  };
	
	  /**
	   * Adds the given data to the history
	   * @param {PhotoEditorSDK.Operation} operation
	   * @param {Object} options
	   * @param {Boolean} existent
	   * @return {Object}
	   */
	
	
	  Editor.prototype.addHistory = function addHistory(operation, options, existent) {
	    var historyItem = {
	      operation: operation, options: options, existent: existent
	    };
	    this._history.push(historyItem);
	    this._mediator.emit(_globals.Constants.EVENTS.HISTORY_UPDATED, operation);
	    return historyItem;
	  };
	
	  // -------------------------------------------------------------------------- PUBLIC CONTROLS API
	
	  /**
	   * Checks if the control with the given identifier is selectable
	   * @param  {String}  identifier
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.isControlEnabled = function isControlEnabled(identifier) {
	    var control = this.getControl(identifier);
	
	    if (!control) {
	      _globals.Log.info(this.constructor.name, '#isControlEnabled: Unknown control: ' + identifier);
	      return false;
	    }
	
	    return control.isAvailable && control.isAvailable(this);
	  };
	
	  /**
	   * Returns the control with the given identifier
	   * @param  {String} identifier
	   * @return {Control}
	   */
	
	
	  Editor.prototype.getControl = function getControl(identifier) {
	    return this._availableControls[identifier];
	  };
	
	  /**
	   * Returns the available controls
	   * @return {Object[]}
	   */
	
	
	  Editor.prototype.getAvailableControls = function getAvailableControls() {
	    return this._availableControls;
	  };
	
	  /**
	   * Checks if the control with the tool identifier is enabled
	   * @param  {String}  identifier
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.isToolEnabled = function isToolEnabled(identifier) {
	    return this._options.tools.indexOf(identifier) !== -1;
	  };
	
	  // -------------------------------------------------------------------------- PUBLIC OPERATIONS API
	
	  /**
	   * If the operation with the given identifier already exists, it returns
	   * the existing operation. Otherwise, it creates and returns a new one.
	   * @param  {String} identifier
	   * @param  {Object} options
	   * @return {PhotoEditorSDK.Operation}
	   */
	
	
	  Editor.prototype.getOrCreateOperation = function getOrCreateOperation(identifier) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    if (this._operationsMap[identifier]) {
	      return this._operationsMap[identifier];
	    } else {
	      var Operation = this._availableOperations[identifier];
	      var operation = new Operation(this._sdk, options);
	      this.addOperation(operation);
	      return operation;
	    }
	  };
	
	  /**
	   * Adds the given operation to the stack
	   * @param {PhotoEditorSDK.Operation} operation
	   */
	
	
	  Editor.prototype.addOperation = function addOperation(operation) {
	    var _this7 = this;
	
	    var identifier = operation.constructor.identifier;
	    operation.on('updated', function () {
	      _this7._mediator.emit(_globals.Constants.EVENTS.OPERATION_UPDATED, operation);
	    });
	    var index = this._preferredOperationOrder.indexOf(identifier);
	    if (index === -1) {
	      throw new Error('Editor#addOperation: `' + identifier + '` does not appear in `preferredOperationOrder`');
	    }
	    this._operationsStack.set(index, operation);
	    this._operationsMap[identifier] = operation;
	
	    this._mediator.emit(_globals.Constants.EVENTS.OPERATION_CREATED, operation);
	  };
	
	  /**
	   * Removes the given operation from the stack
	   * @param  {PhotoEditorSDK.Operation} operation
	   */
	
	
	  Editor.prototype.removeOperation = function removeOperation(operation) {
	    var identifier = operation.constructor.identifier;
	    var stack = this._operationsStack.getStack();
	
	    // Remove operation from map
	    if (this._operationsMap[identifier] === operation) {
	      delete this._operationsMap[identifier];
	    }
	
	    // Remove operation from stack
	    var index = stack.indexOf(operation);
	    if (index !== -1) {
	      this._operationsStack.removeAt(index);
	
	      // Set all following operations to dirty, since they might
	      // have cached stuff drawn by the removed operation
	      for (var i = index + 1; i < stack.length; i++) {
	        var _operation = stack[i];
	        if (!_operation) continue;
	        _operation.setDirty(true);
	      }
	
	      this._mediator.emit(_globals.Constants.EVENTS.OPERATION_REMOVED, operation);
	    }
	  };
	
	  /**
	   * Returns the operation with the given identifier
	   * @param  {String} identifier
	   * @return {PhotoEditorSDK.Operation}
	   */
	
	
	  Editor.prototype.getOperation = function getOperation(identifier) {
	    return this._operationsMap[identifier];
	  };
	
	  /**
	   * Checks whether an operation with the given identifier exists
	   * @param {String} identifier
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.operationExists = function operationExists(identifier) {
	    return !!this._operationsMap[identifier];
	  };
	
	  // -------------------------------------------------------------------------- MISC PRIVATE API
	
	  /**
	   * Returns the maximum mega pixels
	   * @return {Number}
	   * @private
	   */
	
	
	  Editor.prototype.getMaxMegapixels = function getMaxMegapixels() {
	    var maxMegaPixels = this._options.maxMegaPixels;
	
	    return _globals.Utils.isMobile() ? maxMegaPixels.mobile : maxMegaPixels.desktop;
	  };
	
	  // -------------------------------------------------------------------------- MISC PUBLIC API
	
	  /**
	   * Returns the output sprite's current dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Editor.prototype.getOutputDimensions = function getOutputDimensions() {
	    return this._sdk.getOutputDimensions();
	  };
	
	  /**
	   * Returns the final dimensions that the input image would have
	   * after all existing operations have been applied
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Editor.prototype.getFinalDimensions = function getFinalDimensions() {
	    return this._sdk.getFinalDimensions();
	  };
	
	  /**
	   * Returns the canvas dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Editor.prototype.getCanvasDimensions = function getCanvasDimensions() {
	    var canvas = this._sdk.getCanvas();
	    return new _globals.Vector2(canvas.offsetWidth, canvas.offsetHeight);
	  };
	
	  /**
	   * Sets the given image
	   * @param {Image} image
	   * @param {PhotoEditorSDK.EXIF} [exif]
	   * @param {PhotoEditorSDK.Math.Vector2} [dimensions]
	   * @private
	   */
	
	
	  Editor.prototype._setImage = function _setImage() {
	    var image = arguments.length <= 0 || arguments[0] === undefined ? this._options.image : arguments[0];
	    var exif = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var dimensions = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	    // Invalidate caches
	    this._sdk.setAllOperationsToDirty();
	
	    this._options.image = image;
	    this._sdk.setImage(image, exif, dimensions);
	
	    this.emit('new-image');
	  };
	
	  /**
	   * Exports an image
	   * @param {Boolean} download = false
	   * @return {Promise}
	   */
	
	
	  Editor.prototype.export = function _export() {
	    var _this8 = this;
	
	    var download = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
	
	    if (this._watermarkOperation) {
	      this._watermarkOperation.setEnabled(false);
	    }
	
	    // Invalidate caches
	    this._sdk.setAllOperationsToDirty();
	
	    var options = this._options.export;
	    var exporter = new _exporter2.default(this._sdk, options, download);
	    return exporter.export().then(function (output) {
	      _this8.emit('export', output);
	      _this8._mediator.emit(_globals.Constants.EVENTS.EXPORT, output, _this8);
	
	      if (_this8._watermarkOperation) {
	        _this8._watermarkOperation.setEnabled(true);
	      }
	
	      // Invalidate caches
	      _this8._sdk.setAllOperationsToDirty();
	
	      return output;
	    });
	  };
	
	  // -------------------------------------------------------------------------- RENDERING
	
	  /**
	   * Starts the render loop
	   */
	
	
	  Editor.prototype.start = function start() {
	    this.setZoom('auto');
	    this._animationFrameRequest = (0, _globals.requestAnimationFrame)(this._tick);
	  };
	
	  /**
	   * Stops the render loop
	   */
	
	
	  Editor.prototype.stop = function stop() {
	    this._running = false;
	    if (this._animationFrameRequest) {
	      (0, _globals.cancelAnimationFrame)(this._animationFrameRequest);
	      this._renderCallbacks = [];
	    }
	  };
	
	  /**
	   * Requests a render, adds `callback` to the render callbacks
	   * @param  {Function} [callback]
	   */
	
	
	  Editor.prototype.render = function render(callback) {
	    this._renderRequested = true;
	    if (callback) {
	      this._renderCallbacks.push(callback);
	    }
	  };
	
	  /**
	   * Sets the offset to the given one
	   * @param {PhotoEditorSDK.Math.Vector2} offset
	   */
	
	
	  Editor.prototype.setOffset = function setOffset(offset) {
	    offset = this._clampOffset(offset);
	    this._sdk.setOffset(offset);
	  };
	
	  /**
	   * Returns the current offset
	   * @returns {PhotoEditorSDK.Math.Vector2}
	   */
	
	
	  Editor.prototype.getOffset = function getOffset() {
	    return this._sdk.getOffset();
	  };
	
	  /**
	   * Makes sure the image stays inside the viewport
	   */
	
	
	  Editor.prototype.fixOffset = function fixOffset() {
	    this.setOffset(this._sdk.getOffset());
	  };
	
	  /**
	   * Fixes the given offset to make sure the image stays inside the viewport
	   * @private
	   */
	
	
	  Editor.prototype._clampOffset = function _clampOffset(offset) {
	    var renderer = this._sdk.getRenderer();
	    var rendererDimensions = new _globals.Vector2(renderer.getWidth(), renderer.getHeight());
	    var outputDimensions = this._sdk.getOutputDimensions();
	
	    var minOffset = rendererDimensions.clone().subtract(outputDimensions).divide(2).clamp(null, new _globals.Vector2(0, 0));
	
	    var maxOffset = outputDimensions.clone().subtract(rendererDimensions).divide(2).clamp(new _globals.Vector2(0, 0), null);
	
	    var newOffset = offset.clone().clamp(minOffset, maxOffset).round();
	
	    return newOffset;
	  };
	
	  /**
	   * Gets called when an animation frame is being processed. Renders the
	   * canvas if necessary, requests another animation frame callbacks
	   * @private
	   */
	
	
	  Editor.prototype._tick = function _tick() {
	    var _this9 = this;
	
	    if (this._renderRequested) {
	      (function () {
	        var callbacks = _this9._renderCallbacks.slice(0);
	        _this9._renderCallbacks = [];
	
	        _this9._render().then(function () {
	          callbacks.forEach(function (r) {
	            return r();
	          });
	          _this9._animationFrameRequest = (0, _globals.requestAnimationFrame)(_this9._tick);
	        });
	        _this9._renderRequested = false;
	      })();
	    } else {
	      this._animationFrameRequest = (0, _globals.requestAnimationFrame)(this._tick);
	    }
	  };
	
	  /**
	   * Triggers a render
	   * @private
	   */
	
	
	  Editor.prototype._render = function _render() {
	    var _this10 = this;
	
	    if (!this._ready) return _globals.Promise.resolve();
	
	    return this._sdk.render().then(function () {
	      _this10._lastOutputBounds = _this10._sdk.getSprite().getBounds();
	    }).catch(function (e) {
	      _this10.emit('render-error', e);
	    });
	  };
	
	  /**
	   * Resets everything
	   */
	
	
	  Editor.prototype.reset = function reset() {
	    console.error(new Error('wuuut'));
	    this._sdk.reset();
	    this._history = [];
	    this._operationsMap = {};
	  };
	
	  // -------------------------------------------------------------------------- DISPOSAL
	
	  /**
	   * Cleans this instance up
	   */
	
	
	  Editor.prototype.dispose = function dispose() {
	    this.stop();
	
	    this._sdk.dispose();
	    this._mediator.off(_globals.Constants.EVENTS.RENDER, this.render);
	    this._mediator.off(_globals.Constants.EVENTS.ZOOM, this.setZoom);
	    this._mediator.off(_globals.Constants.EVENTS.ZOOM_UNDO, this.undoZoom);
	  };
	
	  // -------------------------------------------------------------------------- GETTERS / SETTERS
	
	  /**
	   * Checks if the Editor is ready to render
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.isReady = function isReady() {
	    return this._ready;
	  };
	
	  /**
	   * Returns the renderer
	   * @return {PhotoEditorSDK.Engine.BaseRenderer}
	   */
	
	
	  Editor.prototype.getRenderer = function getRenderer() {
	    return this._sdk.getRenderer();
	  };
	
	  /**
	   * Returns the SDK
	   * @return {PhotoEditorSDK}
	   */
	
	
	  Editor.prototype.getSDK = function getSDK() {
	    return this._sdk;
	  };
	
	  /**
	   * Checks if the editor is at the default zoom level
	   * @return {Boolean}
	   */
	
	
	  Editor.prototype.isDefaultZoom = function isDefaultZoom() {
	    return this._isDefaultZoom;
	  };
	
	  /**
	   * Returns the input image dimensions
	   * @return {PhotoEditorSDK.Math.Vector2}s
	   */
	
	
	  Editor.prototype.getInputDimensions = function getInputDimensions() {
	    return this._sdk.getInputDimensions();
	  };
	
	  /**
	   * Returns the operations stack
	   * @return {PhotoEditorSDK.OperationsStack}
	   */
	
	
	  Editor.prototype.getOperationsStack = function getOperationsStack() {
	    return this._operationsStack;
	  };
	
	  return Editor;
	}(_globals.EventEmitter);
	
	exports.default = Editor;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(3);
	
	var _fileDownloader = __webpack_require__(225);
	
	var _fileDownloader2 = _interopRequireDefault(_fileDownloader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Exporter = function () {
	  function Exporter(sdk, options, download) {
	    (0, _classCallCheck3.default)(this, Exporter);
	
	    this._sdk = sdk;
	    this._options = options;
	    this._download = download;
	  }
	
	  /**
	   * Exports the image / data url
	   * @return {Promise}
	   */
	
	
	  Exporter.prototype.export = function _export() {
	    var _this = this;
	
	    var renderType = this._getRenderType();
	
	    return this._sdk.export(renderType, this._options.format).then(function (data) {
	      if (_this._download) {
	        _this._downloadData(renderType, data);
	      }
	      return data;
	    });
	  };
	
	  /**
	   * Downloads the data using the given render type
	   * @param  {RenderType} renderType
	   * @param  {String} data
	   * @private
	   */
	
	
	  Exporter.prototype._downloadData = function _downloadData(renderType, data) {
	    switch (renderType) {
	      case _globals.RenderType.DATAURL:
	        _fileDownloader2.default.downloadDataURL(data);
	        break;
	      case _globals.RenderType.MSBLOB:
	        _fileDownloader2.default.downloadMSBlob(data);
	        break;
	    }
	  };
	
	  /**
	   * Returns the render type for this export
	   * @return {RenderType}
	   * @private
	   */
	
	
	  Exporter.prototype._getRenderType = function _getRenderType() {
	    var options = this._options;
	    if (options.type !== _globals.RenderType.IMAGE || !this._download) {
	      return options.type;
	    } else {
	      if (_globals.Utils.supportsMSBlob()) {
	        return _globals.RenderType.MSBLOB;
	      } else {
	        return _globals.RenderType.DATAURL;
	      }
	    }
	  };
	
	  return Exporter;
	}();
	
	exports.default = Exporter;

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FileDownloader = function () {
	  function FileDownloader() {
	    (0, _classCallCheck3.default)(this, FileDownloader);
	  }
	
	  /**
	   * Exports the given data url
	   * @param  {String} data
	   * @param  {String} baseName = 'photoeditorsdk-export'
	   */
	
	  FileDownloader.downloadDataURL = function downloadDataURL(data) {
	    var baseName = arguments.length <= 1 || arguments[1] === undefined ? 'photoeditorsdk-export' : arguments[1];
	
	    var url = this.createBlobURLFromDataURL(data);
	    var extension = this.getExtensionFromDataURL(data);
	
	    var link = document.createElement('a');
	    link.download = baseName + '.' + extension;
	    link.href = url;
	    document.body.appendChild(link);
	    link.click();
	    document.body.removeChild(link);
	  };
	
	  /**
	   * Exports the given data url using msBlob
	   * @param  {String} data
	   * @param  {String} baseName = 'photoeditorsdk-export'
	   */
	
	
	  FileDownloader.downloadMSBlob = function downloadMSBlob(data) {
	    var baseName = arguments.length <= 1 || arguments[1] === undefined ? 'photoeditorsdk-export' : arguments[1];
	
	    navigator.msSaveBlob(data, baseName + '.png');
	  };
	
	  /**
	   * Returns the file extension by reading the given data url
	   * @param  {String} data
	   * @return {String}
	   */
	
	
	  FileDownloader.getExtensionFromDataURL = function getExtensionFromDataURL(data) {
	    var mimeString = data.split(',')[0].split(':')[1].split(';')[0];
	    return mimeString.split('/').pop();
	  };
	
	  /**
	   * Creates a Blob URI from the given Data URI
	   * @param {String} data
	   */
	
	
	  FileDownloader.createBlobURLFromDataURL = function createBlobURLFromDataURL(data) {
	    if (!window.Blob || !window.URL || !ArrayBuffer || !Uint8Array) {
	      return data;
	    }
	
	    var rawData = _globals.Base64.decode(data.split(',')[1]);
	    var mimeString = data.split(',')[0].split(':')[1].split(';')[0];
	
	    // write the bytes of the string to an ArrayBuffer
	    var arrayBuffer = new ArrayBuffer(rawData.length);
	    var intArray = new Uint8Array(arrayBuffer);
	    for (var i = 0; i < rawData.length; i++) {
	      intArray[i] = rawData[i];
	    }
	
	    // write the ArrayBuffer to a blob, and you're done
	    var blob = new window.Blob([arrayBuffer], {
	      type: mimeString
	    });
	    return window.URL.createObjectURL(blob);
	  };
	
	  return FileDownloader;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = FileDownloader;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FileLoader = function (_EventEmitter) {
	  (0, _inherits3.default)(FileLoader, _EventEmitter);
	
	  function FileLoader(input) {
	    (0, _classCallCheck3.default)(this, FileLoader);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._input = input;
	    _this._onFileChange = _this._onFileChange.bind(_this);
	    _this._input.addEventListener('change', _this._onFileChange);
	    return _this;
	  }
	
	  /**
	   * Opens the file dialog
	   */
	
	
	  FileLoader.prototype.open = function open() {
	    this._input.click();
	  };
	
	  /**
	   * Loads the file into an image
	   * @param  {File} file
	   * @private
	   */
	
	
	  FileLoader.prototype._handleFile = function _handleFile(file) {
	    var _this2 = this;
	
	    var reader = new window.FileReader();
	    reader.onload = function () {
	      return function (e) {
	        var data = e.target.result;
	        var image = new window.Image();
	
	        image.addEventListener('load', function () {
	          _this2.emit('file', image);
	        });
	
	        image.src = data;
	      };
	    }(file);
	    reader.readAsDataURL(file);
	  };
	
	  /**
	   * Gets called when the file input value changes
	   * @private
	   */
	
	
	  FileLoader.prototype._onFileChange = function _onFileChange() {
	    var files = this._input.files;
	
	    if (!files.length) return;
	
	    this._handleFile(files[0]);
	  };
	
	  /**
	   * Disposes all listeners
	   */
	
	
	  FileLoader.prototype.dispose = function dispose() {
	    this._input.removeEventListener('change', this._onFileChange);
	  };
	
	  return FileLoader;
	}(_globals.EventEmitter); /*
	                           * This file is part of PhotoEditorSDK.
	                           *
	                           * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                           * All rights reserved.
	                           *
	                           * Redistribution and use in source and binary forms, without
	                           * modification, are permitted provided that the following license agreement
	                           * is approved and a legal/financial contract was signed by the user.
	                           * The license agreement can be found under following link:
	                           *
	                           * https://www.photoeditorsdk.com/LICENSE.txt
	                           */
	
	exports.default = FileLoader;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _globals = __webpack_require__(3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ImageResizer = function () {
	  function ImageResizer(image, forcePOT, maxPixels, maxDimensions) {
	    (0, _classCallCheck3.default)(this, ImageResizer);
	
	    this._image = image;
	    this._forcePOT = forcePOT;
	    this._maxPixels = maxPixels;
	    this._maxDimensions = maxDimensions;
	  }
	
	  /**
	   * Checks if the image needs to be resized
	   * @return {Boolean}
	   */
	
	
	  ImageResizer.prototype.needsResize = function needsResize() {
	    var dimensions = new _globals.Vector2(this._image.width, this._image.height);
	    var pixels = dimensions.x * dimensions.y;
	    var exceedsMaxPixels = pixels > this._maxPixels;
	    var exceedsMaxDimensions = this._maxDimensions !== null && (dimensions.x > this._maxDimensions || dimensions.y > this._maxDimensions);
	
	    return exceedsMaxPixels || exceedsMaxDimensions || this._forcePOT;
	  };
	
	  /**
	   * Resizes the image to match the maximum amount of pixels
	   * @return {Promise}
	   */
	
	
	  ImageResizer.prototype.resize = function resize() {
	    var _this = this;
	
	    var reason = null;
	    var canvas = null;
	    var maxDimensions = this._maxDimensions;
	
	    return new _globals.Promise(function (resolve, reject) {
	      window.setTimeout(function () {
	        var initialDimensions = new _globals.Vector2(_this._image.width, _this._image.height);
	        var dimensions = initialDimensions.clone();
	
	        // If max pixels is exceeded, resize to fit the max pixels
	        if (dimensions.x * dimensions.y > _this._maxPixels) {
	          dimensions.copy(_this._getDimensionsByMaxPixels());
	          reason = 'maxMegaPixels';
	        }
	
	        // If max dimensions (maximum texture size) is exceeded,
	        // make sure the shorter side equals the maximum texture
	        // size
	        if (maxDimensions !== null && (dimensions.x > maxDimensions || dimensions.y > maxDimensions)) {
	          var scale = Math.min(maxDimensions / dimensions.x, maxDimensions / dimensions.y);
	          dimensions.multiply(scale);
	          reason = 'maxDimensions';
	        }
	
	        dimensions.floor();
	
	        // If `forcePOT` is enabled, we scale the dimensions down to
	        // the next power-of-two dimensions
	        if (_this._forcePOT) {
	          dimensions.x = _globals.SDKUtils.nextHighestPOT(dimensions.x);
	          dimensions.y = _globals.SDKUtils.nextHighestPOT(dimensions.y);
	
	          reason = 'forcePOT';
	          canvas = _this._createResizedImageCanvas(dimensions, initialDimensions);
	        } else {
	          canvas = _this._createResizedImageCanvas(dimensions);
	        }
	
	        resolve({ canvas: canvas, dimensions: dimensions, reason: reason });
	      }, 1000);
	    });
	  };
	
	  /**
	   * Creates a resized canvas with the given dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} dimensions
	   * @param  {PhotoEditorSDK.Math.Vector2} [imageDimensions] = dimensions
	   * @return {Canvas}
	   * @private
	   */
	
	
	  ImageResizer.prototype._createResizedImageCanvas = function _createResizedImageCanvas(dimensions) {
	    var imageDimensions = arguments.length <= 1 || arguments[1] === undefined ? dimensions : arguments[1];
	
	    var image = this._image;
	
	    var canvas = document.createElement('canvas');
	    canvas.width = dimensions.x;
	    canvas.height = dimensions.y;
	
	    var offset = dimensions.clone().subtract(imageDimensions).divide(2);
	
	    var context = canvas.getContext('2d');
	    context.drawImage(image, 0, 0, image.width, image.height, offset.x, offset.y, imageDimensions.x, imageDimensions.y);
	    return canvas;
	  };
	
	  /**
	   * Returns the dimensions that match the max pixel count
	   * @return {Vector2}
	   * @private
	   */
	
	
	  ImageResizer.prototype._getDimensionsByMaxPixels = function _getDimensionsByMaxPixels() {
	    var image = this._image;
	    var maxPixels = this._maxPixels;
	
	    var ratioHV = image.width / image.height;
	    var ratioVH = image.height / image.width;
	
	    return new _globals.Vector2(Math.sqrt(maxPixels * ratioHV), Math.sqrt(maxPixels * ratioVH)).floor();
	  };
	
	  return ImageResizer;
	}(); /*
	      * This file is part of PhotoEditorSDK.
	      *
	      * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	      * All rights reserved.
	      *
	      * Redistribution and use in source and binary forms, without
	      * modification, are permitted provided that the following license agreement
	      * is approved and a legal/financial contract was signed by the user.
	      * The license agreement can be found under following link:
	      *
	      * https://www.photoeditorsdk.com/LICENSE.txt
	      */
	
	exports.default = ImageResizer;

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _photoeditorsdk = __webpack_require__(64);
	
	var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);
	
	var _url = __webpack_require__(359);
	
	var _url2 = _interopRequireDefault(_url);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/* global XMLHttpRequest */
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var TIMEOUT = 5000;
	var Promise = _photoeditorsdk2.default.Promise;
	
	var JSONLoader = function () {
	  function JSONLoader(url) {
	    (0, _classCallCheck3.default)(this, JSONLoader);
	
	    this._url = url;
	    this._parsedUrl = _url2.default.parse(this._url, true);
	  }
	
	  /**
	   * Checks if this request is a JSONP request
	   * @return {Boolean}
	   */
	
	
	  JSONLoader.prototype._isJSONPRequest = function _isJSONPRequest() {
	    var query = this._parsedUrl.query;
	
	    for (var key in query) {
	      var value = query[key];
	      if (value === '?') {
	        return true;
	      }
	    }
	    return false;
	  };
	
	  /**
	   * Loads the JSON(P) from the given URL
	   * @return {Promise}
	   */
	
	
	  JSONLoader.prototype.load = function load() {
	    if (this._isJSONPRequest()) {
	      return this._loadJSONP();
	    } else {
	      return this._loadJSON();
	    }
	  };
	
	  /**
	   * Loads the URL as JSON
	   * @return {Promise}
	   */
	
	
	  JSONLoader.prototype._loadJSON = function _loadJSON() {
	    var _this = this;
	
	    return new Promise(function (resolve, reject) {
	      var xhr = new XMLHttpRequest();
	      xhr.open('GET', _this._url, true);
	
	      xhr.onreadystatechange = function (oEvent) {
	        if (xhr.readyState === 4) {
	          if (xhr.status === 200) {
	            var json = JSON.parse(xhr.responseText);
	            resolve(json);
	          } else {
	            reject(new Error(xhr.statusText));
	          }
	        }
	      };
	      xhr.send(null);
	    });
	  };
	
	  /**
	   * Loads the URL as JSONP
	   * @return {Promise}
	   */
	
	
	  JSONLoader.prototype._loadJSONP = function _loadJSONP() {
	    var _this2 = this;
	
	    var failed = false;
	    var succeeded = false;
	
	    var fnName = 'pesdk' + Math.round(Math.random() * 99999999999999);
	    return new Promise(function (resolve, reject) {
	      var node = _this2._createJSONPNode(fnName);
	      window[fnName] = function (result) {
	        _this2._removeJSONPNode(node);
	        if (!failed) {
	          succeeded = true;
	          resolve(result);
	        }
	      };
	
	      window.setTimeout(function () {
	        if (!succeeded) {
	          _this2._removeJSONPNode(node);
	          failed = true;
	          reject(new Error('Timeout of 5 seconds exceeded.'));
	        }
	      }, TIMEOUT);
	    });
	  };
	
	  /**
	   * Creates a JSONP <script> node inside the <head> element
	   * @param  {String} fnName
	   * @return {DOMElement}
	   * @private
	   */
	
	
	  JSONLoader.prototype._createJSONPNode = function _createJSONPNode(fnName) {
	    var JSONPUrl = this._buildJSONPUrl(fnName);
	    var headNode = document.querySelector('head');
	    var scriptNode = document.createElement('script');
	    scriptNode.src = JSONPUrl;
	    headNode.appendChild(scriptNode);
	    return scriptNode;
	  };
	
	  /**
	   * Removes the JSONP <script> node from the <head> element
	   * @param  {DOMElement} node
	   * @private
	   */
	
	
	  JSONLoader.prototype._removeJSONPNode = function _removeJSONPNode(node) {
	    node.parentNode.removeChild(node);
	  };
	
	  /**
	   * Builds a JSONP url for the given function name
	   * @param  {String} fnName
	   * @return {String}
	   */
	
	
	  JSONLoader.prototype._buildJSONPUrl = function _buildJSONPUrl(fnName) {
	    // Find JSONP parameter
	    var query = this._parsedUrl.query;
	
	    var parameter = null;
	    for (var param in query) {
	      if (query[param] === '?') {
	        parameter = param;
	        break;
	      }
	    }
	
	    delete this._parsedUrl.search;
	    query[parameter] = fnName;
	
	    return _url2.default.format(this._parsedUrl);
	  };
	
	  return JSONLoader;
	}();
	
	exports.default = JSONLoader;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(52);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _photoeditorsdk = __webpack_require__(64);
	
	var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var EventEmitter = _photoeditorsdk2.default.EventEmitter; /*
	                                                           * This file is part of PhotoEditorSDK.
	                                                           *
	                                                           * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	                                                           * All rights reserved.
	                                                           *
	                                                           * Redistribution and use in source and binary forms, without
	                                                           * modification, are permitted provided that the following license agreement
	                                                           * is approved and a legal/financial contract was signed by the user.
	                                                           * The license agreement can be found under following link:
	                                                           *
	                                                           * https://www.photoeditorsdk.com/LICENSE.txt
	                                                           */
	
	var Utils = _photoeditorsdk2.default.Utils;
	
	var SharedState = function (_EventEmitter) {
	  (0, _inherits3.default)(SharedState, _EventEmitter);
	
	  function SharedState() {
	    var state = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    (0, _classCallCheck3.default)(this, SharedState);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._state = state;
	    return _this;
	  }
	
	  /**
	   * Sets the given state
	   * @param {Object} newState
	   * @param {Boolean} update = true
	   */
	
	
	  SharedState.prototype.set = function set() {
	    var newState = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var update = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    if ((typeof newState === 'undefined' ? 'undefined' : (0, _typeof3.default)(newState)) !== 'object') {
	      console && console.warn('SharedState#set expects an object as first parameter');
	    }
	
	    this._state = Utils.extend(this._state, newState);
	    if (update) {
	      this.broadcastUpdate(newState);
	    }
	  };
	
	  /**
	   * Returns the state for the given property
	   * @param {String} prop
	   */
	
	
	  SharedState.prototype.get = function get(prop) {
	    return this._state[prop];
	  };
	
	  /**
	   * Broadcasts an update
	   * @param {Object} newState
	   */
	
	
	  SharedState.prototype.broadcastUpdate = function broadcastUpdate() {
	    var newState = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    this.emit('update', newState);
	  };
	
	  /**
	   * Clears the state
	   */
	
	
	  SharedState.prototype.clear = function clear() {
	    this._state = {};
	  };
	
	  return SharedState;
	}(EventEmitter);
	
	exports.default = SharedState;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _photoeditorsdk = __webpack_require__(64);
	
	var _photoeditorsdk2 = _interopRequireDefault(_photoeditorsdk);
	
	var _log = __webpack_require__(113);
	
	var _log2 = _interopRequireDefault(_log);
	
	var _jsonLoader = __webpack_require__(228);
	
	var _jsonLoader2 = _interopRequireDefault(_jsonLoader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/*
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	var Vector2 = _photoeditorsdk2.default.Math.Vector2;
	
	
	var UIUtils = {
	  /**
	   * Returns the inner dimensions (size - padding) of the given
	   * DOM element
	   * @param  {DOMElement} element
	   * @return {Vector2}
	   */
	
	  getInnerDimensionsForElement: function getInnerDimensionsForElement(element) {
	    var size = new Vector2(element.offsetWidth, element.offsetHeight);
	    var computedStyle = window.getComputedStyle(element, null);
	    size.x -= parseInt(computedStyle.getPropertyValue('padding-left'), 10);
	    size.x -= parseInt(computedStyle.getPropertyValue('padding-right'), 10);
	    size.y -= parseInt(computedStyle.getPropertyValue('padding-top'), 10);
	    size.y -= parseInt(computedStyle.getPropertyValue('padding-bottom'), 10);
	    return size;
	  },
	
	
	  /**
	   * Gets the x and y position for the given event.
	   * @param {Event} e
	   * @return {Vector2}
	   */
	  getEventPosition: function getEventPosition(e) {
	    var x = e.clientX;
	    var y = e.clientY;
	    if (e.type.indexOf('touch') !== -1) {
	      x = e.touches[0].clientX;
	      y = e.touches[0].clientY;
	    }
	    return new Vector2(x, y);
	  },
	
	
	  /**
	   * Creates a canvas with a transparency pattern
	   * @return {Canvas}
	   */
	  createTransparentPatternCanvas: function createTransparentPatternCanvas() {
	    var canvas = document.createElement('canvas');
	    var context = canvas.getContext('2d');
	
	    canvas.width = 10;
	    canvas.height = 10;
	
	    context.fillStyle = 'white';
	    context.fillRect(0, 0, canvas.width, canvas.height);
	    context.fillStyle = '#cccccc';
	    context.fillRect(0, 0, canvas.width / 2, canvas.height / 2);
	    context.fillRect(canvas.width / 2, canvas.height / 2, canvas.width, canvas.height);
	
	    return canvas;
	  },
	
	
	  /**
	   * Checks if the browser supports canvas.msToBlob
	   * @return {Boolean}
	   */
	  supportsMSBlob: function supportsMSBlob() {
	    var canvas = document.createElement('canvas');
	    return typeof canvas.msToBlob !== 'undefined';
	  },
	
	
	  /**
	   * Translates the given key using the given options
	   * @param  {Object} phrases
	   * @param  {String} key
	   * @param  {Object} interpolationOptions = {}
	   * @return {String}
	   */
	  translate: function translate(phrases, key) {
	    var interpolationOptions = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    var response = this.fetch(phrases, key);
	    if (!response) {
	      _log2.default.warn('Utils#translate', 'Unable to translate `' + key + '`');
	      return key;
	    }
	    for (var _key in interpolationOptions) {
	      response = response.replace('${' + _key + '}', interpolationOptions[_key]);
	    }
	    return response;
	  },
	
	
	  /**
	   * Gets the property value at `path` of `object`
	   * @param  {Object} object
	   * @param  {String} path
	   * @param  {?} [defaultValue]
	   * @return {?}
	   */
	  fetch: function fetch(object, path, defaultValue) {
	    // Replace indexes with property accessors
	    path = path.replace(/\[(\w+)\]/g, '.$1');
	    // Strip leading dot (when path begins with [0] for example)
	    path = path.replace(/^\./, '');
	
	    var pathSegments = path.split('.');
	    for (var i = 0; i < pathSegments.length; i++) {
	      var segment = pathSegments[i];
	      object = object[segment];
	      if (!object) {
	        break;
	      }
	    }
	
	    if (typeof object === 'undefined') {
	      return false;
	    }
	
	    return object;
	  },
	
	
	  /**
	   * Checks whether the user agent represents a mobile device
	   * @return {Boolean}
	   */
	  isMobile: function isMobile() {
	    var a = navigator.userAgent || navigator.vendor || window.opera;
	    /* eslint-disable */
	    return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))
	    );
	    /* eslint-enable */
	  },
	
	
	  /**
	   * Selects the `selectedItems` from `items`. `selector` is called for every item, return value
	   * is matched against `selectedItems`
	   * @param  {Array} items
	   * @param  {Array} selectedItems
	   * @param  {Function} [selector = null]
	   * @return {Array}
	   */
	  select: function select(items, selectedItems) {
	    var selector = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	    if (!selector) selector = function selector(i) {
	      return i;
	    };
	
	    var newItems = [];
	    selectedItems.forEach(function (selectedItem) {
	      items.forEach(function (item) {
	        var itemIdentifier = selector(item);
	        if (itemIdentifier === selectedItem) {
	          newItems.push(item);
	        }
	      });
	    });
	    return newItems;
	  },
	
	
	  /**
	   * Gets the given URL using JSON(P)
	   * @param  {String} url
	   * @return {Promise}
	   */
	  getJSONP: function getJSONP(url) {
	    var loader = new _jsonLoader2.default(url);
	    return loader.load();
	  },
	
	
	  /**
	   * Merges the given `newCategories` into the given `categories`
	   * @param  {Array.<Object>} categories
	   * @param  {Array.<Object>} newCategories
	   * @param  {String} itemsProperty
	   * @private
	   */
	  mergeCategories: function mergeCategories(categories, newCategories, itemsProperty) {
	    categories = categories.slice(0);
	
	    var existingCategory = null;
	    newCategories.forEach(function (newCategory) {
	      categories.forEach(function (category) {
	        if (newCategory.name === category.name) {
	          existingCategory = category;
	        }
	      });
	
	      if (!existingCategory) {
	        categories.push(newCategory);
	      } else {
	        existingCategory[itemsProperty] = existingCategory[itemsProperty].concat(newCategory[itemsProperty]);
	      }
	    });
	
	    return categories;
	  }
	};
	
	exports.default = UIUtils;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _classCallCheck2 = __webpack_require__(0);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(2);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(1);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _globals = __webpack_require__(3);
	
	var _appComponent = __webpack_require__(161);
	
	var _appComponent2 = _interopRequireDefault(_appComponent);
	
	var _scrollbarComponent = __webpack_require__(19);
	
	var _scrollbarComponent2 = _interopRequireDefault(_scrollbarComponent);
	
	var _controlsComponent = __webpack_require__(10);
	
	var _controlsComponent2 = _interopRequireDefault(_controlsComponent);
	
	var _modalManager = __webpack_require__(34);
	
	var _modalManager2 = _interopRequireDefault(_modalManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The React UI
	 * @class
	 * @alias ReactUI
	 * @extends PhotoEditorSDK.EventEmitter
	 * @memberof PhotoEditorSDK.UI
	 */
	
	var ReactUI = function (_EventEmitter) {
	  (0, _inherits3.default)(ReactUI, _EventEmitter);
	
	  /**
	   * Creates an UI instance
	   * @param  {Object} [options = {}]
	   * @param  {Image} [options.image] - The image that the user can edit
	   * @param  {DOMElement} [options.container] - The container that the UI should be rendered to
	   * @param  {Boolean} [options.showNewButton = true] - Should the `new` button be displayed?
	   * @param  {Boolean} [options.showCloseButton = false] - Should the close button be displayed?
	   * @param  {String} [options.preferredRenderer = 'webgl'] - `webgl` or `canvas`
	   * @param  {String} [options.language = 'en'] - Currently `en` and `de` are supported
	   * @param  {String} [options.title = 'PhotoEditor SDK'] - Only available for licensees
	   * @param  {Boolen} [options.responsive = false] - Should the editor re-render on window resize?
	   * @param  {Boolean} [options.enableDrag = true] - Should dragging the canvas be enabled?
	   * @param  {Boolean} [options.enableZoom = true] - Should zooming be enabled?
	   * @param  {Boolean} [options.webcam = true] - Enables webcam support. Disabled on mobile devices.
	   * @param  {Boolean} [options.forcePOT = false] - Resizes the image to power-of-two dimensions so
	   *                                     so that we can make use of MIP mapping
	   * @param  {String[]} [options.tools] - The enabled tools. Available are: `crop`, `rotation`,
	   *                                    `flip`, `filter`, `brightness`, `saturation`, `contrast`,
	   *                                    `text`, `sticker`, `brush`, `radial-focus`, `linear-focus`
	   *                                    and `border`
	   * @param  {(String[]|Array[])} [options.controlsOrder] - The order in which the controls are displayed.
	   *                                           Available are `crop`, `orientation`, `filter`,
	   *                                           `adjustments`, `text`, `sticker`, `brush`, `focus`,
	   *                                           `border`. Can be grouped in arrays which will be
	   *                                           displayed with separators.
	   * @param  {String[]} [options.operationsOrder] - The order in which operations are added to
	   *                                              the stack. Changing this may affect the
	   *                                              performance.
	   * @param  {Object} [options.controlsOptions] - Options that are passed to specific controls. See
	   *                                            the documentation for each control to learn more
	   *                                            about available values.
	   * @param  {Object} [options.maxMegaPixels] - Maximum amount of megapixels per device type
	   * @param  {Number} [options.maxMegaPixels.desktop = 10]
	   * @param  {Number} [options.maxMegaPixels.mobile = 5]
	   * @param  {Object} [options.assets]
	   * @param  {String} [options.assets.baseUrl = '/assets'] - Path that is prepended to all asset paths
	   * @param  {Function} [options.assets.resolver] - A function resolving a path to another path.
	   * @param  {Object} [options.export]
	   * @param  {Boolean} [options.export.showButton = true] - Should the `export` button be displayed?
	   * @param  {String} [options.export.format = 'image/png'] - The export format. Available formats
	   *                                         vary by browser.
	   * @param  {PhotoEditorSDK.RenderType} [options.export.type] - The export type (image or data url)
	   * @param  {Boolean} [options.export.download] - Should the result be presented as a download?
	   * @param  {String} [options.logLevel] - `trace`, `info`, `warn`, `error` or `log`
	   * @param  {Number} [options.pixelRatio = 1] - If none is given, PhotoEditorSDK automatically
	   *   detects the current device's pixel ratio
	   */
	
	  function ReactUI() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    (0, _classCallCheck3.default)(this, ReactUI);
	
	    var _this = (0, _possibleConstructorReturn3.default)(this, _EventEmitter.call(this));
	
	    _this._mediator = new _globals.EventEmitter();
	    _this._options = options;
	    _this._initOptions();
	    _this._initLanguage();
	    _this._initEvents();
	
	    _this.run();
	    return _this;
	  }
	
	  /**
	   * Main entry point for the UI
	   * @private
	   */
	
	
	  ReactUI.prototype.run = function run() {
	    this._registerWebFonts();
	
	    // Container has to be position: relative
	    this._options.container.style.position = 'relative';
	    this._render();
	  };
	
	  /**
	   * Renders the UI
	   * @private
	   */
	
	
	  ReactUI.prototype._render = function _render() {
	    var component = _globals.React.createElement(_appComponent2.default, {
	      ui: this,
	      mediator: this._mediator,
	      options: this._options });
	
	    if (this._options.renderReturnsComponent) {
	      return component;
	    } else {
	      this._component = _globals.ReactDOM.render(component, this._options.container);
	    }
	  };
	
	  // -------------------------------------------------------------------------- INITIALIZATION
	
	  /**
	   * Initializes the default options
	   * @private
	   */
	
	
	  ReactUI.prototype._initOptions = function _initOptions() {
	    this._options = _globals.SDKUtils.defaults(this._options, {
	      preferredRenderer: 'webgl',
	      language: 'en',
	      title: 'PhotoEditor SDK',
	      maxMegaPixels: {},
	      responsive: false,
	      enableZoom: true,
	      enableDrag: true,
	      webcam: true,
	      assets: {},
	      tools: ['crop', 'rotation', 'flip', 'filter', 'brightness', 'saturation', 'contrast', 'text', 'sticker', 'brush', 'radial-focus', 'linear-focus', 'border'],
	      forcePOT: false,
	      controlsOrder: [['crop', 'orientation'], ['filter', 'adjustments'], ['text', 'sticker', 'brush'], ['focus', 'border']],
	      operationsOrder: [
	      // First, all operations that affect the image dimensions
	      'orientation', 'crop',
	
	      // Then color operations (first filter, then fine-tuning)
	      'filter', 'adjustments',
	
	      // Then post-processing
	      'radial-focus', 'linear-focus', 'border', 'sprite', 'brush', 'watermark'],
	      controlsOptions: {},
	      showNewButton: true
	    });
	
	    if (typeof this._options.maxMegaPixels !== 'number') {
	      this._options.maxMegaPixels = _globals.SDKUtils.defaults(this._options.maxMegaPixels, {
	        mobile: 5,
	        desktop: 10
	      });
	    }
	
	    this._options.extensions = _globals.SDKUtils.defaults(this._options.extensions || {}, {
	      languages: {},
	      operations: [],
	      controls: []
	    });
	
	    this._options.assets = _globals.SDKUtils.defaults(this._options.assets || {}, {
	      baseUrl: '/assets',
	      resolver: null
	    });
	
	    this._options.export = _globals.SDKUtils.defaults(this._options.export || {}, {
	      showButton: true,
	      format: 'image/png',
	      type: _globals.RenderType.IMAGE,
	      download: true
	    });
	  };
	
	  /**
	   * Creates a <style> block in <head> that specifies the web fonts
	   * that we use in this UI. We're doing this in JS because the assets
	   * path is dynamic.
	   * @private
	   */
	
	
	  ReactUI.prototype._registerWebFonts = function _registerWebFonts() {
	    var regularFontPath = this.getAssetPath('fonts/montserrat-regular.woff', true, true);
	    var lightFontPath = this.getAssetPath('fonts/montserrat-light.woff', true, true);
	
	    var css = '\n      // Injected by PhotoEditorSDK\n      @font-face {\n        font-family: "__pesdk_Montserrat";\n        src: url(\'' + regularFontPath + '\') format(\'woff\');\n        font-weight: normal;\n        font-style: normal;\n      }\n\n      @font-face {\n        font-family: "__pesdk_Montserrat";\n        src: url(\'' + lightFontPath + '\') format(\'woff\');\n        font-weight: 100;\n        font-style: normal;\n      }\n    ';
	
	    this._webFontsStyle = document.createElement('style');
	    this._webFontsStyle.innerHTML = css;
	
	    var head = document.getElementsByTagName('head')[0];
	    head.appendChild(this._webFontsStyle);
	  };
	
	  // -------------------------------------------------------------------------- EVENTS
	
	  /**
	   * Catches mediator events and emits them here
	   * @private
	   */
	
	
	  ReactUI.prototype._initEvents = function _initEvents() {
	    this._mediator.pipeEvents(this);
	  };
	
	  /**
	   * Unpipes the vents
	   * @private
	   */
	
	
	  ReactUI.prototype._disposeEvents = function _disposeEvents() {
	    this._mediator.unpipeEvents(this);
	  };
	
	  // -------------------------------------------------------------------------- I18N
	
	  /**
	   * Initializes the internationalization
	   * @private
	   */
	
	
	  ReactUI.prototype._initLanguage = function _initLanguage() {
	    this._languages = _globals.SDKUtils.defaults({
	      de: __webpack_require__(162),
	      en: __webpack_require__(163)
	    }, this._options.extensions.languages);
	    this._language = this._languages[this._options.language];
	    if (!this._language) {
	      _globals.Log.error(this.constructor.name, 'Language `' + this._options.language + '` not found!');
	    }
	  };
	
	  /**
	   * Returns the translation for `key`
	   * @param  {String} key
	   * @param  {Object} [interpolationOptions]
	   * @return {String}
	   */
	
	
	  ReactUI.prototype.translate = function translate(key, interpolationOptions) {
	    return _globals.Utils.translate(this._language, key, interpolationOptions);
	  };
	
	  /**
	   * Sets the image to the given one
	   * @param {Image} image
	   */
	
	
	  ReactUI.prototype.setImage = function setImage(image) {
	    if (!this._component) return;
	    this._component.setImage(image);
	  };
	
	  /**
	   * Returns the resolved asset path for the given asset name
	   * @param  {String} asset
	   * @param  {Boolean} uiAsset = false
	   * @param  {Boolean} disableRetina = false
	   * @return {String}
	   */
	
	
	  ReactUI.prototype.getAssetPath = function getAssetPath(asset) {
	    var uiAsset = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var disableRetina = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	    var _options$assets = this._options.assets;
	    var baseUrl = _options$assets.baseUrl;
	    var resolver = _options$assets.resolver;
	
	    var path = baseUrl + '/' + asset;
	
	    if (uiAsset) {
	      if (!disableRetina) {
	        // Append @2x if device's pixel ratio > 1
	        var pixelRatio = typeof window !== 'undefined' && window.devicePixelRatio || 1;
	        if (pixelRatio > 1) {
	          var regex = /\.[\w\?=]+$/;
	          asset = asset.replace(regex, function (match) {
	            return '@2x' + match;
	          });
	        }
	      }
	
	      path = baseUrl + '/ui/react/' + asset;
	    }
	
	    if (typeof resolver !== 'undefined' && resolver !== null) {
	      path = resolver(path);
	    }
	
	    return path;
	  };
	
	  /**
	   * Disposes the UI
	   */
	
	
	  ReactUI.prototype.dispose = function dispose() {
	    // Remove web fonts style
	    this._webFontsStyle.parentNode.removeChild(this._webFontsStyle);
	
	    // Unmount AppComponent
	    _globals.ReactDOM.unmountComponentAtNode(this._options.container);
	
	    this._disposeEvents();
	  };
	
	  return ReactUI;
	}(_globals.EventEmitter);
	
	/**
	 * Export event
	 *
	 * @event PhotoEditorSDK.UI.ReactUI#export
	 * @type {Image|String|Blob}
	 */
	
	/**
	 * Operation created event
	 *
	 * @event PhotoEditorSDK.UI.ReactUI#operation:created
	 * @type {PhotoEditorSDK.Operation}
	 */
	
	/**
	 * Operation removed event
	 *
	 * @event PhotoEditorSDK.UI.ReactUI#operation:removed
	 * @type {PhotoEditorSDK.Operation}
	 */
	
	/**
	 * History undo event
	 *
	 * @event PhotoEditorSDK.UI.ReactUI#history:undo
	 */
	
	/**
	 * Controls switched event
	 *
	 * @event PhotoEditorSDK.UI.ReactUI#controls:switched
	 * @type {PhotoEditorSDK.UI.ReactUI.Controls}
	 */
	
	/**
	 * A unique string that represents this UI
	 * @type {String}
	 */
	/*!
	 * This file is part of PhotoEditorSDK.
	 *
	 * Copyright (C) 2016 9elements GmbH <contact@9elements.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, without
	 * modification, are permitted provided that the following license agreement
	 * is approved and a legal/financial contract was signed by the user.
	 * The license agreement can be found under following link:
	 *
	 * https://www.photoeditorsdk.com/LICENSE.txt
	 */
	
	
	ReactUI.prototype.identifier = 'react';
	
	// Export extendable stuff
	ReactUI.BaseComponent = _globals.BaseComponent;
	ReactUI.ControlsComponent = _controlsComponent2.default;
	ReactUI.React = _globals.React;
	ReactUI.ReactBEM = _globals.ReactBEM;
	ReactUI.SharedState = _globals.SharedState;
	ReactUI.Constants = _globals.Constants;
	ReactUI.Utils = _globals.Utils;
	ReactUI.ScrollbarComponent = _scrollbarComponent2.default;
	ReactUI.ModalManager = _modalManager2.default;
	
	/**
	 * The PhotoEditorSDK UI can also be integrated as a React.js component
	 * @class
	 * @extends React.Component
	 * @memberof PhotoEditorSDK.UI.ReactUI
	 */
	
	var ReactComponent = function (_React$Component) {
	  (0, _inherits3.default)(ReactComponent, _React$Component);
	
	  function ReactComponent() {
	    (0, _classCallCheck3.default)(this, ReactComponent);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, _React$Component.call.apply(_React$Component, [this].concat(args)));
	
	    _this2._ui = new ReactUI(_this2.props);
	    return _this2;
	  }
	
	  /**
	   * Renders this component
	   * @return {React.Element}
	   */
	
	
	  ReactComponent.prototype.render = function render() {
	    return this._ui.render();
	  };
	
	  return ReactComponent;
	}(_globals.React.Component);
	
	ReactUI.ReactComponent = ReactComponent;
	
	// Extend PhotoEditorSDK object
	_globals.PhotoEditorSDK.UI = _globals.PhotoEditorSDK.UI || {};
	_globals.PhotoEditorSDK.UI.ReactUI = ReactUI;
	
	module.exports = ReactUI;

/***/ },
/* 232 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	/*!
	 * http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	 * http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating
	 * requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel
	 * MIT license
	 */
	var root = typeof window === 'undefined' ? global : window;
	var rAF = root.requestAnimationFrame;
	var cAF = root.cancelAnimationFrame;
	
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	for (var x = 0; x < vendors.length && !rAF; ++x) {
	  exports.requestAnimationFrame = rAF = root[vendors[x] + 'RequestAnimationFrame'];
	  exports.cancelAnimationFrame = cAF = root[vendors[x] + 'CancelAnimationFrame'] || root[vendors[x] + 'CancelRequestAnimationFrame'];
	}
	
	if (!rAF) {
	  exports.requestAnimationFrame = rAF = function rAF(callback, element) {
	    var currTime = new Date().getTime();
	    var timeToCall = Math.max(0, 16 - (currTime - lastTime));
	    var id = setTimeout(function () {
	      callback(currTime + timeToCall);
	    }, timeToCall);
	    lastTime = currTime + timeToCall;
	    return id;
	  };
	}
	
	if (!cAF) {
	  exports.cancelAnimationFrame = cAF = function cAF(id) {
	    clearTimeout(id);
	  };
	}
	
	exports.requestAnimationFrame = rAF;
	exports.cancelAnimationFrame = cAF;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(240), __esModule: true };

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(241), __esModule: true };

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(242), __esModule: true };

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(244), __esModule: true };

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(245), __esModule: true };

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(246), __esModule: true };

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(233);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(125);
	__webpack_require__(270);
	module.exports = __webpack_require__(20).Array.from;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(272);
	module.exports = __webpack_require__(20).Object.assign;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(273);
	var $Object = __webpack_require__(20).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};

/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(274);
	var $Object = __webpack_require__(20).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(275);
	module.exports = __webpack_require__(20).Object.setPrototypeOf;

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(277);
	__webpack_require__(276);
	__webpack_require__(278);
	__webpack_require__(279);
	module.exports = __webpack_require__(20).Symbol;

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(125);
	__webpack_require__(280);
	module.exports = __webpack_require__(83).f('iterator');

/***/ },
/* 247 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 248 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(30)
	  , toLength  = __webpack_require__(124)
	  , toIndex   = __webpack_require__(268);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(69)
	  , TAG = __webpack_require__(17)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(24)
	  , createDesc      = __webpack_require__(44);
	
	module.exports = function(object, index, value){
	  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(43)
	  , gOPS    = __webpack_require__(75)
	  , pIE     = __webpack_require__(53);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(23).document && document.documentElement;

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(42)
	  , ITERATOR   = __webpack_require__(17)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(69);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(36);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(74)
	  , descriptor     = __webpack_require__(44)
	  , setToStringTag = __webpack_require__(76)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(37)(IteratorPrototype, __webpack_require__(17)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(17)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 259 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(43)
	  , toIObject = __webpack_require__(30);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(54)('meta')
	  , isObject = __webpack_require__(41)
	  , has      = __webpack_require__(29)
	  , setDesc  = __webpack_require__(24).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(40)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(43)
	  , gOPS     = __webpack_require__(75)
	  , pIE      = __webpack_require__(53)
	  , toObject = __webpack_require__(80)
	  , IObject  = __webpack_require__(118)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(40)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(24)
	  , anObject = __webpack_require__(36)
	  , getKeys  = __webpack_require__(43);
	
	module.exports = __webpack_require__(27) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(30)
	  , gOPN      = __webpack_require__(121).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(29)
	  , toObject    = __webpack_require__(80)
	  , IE_PROTO    = __webpack_require__(77)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(41)
	  , anObject = __webpack_require__(36);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(70)(Function.call, __webpack_require__(120).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(79)
	  , defined   = __webpack_require__(71);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(79)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(250)
	  , ITERATOR  = __webpack_require__(17)('iterator')
	  , Iterators = __webpack_require__(42);
	module.exports = __webpack_require__(20).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx            = __webpack_require__(70)
	  , $export        = __webpack_require__(28)
	  , toObject       = __webpack_require__(80)
	  , call           = __webpack_require__(256)
	  , isArrayIter    = __webpack_require__(254)
	  , toLength       = __webpack_require__(124)
	  , createProperty = __webpack_require__(251)
	  , getIterFn      = __webpack_require__(269);
	
	$export($export.S + $export.F * !__webpack_require__(258)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , aLen    = arguments.length
	      , mapfn   = aLen > 1 ? arguments[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(248)
	  , step             = __webpack_require__(259)
	  , Iterators        = __webpack_require__(42)
	  , toIObject        = __webpack_require__(30);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(119)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(28);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(262)});

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(28)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(74)});

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(28);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(27), 'Object', {defineProperty: __webpack_require__(24).f});

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(28);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(266).set});

/***/ },
/* 276 */
/***/ function(module, exports) {



/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(23)
	  , has            = __webpack_require__(29)
	  , DESCRIPTORS    = __webpack_require__(27)
	  , $export        = __webpack_require__(28)
	  , redefine       = __webpack_require__(123)
	  , META           = __webpack_require__(261).KEY
	  , $fails         = __webpack_require__(40)
	  , shared         = __webpack_require__(78)
	  , setToStringTag = __webpack_require__(76)
	  , uid            = __webpack_require__(54)
	  , wks            = __webpack_require__(17)
	  , wksExt         = __webpack_require__(83)
	  , wksDefine      = __webpack_require__(82)
	  , keyOf          = __webpack_require__(260)
	  , enumKeys       = __webpack_require__(252)
	  , isArray        = __webpack_require__(255)
	  , anObject       = __webpack_require__(36)
	  , toIObject      = __webpack_require__(30)
	  , toPrimitive    = __webpack_require__(81)
	  , createDesc     = __webpack_require__(44)
	  , _create        = __webpack_require__(74)
	  , gOPNExt        = __webpack_require__(264)
	  , $GOPD          = __webpack_require__(120)
	  , $DP            = __webpack_require__(24)
	  , $keys          = __webpack_require__(43)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  var D = gOPD(it = toIObject(it), key = toPrimitive(key, true));
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
	      configurable: true,
	      set: function(value){
	        if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	        setSymbolDesc(this, tag, createDesc(1, value));
	      }
	    });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(121).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(53).f  = $propertyIsEnumerable;
	  __webpack_require__(75).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(73)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(37)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(82)('asyncIterator');

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(82)('observable');

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(271);
	var global        = __webpack_require__(23)
	  , hide          = __webpack_require__(37)
	  , Iterators     = __webpack_require__(42)
	  , TO_STRING_TAG = __webpack_require__(17)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 281 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	"use strict";
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(281);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
	
	'use strict';
	
	var toArray = __webpack_require__(294);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var createArrayFromMixed = __webpack_require__(283);
	var getMarkupWrap = __webpack_require__(131);
	var invariant = __webpack_require__(5);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 285 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 286 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	'use strict';
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(286);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 288 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';
	
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isNode = __webpack_require__(288);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 290 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;

/***/ },
/* 291 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	'use strict';
	
	var performance = __webpack_require__(292);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function () {
	    return performance.now();
	  };
	} else {
	  performanceNow = function () {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.7.1
	(function() {
	  var getNanoSeconds, hrtime, loadTime;
	
	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - loadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    loadTime = getNanoSeconds();
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	
	}).call(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
	;(function(root) {
	
		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}
	
		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,
	
		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1
	
		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'
	
		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators
	
		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},
	
		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,
	
		/** Temporary variable */
		key;
	
		/*--------------------------------------------------------------------------*/
	
		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw new RangeError(errors[type]);
		}
	
		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}
	
		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}
	
		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}
	
		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}
	
		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}
	
		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}
	
		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * https://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}
	
		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;
	
			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.
	
			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}
	
			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}
	
			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.
	
			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {
	
				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {
	
					if (index >= inputLength) {
						error('invalid-input');
					}
	
					digit = basicToDigit(input.charCodeAt(index++));
	
					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}
	
					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
	
					if (digit < t) {
						break;
					}
	
					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}
	
					w *= baseMinusT;
	
				}
	
				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);
	
				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}
	
				n += floor(i / out);
				i %= out;
	
				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);
	
			}
	
			return ucs2encode(output);
		}
	
		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;
	
			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);
	
			// Cache the length
			inputLength = input.length;
	
			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;
	
			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}
	
			handledCPCount = basicLength = output.length;
	
			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.
	
			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}
	
			// Main encoding loop:
			while (handledCPCount < inputLength) {
	
				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}
	
				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}
	
				delta += (m - n) * handledCPCountPlusOne;
				n = m;
	
				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];
	
					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}
	
					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}
	
						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}
	
				++delta;
				++n;
	
			}
			return output.join('');
		}
	
		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}
	
		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}
	
		/*--------------------------------------------------------------------------*/
	
		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.4.1',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};
	
		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) {
				// in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else {
				// in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else {
			// in Rhino or a web browser
			root.punycode = punycode;
		}
	
	}(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(358)(module), (function() { return this; }())))

/***/ },
/* 297 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};
	
	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }
	
	  var regexp = /\+/g;
	  qs = qs.split(sep);
	
	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }
	
	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }
	
	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;
	
	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }
	
	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);
	
	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }
	
	  return obj;
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 298 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;
	
	    case 'boolean':
	      return v ? 'true' : 'false';
	
	    case 'number':
	      return isFinite(v) ? v : '';
	
	    default:
	      return '';
	  }
	};
	
	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }
	
	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);
	
	  }
	
	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};
	
	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};
	
	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}
	
	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(297);
	exports.encode = exports.stringify = __webpack_require__(298);


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(139);


/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(9);
	
	var findDOMNode = __webpack_require__(92);
	var focusNode = __webpack_require__(129);
	
	var Mixin = {
	  componentDidMount: function () {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};
	
	var AutoFocusUtils = {
	  Mixin: Mixin,
	
	  focusDOMComponent: function () {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventPropagators = __webpack_require__(47);
	var ExecutionEnvironment = __webpack_require__(8);
	var FallbackCompositionState = __webpack_require__(310);
	var SyntheticCompositionEvent = __webpack_require__(342);
	var SyntheticInputEvent = __webpack_require__(345);
	
	var keyOf = __webpack_require__(25);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(133);
	var ExecutionEnvironment = __webpack_require__(8);
	var ReactPerf = __webpack_require__(13);
	
	var camelizeStyleName = __webpack_require__(282);
	var dangerousStyleValue = __webpack_require__(350);
	var hyphenateStyleName = __webpack_require__(287);
	var memoizeStringOnly = __webpack_require__(291);
	var warning = __webpack_require__(7);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	
	  var warnHyphenatedStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };
	
	  var warnBadVendoredStyleName = function (name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function (name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function (node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventPluginHub = __webpack_require__(46);
	var EventPropagators = __webpack_require__(47);
	var ExecutionEnvironment = __webpack_require__(8);
	var ReactUpdates = __webpack_require__(15);
	var SyntheticEvent = __webpack_require__(33);
	
	var getEventTarget = __webpack_require__(95);
	var isEventSupported = __webpack_require__(98);
	var isTextInputElement = __webpack_require__(160);
	var keyOf = __webpack_require__(25);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function () {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function (val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 305 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function () {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var createNodesFromMarkup = __webpack_require__(284);
	var emptyFunction = __webpack_require__(18);
	var getMarkupWrap = __webpack_require__(131);
	var invariant = __webpack_require__(5);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function (markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
	
	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
	
	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(25);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventPropagators = __webpack_require__(47);
	var SyntheticMouseEvent = __webpack_require__(59);
	
	var ReactMount = __webpack_require__(9);
	var keyOf = __webpack_require__(25);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var ReactErrorUtils = __webpack_require__(148);
	
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function (InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getNode: function (id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function (node) {
	    return injection.Mount.getID(node);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(26);
	
	var assign = __webpack_require__(6);
	var getTextContentAccessor = __webpack_require__(159);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(31);
	var ExecutionEnvironment = __webpack_require__(8);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,
	
	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	'use strict';
	
	var ReactDOM = __webpack_require__(139);
	var ReactDOMServer = __webpack_require__(322);
	var ReactIsomorphic = __webpack_require__(329);
	
	var assign = __webpack_require__(6);
	var deprecated = __webpack_require__(351);
	
	// `version` will be added here by ReactIsomorphic.
	var React = {};
	
	assign(React, ReactIsomorphic);
	
	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
	
	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});
	
	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
	
	module.exports = React;

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	'use strict';
	
	var ReactInstanceMap = __webpack_require__(48);
	
	var findDOMNode = __webpack_require__(92);
	var warning = __webpack_require__(7);
	
	var didWarnKey = '_getDOMNodeDidWarn';
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function () {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(32);
	
	var instantiateReactComponent = __webpack_require__(97);
	var shouldUpdateReactComponent = __webpack_require__(100);
	var traverseAllChildren = __webpack_require__(101);
	var warning = __webpack_require__(7);
	
	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(88);
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceMap = __webpack_require__(48);
	var ReactPerf = __webpack_require__(13);
	var ReactPropTypeLocations = __webpack_require__(58);
	var ReactPropTypeLocationNames = __webpack_require__(57);
	var ReactReconciler = __webpack_require__(32);
	var ReactUpdateQueue = __webpack_require__(90);
	
	var assign = __webpack_require__(6);
	var emptyObject = __webpack_require__(45);
	var invariant = __webpack_require__(5);
	var shouldUpdateReactComponent = __webpack_require__(100);
	var warning = __webpack_require__(7);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedComponent = null;
	
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    // Initialize the public class
	    var inst;
	    var renderedElement;
	
	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = ('prototype' in Component);
	
	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }
	
	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);
	
	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function () {
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }
	
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function (newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function (propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	
	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.
	
	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);
	
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function (prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 316 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function (inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }
	
	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }
	
	    return nativeProps;
	  }
	};
	
	module.exports = ReactDOMButton;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var AutoFocusUtils = __webpack_require__(301);
	var CSSPropertyOperations = __webpack_require__(303);
	var DOMProperty = __webpack_require__(31);
	var DOMPropertyOperations = __webpack_require__(85);
	var EventConstants = __webpack_require__(21);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactComponentBrowserEnvironment = __webpack_require__(87);
	var ReactDOMButton = __webpack_require__(316);
	var ReactDOMInput = __webpack_require__(319);
	var ReactDOMOption = __webpack_require__(320);
	var ReactDOMSelect = __webpack_require__(141);
	var ReactDOMTextarea = __webpack_require__(323);
	var ReactMount = __webpack_require__(9);
	var ReactMultiChild = __webpack_require__(330);
	var ReactPerf = __webpack_require__(13);
	var ReactUpdateQueue = __webpack_require__(90);
	
	var assign = __webpack_require__(6);
	var canDefineProperty = __webpack_require__(61);
	var escapeTextContentForBrowser = __webpack_require__(62);
	var invariant = __webpack_require__(5);
	var isEventSupported = __webpack_require__(98);
	var keyOf = __webpack_require__(25);
	var setInnerHTML = __webpack_require__(63);
	var setTextContent = __webpack_require__(99);
	var shallowEqual = __webpack_require__(132);
	var validateDOMNesting = __webpack_require__(102);
	var warning = __webpack_require__(7);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	
	var ELEMENT_NODE_TYPE = 1;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function () {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}
	
	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}
	
	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}
	
	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}
	
	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}
	
	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
	
	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}
	
	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = ({}).hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  construct: function (element) {
	    this._currentElement = element;
	  },
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (rootID, transaction, context) {
	    this._rootNodeID = rootID;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }
	
	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }
	
	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function () {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }
	
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },
	
	  getPublicInstance: function () {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);
	
	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }
	
	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});
	
	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(145);
	
	var mapObject = __webpack_require__(290);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(89);
	var LinkedValueUtils = __webpack_require__(86);
	var ReactMount = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(15);
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function (inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  mountReadyWrapper: function (inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },
	
	  unmountWrapper: function (inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(136);
	var ReactDOMSelect = __webpack_require__(141);
	
	var assign = __webpack_require__(6);
	var warning = __webpack_require__(7);
	
	var valueContextKey = ReactDOMSelect.valueContextKey;
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }
	
	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];
	
	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  getNativeProps: function (inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = '';
	
	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });
	
	    if (content) {
	      nativeProps.children = content;
	    }
	
	    return nativeProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(8);
	
	var getNodeForCharacterOffset = __webpack_require__(354);
	var getTextContentAccessor = __webpack_require__(159);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */
	
	'use strict';
	
	var ReactDefaultInjection = __webpack_require__(144);
	var ReactServerRendering = __webpack_require__(335);
	var ReactVersion = __webpack_require__(91);
	
	ReactDefaultInjection.inject();
	
	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};
	
	module.exports = ReactDOMServer;

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(86);
	var ReactDOMIDOperations = __webpack_require__(89);
	var ReactUpdates = __webpack_require__(15);
	
	var assign = __webpack_require__(6);
	var invariant = __webpack_require__(5);
	var warning = __webpack_require__(7);
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function (inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(31);
	var ReactDefaultPerfAnalysis = __webpack_require__(325);
	var ReactMount = __webpack_require__(9);
	var ReactPerf = __webpack_require__(13);
	
	var performanceNow = __webpack_require__(293);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function () {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function () {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function () {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  getMeasurementsSummaryMap: function (measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  printDOM: function (measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  _recordWrite: function (id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function (moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if (typeof id === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {
	
	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	'use strict';
	
	var assign = __webpack_require__(6);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(46);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventListener = __webpack_require__(127);
	var ExecutionEnvironment = __webpack_require__(8);
	var PooledClass = __webpack_require__(26);
	var ReactInstanceHandles = __webpack_require__(38);
	var ReactMount = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(15);
	
	var assign = __webpack_require__(6);
	var getEventTarget = __webpack_require__(95);
	var getUnboundedScrollPosition = __webpack_require__(285);
	
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }
	
	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}
	
	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);
	
	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
	
	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(31);
	var EventPluginHub = __webpack_require__(46);
	var ReactComponentEnvironment = __webpack_require__(88);
	var ReactClass = __webpack_require__(137);
	var ReactEmptyComponent = __webpack_require__(146);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactNativeComponent = __webpack_require__(152);
	var ReactPerf = __webpack_require__(13);
	var ReactRootIndex = __webpack_require__(155);
	var ReactUpdates = __webpack_require__(15);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(136);
	var ReactComponent = __webpack_require__(138);
	var ReactClass = __webpack_require__(137);
	var ReactDOMFactories = __webpack_require__(318);
	var ReactElement = __webpack_require__(11);
	var ReactElementValidator = __webpack_require__(145);
	var ReactPropTypes = __webpack_require__(154);
	var ReactVersion = __webpack_require__(91);
	
	var assign = __webpack_require__(6);
	var onlyChild = __webpack_require__(355);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(88);
	var ReactMultiChildUpdateTypes = __webpack_require__(151);
	
	var ReactCurrentOwner = __webpack_require__(22);
	var ReactReconciler = __webpack_require__(32);
	var ReactChildReconciler = __webpack_require__(314);
	
	var flattenChildren = __webpack_require__(352);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function () {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function (textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function (markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(5);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function (object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(84);
	var PooledClass = __webpack_require__(26);
	var ReactBrowserEventEmitter = __webpack_require__(56);
	var ReactDOMFeatureFlags = __webpack_require__(140);
	var ReactInputSelection = __webpack_require__(149);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(6);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(331);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	
	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 334 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function (callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};
	
	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';
	
	var ReactDefaultBatchingStrategy = __webpack_require__(143);
	var ReactElement = __webpack_require__(11);
	var ReactInstanceHandles = __webpack_require__(38);
	var ReactMarkupChecksum = __webpack_require__(150);
	var ReactServerBatchingStrategy = __webpack_require__(334);
	var ReactServerRenderingTransaction = __webpack_require__(336);
	var ReactUpdates = __webpack_require__(15);
	
	var emptyObject = __webpack_require__(45);
	var instantiateReactComponent = __webpack_require__(97);
	var invariant = __webpack_require__(5);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(26);
	var CallbackQueue = __webpack_require__(84);
	var Transaction = __webpack_require__(60);
	
	var assign = __webpack_require__(6);
	var emptyFunction = __webpack_require__(18);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(31);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventPropagators = __webpack_require__(47);
	var ExecutionEnvironment = __webpack_require__(8);
	var ReactInputSelection = __webpack_require__(149);
	var SyntheticEvent = __webpack_require__(33);
	
	var getActiveElement = __webpack_require__(130);
	var isTextInputElement = __webpack_require__(160);
	var keyOf = __webpack_require__(25);
	var shallowEqual = __webpack_require__(132);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 339 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function () {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(21);
	var EventListener = __webpack_require__(127);
	var EventPropagators = __webpack_require__(47);
	var ReactMount = __webpack_require__(9);
	var SyntheticClipboardEvent = __webpack_require__(341);
	var SyntheticEvent = __webpack_require__(33);
	var SyntheticFocusEvent = __webpack_require__(344);
	var SyntheticKeyboardEvent = __webpack_require__(346);
	var SyntheticMouseEvent = __webpack_require__(59);
	var SyntheticDragEvent = __webpack_require__(343);
	var SyntheticTouchEvent = __webpack_require__(347);
	var SyntheticUIEvent = __webpack_require__(49);
	var SyntheticWheelEvent = __webpack_require__(348);
	
	var emptyFunction = __webpack_require__(18);
	var getEventCharCode = __webpack_require__(93);
	var invariant = __webpack_require__(5);
	var keyOf = __webpack_require__(25);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(33);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(33);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(59);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(49);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(33);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(49);
	
	var getEventCharCode = __webpack_require__(93);
	var getEventKey = __webpack_require__(353);
	var getEventModifierState = __webpack_require__(94);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(49);
	
	var getEventModifierState = __webpack_require__(94);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(59);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 349 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(133);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	'use strict';
	
	var assign = __webpack_require__(6);
	var warning = __webpack_require__(7);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function () {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var traverseAllChildren = __webpack_require__(101);
	var warning = __webpack_require__(7);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(93);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 354 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(11);
	
	var invariant = __webpack_require__(5);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(62);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
	
	'use strict';
	
	var ReactMount = __webpack_require__(9);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 358 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			Object.defineProperty(module, "loaded", {
				enumerable: true,
				configurable: false,
				get: function() { return module.l; }
			});
			Object.defineProperty(module, "id", {
				enumerable: true,
				configurable: false,
				get: function() { return module.i; }
			});
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var punycode = __webpack_require__(296);
	var util = __webpack_require__(360);
	
	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;
	
	exports.Url = Url;
	
	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}
	
	// Reference: RFC 3986, RFC 1808, RFC 2396
	
	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,
	
	    // Special case for a simple path URL
	    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
	
	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
	
	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
	
	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(299);
	
	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && util.isObject(url) && url instanceof Url) return url;
	
	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}
	
	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!util.isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }
	
	  // Copy chrome, IE, opera backslash-handling behavior.
	  // Back slashes before the query string get converted to forward slashes
	  // See: https://code.google.com/p/chromium/issues/detail?id=25916
	  var queryIndex = url.indexOf('?'),
	      splitter =
	          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
	      uSplit = url.split(splitter),
	      slashRegex = /\\/g;
	  uSplit[0] = uSplit[0].replace(slashRegex, '/');
	  url = uSplit.join(splitter);
	
	  var rest = url;
	
	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();
	
	  if (!slashesDenoteHost && url.split('#').length === 1) {
	    // Try fast path regexp
	    var simplePath = simplePathPattern.exec(rest);
	    if (simplePath) {
	      this.path = rest;
	      this.href = rest;
	      this.pathname = simplePath[1];
	      if (simplePath[2]) {
	        this.search = simplePath[2];
	        if (parseQueryString) {
	          this.query = querystring.parse(this.search.substr(1));
	        } else {
	          this.query = this.search.substr(1);
	        }
	      } else if (parseQueryString) {
	        this.search = '';
	        this.query = {};
	      }
	      return this;
	    }
	  }
	
	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }
	
	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }
	
	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {
	
	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c
	
	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.
	
	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	
	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }
	
	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }
	
	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;
	
	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);
	
	    // pull out port.
	    this.parseHost();
	
	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';
	
	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';
	
	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }
	
	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }
	
	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a punycoded representation of "domain".
	      // It only converts parts of the domain name that
	      // have non-ASCII characters, i.e. it doesn't matter if
	      // you call it with a domain that already is ASCII-only.
	      this.hostname = punycode.toASCII(this.hostname);
	    }
	
	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;
	
	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }
	
	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {
	
	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      if (rest.indexOf(ae) === -1)
	        continue;
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }
	
	
	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }
	
	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }
	
	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};
	
	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (util.isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}
	
	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }
	
	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';
	
	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }
	
	  if (this.query &&
	      util.isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }
	
	  var search = this.search || (query && ('?' + query)) || '';
	
	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';
	
	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }
	
	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;
	
	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');
	
	  return protocol + host + pathname + search + hash;
	};
	
	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}
	
	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};
	
	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}
	
	Url.prototype.resolveObject = function(relative) {
	  if (util.isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }
	
	  var result = new Url();
	  var tkeys = Object.keys(this);
	  for (var tk = 0; tk < tkeys.length; tk++) {
	    var tkey = tkeys[tk];
	    result[tkey] = this[tkey];
	  }
	
	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;
	
	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }
	
	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    var rkeys = Object.keys(relative);
	    for (var rk = 0; rk < rkeys.length; rk++) {
	      var rkey = rkeys[rk];
	      if (rkey !== 'protocol')
	        result[rkey] = relative[rkey];
	    }
	
	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }
	
	    result.href = result.format();
	    return result;
	  }
	
	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      var keys = Object.keys(relative);
	      for (var v = 0; v < keys.length; v++) {
	        var k = keys[v];
	        result[k] = relative[k];
	      }
	      result.href = result.format();
	      return result;
	    }
	
	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }
	
	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];
	
	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }
	
	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!util.isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especially happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }
	
	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host || srcPath.length > 1) &&
	      (last === '.' || last === '..') || last === '');
	
	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last === '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }
	
	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }
	
	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }
	
	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');
	
	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especially happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }
	
	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);
	
	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }
	
	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }
	
	  //to support request.http
	  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};
	
	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};


/***/ },
/* 360 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	  isString: function(arg) {
	    return typeof(arg) === 'string';
	  },
	  isObject: function(arg) {
	    return typeof(arg) === 'object' && arg !== null;
	  },
	  isNull: function(arg) {
	    return arg === null;
	  },
	  isNullOrUndefined: function(arg) {
	    return arg == null;
	  }
	};


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,